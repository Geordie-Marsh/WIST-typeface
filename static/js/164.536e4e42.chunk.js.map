{"version":3,"file":"static/js/164.536e4e42.chunk.js","mappings":"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","sources":["components/Button.jsx","components/Input.jsx","components/Radio.jsx","pages/modes/WordSnake.jsx"],"sourcesContent":["export function Major({ children, onClick }) {\r\n\treturn (\r\n\t\t<button className='Button Major' onClick={onClick}>\r\n\t\t\t<h2>{ children }</h2>\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport function Minor ({ children, onClick }) {\r\n\treturn (\r\n\t\t<button className='Button Minor' onClick={onClick}>\r\n\t\t\t<p>{ children }</p>\r\n\t\t</button>\r\n\t);\r\n}","// Imports\r\n\t// Importing React\r\n\timport { useEffect } from \"react\";\r\n\r\n\t// Importing defs\r\n\timport { $$ } from \"../defs\";\r\n\r\nexport function Text({ value, placeholder, onChange, minLength, maxLength }) {\r\n\t// If the value is outside the min/max length, add a class to the input\r\n\t// to show the user that the input is invalid\r\n\tlet inputClass = '';\r\n\tif (value.length < minLength || value.length > maxLength) {\r\n\t\tinputClass = 'invalid';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='Input Text'>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value)}\r\n\t\t\t\tminLength={minLength}\r\n\t\t\t\tmaxLength={maxLength}\r\n\t\t\t\tclassName={inputClass}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport function Number({ value, placeholder, onChange, min, max }) {\r\n\t// If the value is outside the min/max length, add a class to the input\r\n\t// to show the user that the input is invalid\r\n\tlet inputClass = '';\r\n\tif (value < min || value > max) {\r\n\t\tinputClass = 'invalid';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='Input Number'>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"number\"\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value)}\r\n\t\t\t\tmin={min}\r\n\t\t\t\tmax={max}\r\n\t\t\t\tclassName={inputClass}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport function TextArea({ value, placeholder, onChange, minLength, maxLength }) {\r\n\t// If the value is outside the min/max length, add a class to the input\r\n\t// to show the user that the input is invalid\r\n\tlet inputClass = '';\r\n\tif (value.length < minLength || value.length > maxLength) {\r\n\t\tinputClass = 'invalid';\r\n\t}\r\n\r\n\t// Function to auto grow the textarea\r\n\tfunction autoGrow() {\r\n\t\tlet element = $$(\".TextArea textarea\");\r\n\t\telement.style.height = \"10px\";\r\n\t\telement.style.height = (element.scrollHeight + 4) + \"px\";\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\t// Add an event listener to the textarea to auto grow it\r\n\t\twindow.addEventListener(\"textareaUpdated\", autoGrow);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className='Input TextArea'>\r\n\t\t\t<textarea \r\n\t\t\t\tvalue={value}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\tonChange(e.target.value);\r\n\t\t\t\t\tautoGrow();\r\n\t\t\t\t}}\r\n\t\t\t\tminLength={minLength}\r\n\t\t\t\tmaxLength={maxLength}\r\n\t\t\t\tclassName={inputClass}\r\n\t\t\t\tonInput={autoGrow}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}","// Imports\r\n\t// Importing React\r\n\timport React, { useState } from 'react';\r\n\r\n\r\n\r\nexport default function Radio({ options, selectedValue, onChange }) {\r\n\tconst [hoveredOption, setHoveredOption] = useState(null);\r\n\r\n\tconst handleOptionClick = (name) => {\r\n\t\tif (onChange) {\r\n\t\t\tonChange(name);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleMouseEnter = (name) => {\r\n\t\tsetHoveredOption(name);\r\n\t}\r\n\r\n\tconst handleMouseLeave = () => {\r\n\t\tsetHoveredOption(null);\r\n\t}\r\n\t\r\n\r\n\r\n\treturn (\r\n\t\t<div className='Radio d-flex jc-btwn gap--xs'>\r\n\t\t\t{ options.map(option => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tkey={option.name}\r\n\t\t\t\t\tclassName={`Radio__option ${selectedValue === option.name ? 'selected' : ''} ${hoveredOption === option.name ? 'hovered ' + option.name : ''}`}\r\n\t\t\t\t\tonClick={() => handleOptionClick(option.name)}\r\n\t\t\t\t\tonMouseEnter={ () => handleMouseEnter(option.name) }\r\n\t\t\t\t\tonMouseLeave={ handleMouseLeave }\r\n\t\t\t\t>\r\n\t\t\t\t\t<p >{ option.label }</p>\r\n\t\t\t\t</div>\r\n\t\t\t)) }\r\n\t\t</div>\r\n\t);\r\n}","\r\n\r\n// Imports\r\n\t// Importing components\r\n\timport { useEffect, useRef, useState } from 'react';\r\n\timport { useLocation } from \"react-router-dom\";\r\n\r\n\t// Importing defs\r\n\timport { $$, randomlyChoose } from '../../defs.js';\r\n\r\n\t// Importing constants\r\n\timport { TRANSITION_DURATION } from '../../constants.js';\r\n\r\n\t// Importing GSAP\r\n\timport { gsap } from 'gsap';\r\n\t\r\n\t// Importing components\r\n\timport LetterGrid from '../../components/LetterGrid';\r\n\timport Radio from '../../components/Radio';\r\n\timport * as Button from '../../components/Button';\r\n\timport * as Input from '../../components/Input';\r\n\r\n\r\n\r\nexport default function WordSnake(WordSnake) {\r\n\tconst location = useLocation();\r\n\r\n\tconst [letters, setLetters] = useState([]);\r\n\r\n\t// Input functionality\r\n\tconst [inputWord, setInputWord] = useState(\"type\"); // Default value\r\n\tconst handleWordChange = (newValue) => {\r\n\t\tsetInputWord(newValue);\r\n\t};\r\n\t// The word validity\r\n\tconst [validWord, setValidWord] = useState(true);\r\n\tconst handleWordValidity = (newValue) => {\r\n\t\tsetValidWord(newValue);\r\n\t};\r\n\r\n\t// Radio functionality\r\n\t// Colour radio\r\n\tconst [radioColour, setRadioColour] = useState(\"black\"); // Default value\r\n\tconst colourOptions = [ // Options\r\n\t\t{ name: \"black\", label: \"Black\" },\r\n\t\t{ name: \"rainbow\", label: \"Rainbow\" },\r\n\t\t{ name: \"morning\", label: \"Morning\" },\r\n\t\t{ name: \"daylight\", label: \"Daylight\" },\r\n\t\t{ name: \"sunset\", label: \"Sunset\" },\r\n\t\t{ name: \"twilight\", label: \"Twilight\" },\r\n\t];\r\n\tconst handleColourChange = (name) => {\r\n\t\tsetRadioColour(name);\r\n\t};\r\n\r\n\t// Gap radio\r\n\tconst [radioGap, setRadioGap] = useState(\"small\"); // Default value\r\n\tconst gapOptions = [ // Options\r\n\t\t{ name: \"none\", label: \"None\" },\r\n\t\t{ name: \"small\", label: \"Small\" },\r\n\t\t{ name: \"large\", label: \"Large\" }\r\n\t];\r\n\tconst handleGapChange = (name) => {\r\n\t\tsetRadioGap(name);\r\n\t}\r\n\r\n\r\n\r\n\t// The word\r\n\tconst word = useRef(null);\r\n\r\n\t// Breaking the word into an array of characters\r\n\tlet wordArray;\r\n\r\n\t// The variable to store the current state of the word snake\r\n\tlet currentPerm = [];\r\n\r\n\t// The variable to store the letter elements\r\n\tlet letterElements = [];\r\n\t\r\n\t// The duration of the interval (in seconds)\r\n\tconst dur = 2.1;\r\n\t// The duration of the movement (in seconds)\r\n\tlet moveDur;\r\n\r\n\t// The interval\r\n\tconst interval = useRef(null);\r\n\r\n\t// Keeping track of whether the word snake has been initialised\r\n\tconst wordSnakeInitialised = useRef(false);\r\n\r\n\t// Setting up the movement animation\r\n\tconst tl = gsap.timeline({ repeat: -1, paused: true });\r\n\r\n\r\n\r\n\tfunction wordSnakeEngine() {\r\n\t\t\r\n\t\tif (currentPerm.length === 0) {\r\n\t\t\tcurrentPerm = wordArray;\r\n\t\t} else {\r\n\t\t\t// Removing the last letter and adding it to the start\r\n\t\t\tcurrentPerm.unshift(currentPerm.pop());\r\n\t\t}\r\n\r\n\t\t// Updating the letters -- this is done by broadcasting a custom event for each letter\r\n\t\tfor (let i = 0; i < currentPerm.length; i++) {\r\n\t\t\tconsole.log(\"Word snake engine running, \", currentPerm[i]);\r\n\t\t\t// document.getElementById(letters[i]).dispatchEvent(new CustomEvent(('letterChangeletter' + (i + 1)), { detail: currentPerm[i] }));\r\n\t\t\t// console.log(\".LetterGridletter\" + (i + 1))\r\n\t\t\t// console.log(currentPerm);\r\n\r\n\t\t\twindow.dispatchEvent(\r\n\t\t\t\tnew CustomEvent((\"letterChangeletter\" + (i)), {\r\n\t\t\t\t\tdetail: currentPerm[i]\r\n\t\t\t\t\t// For now, return a random letter\r\n\t\t\t\t\t// detail: randomlyChoose('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t// Init function\r\n\tfunction InitWordSnake() {\r\n\t\tif (inputWord.length < 4 || inputWord.length > 8) {\r\n\t\t\tsetValidWord(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// Setting the word snake initialised flag\r\n\t\twordSnakeInitialised.current = true;\r\n\r\n\t\t// Pushing the history state\r\n\t\twindow.history.pushState({}, \"\", \"#\" + location.pathname);\r\n\r\n\t\t// Hiding the options\r\n\t\tgsap.to(\".options-cont\", {\r\n\t\t\topacity: 0,\r\n\t\t\tduration: TRANSITION_DURATION,\r\n\t\t\tonComplete: () => {\r\n\t\t\t\t$$(\".options-cont\").style.display = \"none\";\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Ensuring the letter conts are visible\r\n\t\t$$(\".letters-cont\").style.opacity = 1;\r\n\t\t$$(\".duplicate-letters-cont\").style.opacity = 1;\r\n\r\n\t\t// Broadcasting that the settings are now inactive\r\n\t\twindow.dispatchEvent(new CustomEvent('settingsInactive'));\r\n\t\t\r\n\t\t// Getting the word\r\n\t\tword.current = inputWord;\r\n\t\twordArray = word.current.split('');\r\n\t\t\r\n\t\t// Setting the move duration\r\n\t\tmoveDur = dur * wordArray.length;\r\n\t\t\r\n\t\t// Setting up the interval\r\n\t\tinterval.current = setInterval(wordSnakeEngine, dur * 1000);\r\n\t\tconsole.log(word, wordArray, moveDur, interval.current);\r\n\r\n\t\t// Creating the letter elements\r\n\t\tlet paddingClass = (radioGap === \"small\") ? \"pad--small\" : (radioGap === \"large\") ? \"pad--large\" : \"\";\r\n\r\n\t\tfor (let i = 0; i < wordArray.length; i++) {\r\n\t\t\tletterElements.push(\r\n\t\t\t\t<div className={\"letter-cont \" + paddingClass} key={ i }>\r\n\t\t\t\t\t<LetterGrid \r\n\t\t\t\t\t\treference={ \"letter\" + i } \r\n\t\t\t\t\t\tmode=\"wordSnake\" \r\n\t\t\t\t\t\tcolour={ radioColour }\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\tsetLetters(letterElements);\r\n\r\n\t\ttl.to('.letters-cont', {\r\n\t\t\tx: '-=100%',\r\n\t\t\tduration: moveDur,\r\n\t\t\tease: 'none',\r\n\t\t\tonComplete: () => {\r\n\t\t\t\tgsap.set('.letters-cont', { x: '100%' });\r\n\t\t\t\ttl.addLabel(\"halfway\");\r\n\t\t\t}\r\n\t\t}, 0);\r\n\t\ttl.to('.duplicate-letters-cont', {\r\n\t\t\tx: '-=200%',\r\n\t\t\tduration: moveDur * 2,\r\n\t\t\tease: 'none',\r\n\t\t}, 0);\r\n\t\ttl.to('.letters-cont', {\r\n\t\t\tx: '-=100%',\r\n\t\t\tduration: moveDur,\r\n\t\t\tease: 'none',\r\n\t\t}, moveDur);\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\ttl.play();\r\n\t\t}, dur * 1000 * 1.9);\r\n\t}\r\n\r\n\tfunction initSettings() {\r\n\t\t// Setting the word snake initialised flag\r\n\t\twordSnakeInitialised.current = false;\r\n\r\n\t\t// Clearing the interval\r\n\t\tclearInterval(interval.current);\r\n\r\n\t\t// Broadcasting that the settings are now active\r\n\t\twindow.dispatchEvent(new CustomEvent('settingsActive'));\r\n\r\n\t\t// Hiding the items\r\n\t\tgsap.to(\".letters-cont, .duplicate-letters-cont\", {\r\n\t\t\topacity: 0,\r\n\t\t\tduration: TRANSITION_DURATION\r\n\t\t});\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\t// Resetting the items\r\n\t\t\tsetLetters([]);\r\n\r\n\t\t\t// Resetting the variables\r\n\t\t\tword.current = null;\r\n\t\t\twordArray = null;\r\n\t\t\tcurrentPerm = [];\r\n\t\t\tletterElements = [];\r\n\r\n\t\t\t// Resetting the timeline\r\n\t\t\ttl.pause(0);\r\n\t\t\ttl.clear();\r\n\t\t}, TRANSITION_DURATION * 1000);\r\n\r\n\t\t// Showing the options\r\n\t\t$$(\".options-cont\").style.display = \"flex\";\r\n\t\tgsap.to(\".options-cont\", {\r\n\t\t\topacity: 1,\r\n\t\t\tdelay: TRANSITION_DURATION * 1.5,\r\n\t\t\tduration: TRANSITION_DURATION\r\n\t\t});\r\n\t}\r\n\t\r\n\r\n\r\n\tfunction handlePopstate() {\r\n\t\tif (wordSnakeInitialised.current) {\r\n\t\t\t// Reloading the page\r\n\t\t\twindow.location.reload();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\t// Adding the event lister for the popstate event\r\n\t\twindow.addEventListener(\"popstate\", handlePopstate);\r\n\r\n\t\t// Adding the event listener for the settingsClicked event\r\n\t\twindow.addEventListener(\"settingsClicked--word-snake\", initSettings);\r\n\r\n\t\t// Cleanup\r\n\t\treturn () => {\r\n\t\t\tclearInterval(interval.current);\r\n\r\n\t\t\t// Removing the event listeners\r\n\t\t\twindow.removeEventListener(\"popstate\", handlePopstate);\r\n\r\n\t\t\t// Removing the event listener for the settingsClicked event\r\n\t\t\twindow.removeEventListener(\"settingsClicked--word-snake\", initSettings);\r\n\t\t};\r\n\t}, []);\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div className='WordSnake mode-cont'>\r\n\t\t\t<div className='letters-cont'>\r\n\t\t\t\t{ letters }\r\n\t\t\t</div>\r\n\t\t\t<div className='duplicate-letters-cont'>\r\n\t\t\t\t{ letters }\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div className='options-cont d-flex flex-v ai-c gap--md'>\r\n\t\t\t\t<h1>Word snake options</h1>\r\n\r\n\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t<h2>Word</h2>\r\n\t\t\t\t\t<Input.Text \r\n\t\t\t\t\t\tplaceholder=\"Enter a word...\"\r\n\t\t\t\t\t\tvalue={ inputWord }\r\n\t\t\t\t\t\tonChange={ handleWordChange }\r\n\t\t\t\t\t\tminLength={ 4 }\r\n\t\t\t\t\t\tmaxLength={ 8 }\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// If the word is too long or too short, show an error message\r\n\t\t\t\t\t\t((inputWord.length < 4 || inputWord.length > 8) && !validWord) ? <p className='wordInputError'>(Word must be between 4-8 characters long)</p> : ''\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t<h2>Colour</h2>\r\n\t\t\t\t\t<Radio\r\n\t\t\t\t\t\toptions={ colourOptions }\r\n\t\t\t\t\t\tselectedValue={ radioColour }\r\n\t\t\t\t\t\tonChange={ handleColourChange }\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t<h2>Gap between letters</h2>\r\n\t\t\t\t\t<Radio\r\n\t\t\t\t\t\toptions={ gapOptions }\r\n\t\t\t\t\t\tselectedValue={ radioGap }\r\n\t\t\t\t\t\tonChange={ handleGapChange }\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<Button.Major onClick={InitWordSnake}>Start word snake</Button.Major>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}"],"names":["Major","_ref","children","onClick","_jsx","className","Minor","_ref2","Text","value","placeholder","onChange","minLength","maxLength","inputClass","length","type","e","target","Number","min","max","TextArea","_ref3","autoGrow","element","$$","style","height","scrollHeight","useEffect","window","addEventListener","onInput","Radio","options","selectedValue","hoveredOption","setHoveredOption","useState","handleMouseLeave","map","option","name","handleOptionClick","onMouseEnter","handleMouseEnter","onMouseLeave","label","WordSnake","location","useLocation","letters","setLetters","inputWord","setInputWord","validWord","setValidWord","radioColour","setRadioColour","radioGap","setRadioGap","word","useRef","wordArray","currentPerm","letterElements","moveDur","interval","wordSnakeInitialised","tl","gsap","timeline","repeat","paused","wordSnakeEngine","unshift","pop","i","console","log","dispatchEvent","CustomEvent","detail","initSettings","current","clearInterval","to","opacity","duration","TRANSITION_DURATION","setTimeout","pause","clear","display","delay","handlePopstate","reload","removeEventListener","_jsxs","Input","newValue","Button","history","pushState","pathname","onComplete","split","setInterval","dur","paddingClass","push","LetterGrid","reference","mode","colour","x","ease","set","addLabel","play"],"sourceRoot":""}