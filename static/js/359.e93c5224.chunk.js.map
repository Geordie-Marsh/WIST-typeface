{"version":3,"file":"static/js/359.e93c5224.chunk.js","mappings":"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ACP,MACA,QAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,MACA,OAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,MACA,MACA,QAGD,MACD,IAAK,IACL,IAAK,SACL,IAAK,SAGJjB,EAAQiB,KACP,MACA,OAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,OACA,QAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,MACA,MACA,MACA,OAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,MACA,MACA,OACA,QAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,SACA,UAGD,MACD,IAAK,KAGJjB,EAAQiB,KACP,SACA,UAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,MACA,OAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,SACA,OACA,OACA,UAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,SACA,OACA,OACA,UAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,OACA,OACA,OACA,OACA,OACA,QAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,OACA,OACA,OACA,OACA,OACA,QAGD,MACD,IAAK,IAUJjB,EAAQiB,KACP,SACA,SACA,MACA,SACA,UAGD,MACD,IAAK,IAUJjB,EAAQiB,KACP,SACA,SACA,MACA,SACA,UAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,SACA,UAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,SACA,UAGD,MACD,IAAK,IAIJjB,EAAQiB,KACP,SACA,SACA,SACA,SACA,MACA,MACA,MACA,OAKAjB,EAAQiB,QAAQK,EAAmBzB,EAAU,SAAU,KAAM,CAAC,aAAc,WAE5EG,EAAQiB,QAAQK,EAAmBzB,EAAU,SAAU,KAAM,CAAC,aAAc,WAE7E,MACD,IAAK,OAGJG,EAAQiB,KACP,SACA,SACA,SACA,MACA,MACA,SACA,OACA,OACA,QAGD,MACD,IAAK,SAGJjB,EAAQiB,KACP,SACA,SACA,OACA,OACA,SACA,SACA,MACA,UAGD,MACD,IAAK,OAGJjB,EAAQiB,KACP,SACA,SACA,MACA,MACA,MACA,OAGD,MACD,IAAK,OAIJjB,EAAQiB,KACP,MACA,SACA,SACA,SACA,MACA,MACA,OAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,SACA,SACA,SACA,SACA,SACA,SACA,UAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,SACA,SACA,SACA,SACA,MACA,OAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,OACA,QAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,SACA,UAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,SACA,SACA,SACA,UAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,MACA,MACA,SACA,SACA,SACA,OACA,OACA,SACA,UAGD,MACD,IAAK,IAGJjB,EAAQiB,KACP,SACA,UAGD,MACD,QAGCjB,EAAU,GAMZ,OAAOA,CACR,CAaA,SAAS+B,eAAenC,QAEvB,IAAKxD,IAAI4F,SAAYvD,mBAA8B,iBAAT3C,KACzC,OAID2C,mBAAoB,EAGpB,IAAIwD,aAAe5B,OAAO6B,OAAO,CAAC,EAAGvD,aACjCwD,qBAAuB9B,OAAOC,KAAK2B,cAAc1B,QAAOC,GAAOyB,aAAazB,KAG5ER,QAEHA,QADGoC,MAAMC,QAAQzC,QACPA,OAAO0C,SAAQC,GAAK5C,YAAY4C,EAAGN,gBAEnCtC,YAAYC,OAAQqC,cAI/B,IAAIO,cAAgBxC,QAAQO,QAAOQ,IAAYoB,qBAAqBnB,SAASD,KACzE0B,qBAAuBC,cAAcF,cAAe5C,QAGpD+C,gBAAkBR,qBAAqB5B,QAAOQ,IAAYf,QAAQgB,SAASD,KAC3E6B,uBAAyBF,cAAcC,iBAG3C,GAA6B,IAAzBH,cAAc9C,QAA2C,IAA3BiD,gBAAgBjD,OAEjD,YADAjB,mBAAoB,GAKrB,IAAIoE,aAAeV,qBAAqB5B,QAAOQ,IAAY4B,gBAAgB3B,SAASD,KAIhF+B,eAAiB,GACrB,IAAK,IAAI/B,WAAWoB,qBAAsB,CACzC,IAAInG,OAAS+G,KAAKhC,SAASiB,QAAQgB,MAAMC,OAIzC,GAAIjH,OAAQ,CACX,IAAIkH,EAAMlH,OAAOmH,MAAM,QAAQC,IAAIC,QAC/BC,GAAYC,EAAAA,mCAAAA,OAAYL,GAEvBJ,eAAe9B,SAASsC,IAC5BR,eAAe7B,KAAKqC,EAEtB,CACD,CAGA,IAAIE,iBAAmB5E,YAAY2B,QAAOvE,IAAW8G,eAAe9B,SAAShF,KAGzEyH,UAAaD,iBAAiB9D,OAAS,GAAKyB,EAAAA,mCAAAA,OAAkBqC,mBAAoBrC,EAAAA,mCAAAA,OAAkBvC,aAGxG,MAAM8E,kBAAoB,CACzB,OACA,OACA,OACA,OACA,OACA,SACA,SACA,SACA,MACA,MACA,MACA,OACA,OACA,SACA,SACA,OACA,SACA,MACA,SACA,MACA,SACA,SACA,OACA,SACA,SACA,OACA,SACA,OACA,MACA,QAIDjB,qBAAqBkB,MAAK,CAACC,EAAGC,IAAMH,kBAAkBI,QAAQF,EAAE,IAAMF,kBAAkBI,QAAQD,EAAE,MAClGjB,uBAAuBe,MAAK,CAACC,EAAGC,IAAMH,kBAAkBI,QAAQF,EAAE,IAAMF,kBAAkBI,QAAQD,EAAE,MAGpG,IAAIE,eAAiBC,kCAAAA,GAAKC,SAAS,CAAEC,QAAQ,IAGzCC,IAAM9F,cACN+F,KAAO,eAGX,IAAK,IAAIC,SAASzB,uBAEjB,GAAqB,IAAjByB,MAAM3E,OAAc,CACvB,IAAIqB,QAAUsD,MAAM,GAGpB1F,YAAYoC,UAAW,EAGvBgD,eAAeO,GAAGvB,KAAKhC,SAASiB,QAAS,CACxCuC,SAAUJ,IACVK,kBAAmB,IACnBJ,KAAMA,KACNK,WAAYA,KACXT,kCAAAA,GAAKU,IAAI3B,KAAKhC,SAASiB,QAAS,CAAEwC,iBAAkB,KAAM,GAEzD,IACJ,KAAO,CAEN,IAAIG,gBAAwB,EAANR,IAAUE,MAAM3E,OAElCkF,GAAKZ,kCAAAA,GAAKC,SAAS,CACtBC,QAAQ,EACRW,SAAU,CACTN,SAAUI,gBACVP,KAAM,UAIR,IAAK,IAAIrD,WAAWsD,MAEnB1F,YAAYoC,UAAW,EAEvB6D,GAAGN,GAAGvB,KAAKhC,SAASiB,QAAS,CAC5BwC,kBAAmB,IACnBC,WAAYA,KACXT,kCAAAA,GAAKU,IAAI3B,KAAKhC,SAASiB,QAAS,CAAEwC,iBAAkB,KAAM,IAK7DT,eAAeO,GAAGM,GAAI,CACrBE,KAAMF,GAAGL,WACTA,SAAUK,GAAGL,WACbH,KAAMA,MACJ,IACJ,CAID,IAAK,IAAIC,SAAS5B,qBAEjB,GAAqB,IAAjB4B,MAAM3E,OAAc,CACvB,IAAIqB,QAAUsD,MAAM,GAGpB1F,YAAYoC,UAAW,EAGvBgD,eAAeO,GAAGvB,KAAKhC,SAASiB,QAAS,CACxCuC,SAAUJ,IACVK,iBAAkB,EAClBJ,KAAMA,MACJ,IAAU,GAAND,KAGPpB,KAAKhC,SAASiB,QAAQgB,MAAMC,OAASQ,SACtC,KAAO,CAEN,IAAIkB,gBAAwB,EAANR,IAAUE,MAAM3E,OAElCkF,GAAKZ,kCAAAA,GAAKC,SAAS,CACtBC,QAAQ,EACRW,SAAU,CACTN,SAAUI,gBACVP,KAAM,UAIR,IAAK,IAAIrD,WAAWsD,MAEnB1F,YAAYoC,UAAW,EAEvB6D,GAAGN,GAAGvB,KAAKhC,SAASiB,QAAS,CAC5BwC,iBAAkB,IAInBzB,KAAKhC,SAASiB,QAAQgB,MAAMC,OAASQ,UAGtCM,eAAeO,GAAGM,GAAI,CACrBE,KAAMF,GAAGL,WACTA,SAAUK,GAAGL,WACbH,KAAMA,MACJ,IAAU,GAAND,IACR,CAIDJ,eAAegB,OAGfhB,eAAeiB,KAAI,KAClBvG,mBAAoB,CAAK,GACvB,MAAY,GAAN0F,KAEI,iBAATrI,MAA4ByC,OAC/BwF,eAAeiB,KAAI,KAEd/I,UAECuC,eAAiBvC,QAAQyD,OAAS,EACrClB,aAAe,EAEfA,gBAGFuD,eAAe9F,QAAQuC,cAAc,GACnC,MAAY,GAAN2F,KAEN5F,QACHA,OAAQ,EAEV,CAKA,SAASmE,cAAcuC,EAAUrF,GAEhC,IAAIsF,EAAkB,IAAID,GAU1B,OANgB,MAAXrF,GAA6B,MAAXA,GAA6B,MAAXA,GAA6B,MAAXA,KAAmBuF,EAAAA,mCAAAA,IAAYD,EAAiB,CAAC,SAAU,WACrHA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,SAC3DA,EAAgBjE,KAAK,CAAC,SAAU,WAIzB,GACP,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,MACA,MACA,MACA,QAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,MAAO,MAAO,MAAO,QACtEA,EAAgBjE,KAAK,CAAC,MAAO,MAAO,MAAO,QAC3C,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,MACA,MACA,QAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,MAAO,MAAO,QAC/DA,EAAgBjE,KAAK,CAAC,MAAO,MAAO,QACpC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,MACA,MACA,QAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,MAAO,MAAO,QAC/DA,EAAgBjE,KAAK,CAAC,MAAO,MAAO,QACpC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,MACA,QAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,MAAO,QACxDA,EAAgBjE,KAAK,CAAC,MAAO,QAC7B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,MACA,QAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,MAAO,QACxDA,EAAgBjE,KAAK,CAAC,MAAO,QAC7B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,MACA,QAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,MAAO,QACxDA,EAAgBjE,KAAK,CAAC,MAAO,QAK/B,QAAQ,GACP,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,SACA,SACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,SAAU,SAAU,WAC/EA,EAAgBjE,KAAK,CAAC,SAAU,SAAU,SAAU,WACpD,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,WAC3DA,EAAgBjE,KAAK,CAAC,SAAU,WAChC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,WACzDA,EAAgBjE,KAAK,CAAC,OAAQ,WAC9B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,SAC3DA,EAAgBjE,KAAK,CAAC,SAAU,SAKlC,QAAQ,GACP,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,SACA,SACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,SAAU,SAAU,WAC/EA,EAAgBjE,KAAK,CAAC,SAAU,SAAU,SAAU,WACpD,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,WAC3DA,EAAgBjE,KAAK,CAAC,SAAU,WAChC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,WACzDA,EAAgBjE,KAAK,CAAC,OAAQ,WAC9B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,SAC3DA,EAAgBjE,KAAK,CAAC,SAAU,SAKlC,QAAQ,GACP,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,MACA,QAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,MAAO,QACxDA,EAAgBjE,KAAK,CAAC,MAAO,QAC7B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,WAC3DA,EAAgBjE,KAAK,CAAC,SAAU,WAChC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,WAC3DA,EAAgBjE,KAAK,CAAC,SAAU,WAChC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,QAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,QAC3DA,EAAgBjE,KAAK,CAAC,SAAU,QAChC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,MACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,MAAO,WACxDA,EAAgBjE,KAAK,CAAC,MAAO,WAC7B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,QAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,QAC3DA,EAAgBjE,KAAK,CAAC,SAAU,QAChC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,MACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,MAAO,WACxDA,EAAgBjE,KAAK,CAAC,MAAO,WAC7B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,WAC3DA,EAAgBjE,KAAK,CAAC,SAAU,WAChC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,WAC3DA,EAAgBjE,KAAK,CAAC,SAAU,WAKlC,IAAQ,KACFkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,SACzDA,EAAgBjE,KAAK,CAAC,OAAQ,SAKhC,IAAQ,KACFkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,SACzDA,EAAgBjE,KAAK,CAAC,OAAQ,SAKhC,QAAQ,GACP,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,OACA,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,OAAQ,OAAQ,SACzEA,EAAgBjE,KAAK,CAAC,OAAQ,OAAQ,OAAQ,SAC9C,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,OACA,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,OAAQ,OAAQ,SAC3EA,EAAgBjE,KAAK,CAAC,SAAU,OAAQ,OAAQ,SAChD,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,OACA,OACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,OAAQ,OAAQ,WACzEA,EAAgBjE,KAAK,CAAC,OAAQ,OAAQ,OAAQ,WAC9C,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,OACA,OACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,OAAQ,OAAQ,WAC3EA,EAAgBjE,KAAK,CAAC,SAAU,OAAQ,OAAQ,WAChD,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,OAAQ,SACjEA,EAAgBjE,KAAK,CAAC,OAAQ,OAAQ,SACtC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,OAAQ,SACnEA,EAAgBjE,KAAK,CAAC,SAAU,OAAQ,SACxC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,OAAQ,SACjEA,EAAgBjE,KAAK,CAAC,OAAQ,OAAQ,SACtC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,OACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,OAAQ,WACjEA,EAAgBjE,KAAK,CAAC,OAAQ,OAAQ,WACtC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,SACzDA,EAAgBjE,KAAK,CAAC,OAAQ,SAC9B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,SAC3DA,EAAgBjE,KAAK,CAAC,SAAU,SAChC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,SACzDA,EAAgBjE,KAAK,CAAC,OAAQ,SAC9B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,SACzDA,EAAgBjE,KAAK,CAAC,OAAQ,SAC9B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,WACzDA,EAAgBjE,KAAK,CAAC,OAAQ,WAKhC,QAAQ,GACP,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,OACA,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,OAAQ,OAAQ,SACzEA,EAAgBjE,KAAK,CAAC,OAAQ,OAAQ,OAAQ,SAC9C,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,OACA,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,OAAQ,OAAQ,SAC3EA,EAAgBjE,KAAK,CAAC,SAAU,OAAQ,OAAQ,SAChD,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,OACA,OACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,OAAQ,OAAQ,WACzEA,EAAgBjE,KAAK,CAAC,OAAQ,OAAQ,OAAQ,WAC9C,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,OACA,OACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,OAAQ,OAAQ,WAC3EA,EAAgBjE,KAAK,CAAC,SAAU,OAAQ,OAAQ,WAChD,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,OAAQ,SACjEA,EAAgBjE,KAAK,CAAC,OAAQ,OAAQ,SACtC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,OAAQ,SACnEA,EAAgBjE,KAAK,CAAC,SAAU,OAAQ,SACxC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,OAAQ,SACjEA,EAAgBjE,KAAK,CAAC,OAAQ,OAAQ,SACtC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,OACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,OAAQ,WACjEA,EAAgBjE,KAAK,CAAC,OAAQ,OAAQ,WACtC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,SACzDA,EAAgBjE,KAAK,CAAC,OAAQ,SAC9B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,SACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,SAAU,SAC3DA,EAAgBjE,KAAK,CAAC,SAAU,SAChC,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,SACzDA,EAAgBjE,KAAK,CAAC,OAAQ,SAC9B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,SAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,SACzDA,EAAgBjE,KAAK,CAAC,OAAQ,SAC9B,MACD,KAAKkE,EAAAA,mCAAAA,IAAYD,EAAiB,CACjC,OACA,WAEAA,GAAkBE,EAAAA,mCAAAA,IAAaF,EAAiB,CAAC,OAAQ,WACzDA,EAAgBjE,KAAK,CAAC,OAAQ,WAKhC,IAAIoE,EAAoBH,EAAgB3E,QAAOQ,IAAYqB,MAAMC,QAAQtB,KAEzE,IAAK,IAAIA,KAAWsE,EAAmB,CACtC,IAAIC,EAAW,CAACvE,GAChBmE,EAAgBjE,KAAKqE,EACtB,CAKA,OAFAJ,EAAkBA,EAAgB3E,QAAOQ,GAAWqB,MAAMC,QAAQtB,KAE3DmE,CACR,CAgBA,GAXIhJ,gBACH6F,eAAe7F,eAEO,MAAlBA,gBACHoC,0BAA2B,EAC3BG,mBAAoB,KAMjBvC,cACJ,GAAKoC,yBAKJ,IAAK,IAAIyC,WAAWpC,YACnBoE,KAAKhC,SAASiB,QAAQgB,MAAMwB,iBAAmB,OALhD,IAAK,IAAIzD,WAAWpC,YACnBoE,KAAKhC,SAASiB,QAAQgB,MAAMwB,iBAAmB,IAclD,GAAa,iBAAT1I,KAAyB,CAE5B,MAAMyJ,EAAkBC,IAIvBzD,eADUyD,EAAEhF,IACO,EAMpB,OAHAiF,OAAOC,iBAAiB,WAAYH,GAG7B,KACNE,OAAOE,oBAAoB,WAAYJ,EAAe,CAExD,CACA,GAAa,cAATzJ,MAAiC,QAATA,MAA2B,cAATA,KAAsB,CAEnE,MAAM8J,EAAsBJ,IAE3BzD,eADayD,EAAEK,OACO,EAGvBJ,OAAOC,iBAAkB,eAAiB5J,KAAOD,UAAY+J,EAC9D,CACA,GAAa,iBAAT9J,KAAyB,CAE5BgK,YAAW,KACV/D,eAAe9F,QAAQuC,cAAc,GACnC,KAEH,MAAMuH,EAAyBA,KAE9BxH,OAAQ,CAAI,EAMb,OAHAyH,EAAAA,mCAAAA,IAAG,gBAAgBnK,aAAa6J,iBAAiB,mBAAoBK,GAG9D,KACF3J,IAAI4F,UACPgE,EAAAA,mCAAAA,IAAG,gBAAgBnK,aAAa8J,oBAAoB,mBAAoBI,EACzE,CAEF,IAGE,KAMFE,EAAAA,+CAAAA,MAAA,OAAKC,UAAY,0BAA4BrK,UAAYsK,IAAM/J,IAAMgK,MAAM,6BAA6BC,QAAQ,sBAAsBC,oBAAoB,OAAMC,SAAA,EAC/JC,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAMhI,OACNsI,WAAa,IACbC,EAAE,yQACHF,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAMpI,OACN0I,WAAa,IACbC,EAAE,+QACHF,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAMvI,OACN6I,WAAa,IACbC,EAAE,iSACHF,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAM1I,OACNgJ,WAAa,IACbC,EAAE,wQACHF,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAMlJ,OACNwJ,WAAa,IACbC,EAAE,4RACHF,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAMrJ,OACN2J,WAAa,IACbC,EAAE,wSACHF,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAMvJ,OACN6J,WAAa,IACbC,EAAE,qQACHF,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAM3J,OACNiK,WAAa,IACbC,EAAE,4PAEHF,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAM5I,OACNkJ,WAAa,IACbE,GAAG,QAAQC,GAAG,QAAQC,GAAG,UAAUC,GAAG,WACvCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAM7I,OACNmJ,WAAa,IACbE,GAAG,QAAQC,GAAG,QAAQC,GAAG,KAAKC,GAAG,WAClCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAMhJ,OACNsJ,WAAa,IACbE,GAAG,QAAQC,GAAG,QAAQC,GAAG,UAAUC,GAAG,QACvCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,SACVC,IAAMjJ,OACNuJ,WAAa,IACbE,GAAG,QAAQC,GAAG,QAAQC,GAAG,KAAKC,GAAG,QAElCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAMjI,KACNuI,WAAa,IACbE,GAAG,QAAQC,GAAG,QAAQC,GAAG,UAAUC,GAAG,WACvCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAMrI,KACN2I,WAAa,IACbE,GAAG,KAAKC,GAAG,QAAQC,GAAG,QAAQC,GAAG,WAElCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,MACVC,IAAM9I,IACNoJ,WAAa,IACbE,GAAG,QAAQC,GAAG,QAAQC,GAAG,UAAUC,GAAG,WACvCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,MACVC,IAAM/I,IACNqJ,WAAa,IACbE,GAAG,KAAKC,GAAG,QAAQC,GAAG,QAAQC,GAAG,WAElCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAMxJ,KACN8J,WAAa,IACbE,GAAG,QAAQC,GAAG,KAAKC,GAAG,UAAUC,GAAG,QACpCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAM5J,KACNkK,WAAa,IACbE,GAAG,KAAKC,GAAG,KAAKC,GAAG,QAAQC,GAAG,QAE/BN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,MACVC,IAAMnI,IACNyI,WAAa,IACbE,GAAG,QAAQC,GAAG,QAAQC,GAAG,QAAQC,GAAG,WACrCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,MACVC,IAAMzI,IACN+I,WAAa,IACbE,GAAG,QAAQC,GAAG,QAAQC,GAAG,QAAQC,GAAG,WACrCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,MACVC,IAAMpJ,IACN0J,WAAa,IACbE,GAAG,QAAQC,GAAG,QAAQC,GAAG,QAAQC,GAAG,WACrCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,MACVC,IAAM1J,IACNgK,WAAa,IACbE,GAAG,QAAQC,GAAG,KAAKC,GAAG,QAAQC,GAAG,WAElCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAMlI,KACNwI,WAAa,IACbE,GAAG,UAAUC,GAAG,QAAQC,GAAG,UAAUC,GAAG,WACzCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAMxI,KACN8I,WAAa,IACbE,GAAG,UAAUC,GAAG,QAAQC,GAAG,UAAUC,GAAG,WACzCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAMnJ,KACNyJ,WAAa,IACbE,GAAG,UAAUC,GAAG,QAAQC,GAAG,UAAUC,GAAG,WACzCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAMzJ,KACN+J,WAAa,IACbE,GAAG,UAAUC,GAAG,KAAKC,GAAG,UAAUC,GAAG,WAEtCN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAMtI,KACN4I,WAAa,IACbE,GAAG,KAAKC,GAAG,QAAQC,GAAG,KAAKC,GAAG,WAC/BN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAM3I,KACNiJ,WAAa,IACbE,GAAG,KAAKC,GAAG,QAAQC,GAAG,KAAKC,GAAG,WAC/BN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAMtJ,KACN4J,WAAa,IACbE,GAAG,KAAKC,GAAG,QAAQC,GAAG,KAAKC,GAAG,WAC/BN,EAAAA,+CAAAA,KAAA,QACCN,UAAU,OACVC,IAAM7J,KACNmK,WAAa,IACbE,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,YAG/B,qDCzoFO,MAAMC,EAAsB,GAKtBlI,EAAU,CACtBC,IAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,MAAQ,UACRC,KAAQ,UACRC,KAAQ,UACRC,KAAQ,UACRC,OAAQ,UACRC,KAAQ,UAERE,MAAQ,UACRD,MAAQ,WAMIyH,EAAQ,CACpB,OACA,YACA,QACA,YACA,aACA,gBACA,aACA,SACA,MACA,cACA,OACA,cACA,aACA,OACA,aACA,SACA,OACA,SACA,aACA,eACA,QACA,YACA,SACA,cACA,OACA,UACA,eACA,MACA,WACA,aACA,cACA,WACA,WACA,gBACA,UACA,UACA,YACA,YACA,YACA,aACA,aACA,aACA,cACA,OACA,QACA,OACA,QACA,SACA,UACA,aACA,UACA,WACA,aACA,UACA,WACA,UACA,SACA,WACA,UACA,OACA,OACA,SACA,QACA,SACA,SACA,QACA,OACA,SACA,UACA,UACA,QACA,UACA,UACA,QACA,QACA,MACA,SACA,WACA,WACA,QACA,OACA,SACA,WACA,UACA,SACA,OACA,SACA,UACA,WACA,QACA,SACA,aACA,WACA,YACA,UACA,aACA,cACA,SACA,UACA,WACA,WACA,YACA,UACA,aACA,UACA,cACA,WACA,SACA,WACA,YACA,UACA,QACA,YACA,WACA,YACA,UACA,MACA,OACA,UACA,QACA,OACA,WACA,SACA,YACA,WACA,cACA,UACA,eACA,aACA,aACA,YACA,SACA,WACA,SACA,SACA,WACA,UACA,UACA,aACA,0GCnKM,MAAMhB,EAAMiB,GAAgBC,SAASC,cAAcF,GAE7CG,EAASH,GAAgBC,SAASG,iBAAiBJ,GAGnDK,EAAWA,CAACC,EAASrB,IAAcqB,EAAQC,UAAUxC,IAAIkB,GAEzDuB,EAAcA,CAACF,EAASrB,IAAcqB,EAAQC,UAAUE,OAAOxB,GAyCrE,MAaM/E,EAAiB,mBAAAwG,EAAA7H,UAAAJ,OAAIkI,EAAM,IAAAxF,MAAAuF,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,GAAA/H,UAAA+H,GAAA,OAAKD,GAjCnBE,EAiCoC1G,KAAKC,SAAWuG,EAAOlI,OAjChD0B,KAAK2G,MAAMD,KAAtBA,KAiCoE,EAevF,SAAS3C,EAAY6C,EAAOJ,GAClC,OAAOA,EAAOK,OAAMC,GAASF,EAAMhH,SAASkH,IAC7C,CAIO,SAAS9C,EAAa4C,EAAOJ,GACnC,OAAOI,EAAMzH,QAAO2H,IAAUN,EAAO5G,SAASkH,IAC/C,CAIO,SAAS3E,EAAS4E,EAAGC,EAAGvE,GAC9B,MAAO,MAAQ,GAAK,KAAOsE,GAAK,KAAOC,GAAK,GAAKvE,GAAGwE,SAAS,IAAIC,MAAM,EACxE","sources":["components/LetterGrid.jsx","constants.js","defs.js"],"sourcesContent":["// Imports\r\n\t// Importing the React library\r\n\timport { useEffect, useRef } from 'react';\r\n\r\n\t// Importing defs\r\n\timport { hide, show, randomlyChoose, containsExactSet, containsSet, removeValues, rgbToHex, $$ } from '../defs';\r\n\r\n\t// Importing constants\r\n\timport { COLOURS } from '../constants';\r\n\r\n\t// Importing GSAP\r\n\timport { gsap } from 'gsap';\r\n\r\n\r\nexport default function LetterGrid({reference = null, mode = \"singleLetter\", startDisplayed = false, colour = \"black\", program = null, initialLetter = null, ...props}) {\r\n\t// Guide to the naming system for the segments:\r\n\t\t// First letter 'o' or 'i' is short for 'outer' or 'inner' - the top- and bottom-most eights are 'outer' and the other four are 'inner'\r\n\t\t// Then the direction is specified, e.g., Nw for North-West\r\n\t\t// Then the segment type is specified: V = vertical line, H = horizontal line, Arc = a segment of circle, Diag = diagonal line\r\n\r\n\t// Refs are used for each segment (remember: you'll have to use .current after the ref to access the element)\r\n\tconst svg    = useRef(null);\r\n\r\n\tconst oNwV   = useRef(null);\r\n\tconst oNwH   = useRef(null);\r\n\tconst oNwArc = useRef(null);\r\n\tconst oNV    = useRef(null);\r\n\tconst oNeV   = useRef(null);\r\n\tconst oNeH   = useRef(null);\r\n\tconst oNeArc = useRef(null);\r\n\tconst iNwV   = useRef(null);\r\n\tconst iNwArc = useRef(null);\r\n\tconst iNV    = useRef(null);\r\n\tconst iNeV   = useRef(null);\r\n\tconst iNeArc = useRef(null);\r\n\tconst NwDiag = useRef(null);\r\n\tconst NeDiag = useRef(null);\r\n\tconst iWH    = useRef(null);\r\n\tconst iEH    = useRef(null);\r\n\tconst SwDiag = useRef(null);\r\n\tconst SeDiag = useRef(null);\r\n\tconst iSwV   = useRef(null);\r\n\tconst iSwArc = useRef(null);\r\n\tconst iSV    = useRef(null);\r\n\tconst iSeV   = useRef(null);\r\n\tconst iSeArc = useRef(null);\r\n\tconst oSwV   = useRef(null);\r\n\tconst oSwH   = useRef(null);\r\n\tconst oSwArc = useRef(null);\r\n\tconst oSV    = useRef(null);\r\n\tconst oSeV   = useRef(null);\r\n\tconst oSeH   = useRef(null);\r\n\tconst oSeArc = useRef(null);\r\n\t\r\n\r\n\r\n\t// useEffect will run once the component has mounted\r\n\tuseEffect(() => {\r\n\t\t// CONTROLLERS\r\n\t\tlet controllerDur = 0.8;\r\n\t\tlet controllerStartDisplayed = startDisplayed;\r\n\r\n\t\t// Tracking\r\n\t\tlet reset = false;\r\n\t\tlet programIndex = 0;\r\n\t\tlet currentlyChanging = false;\r\n\r\n\r\n\t\t// This is an array of all the segments\r\n\t\tconst allSegments = [\r\n\t\t\t\"oNwV\",\r\n\t\t\t\"oNwH\",\r\n\t\t\t\"oNwArc\",\r\n\t\t\t\"oNV\",\r\n\t\t\t\"oNeV\",\r\n\t\t\t\"oNeH\",\r\n\t\t\t\"oNeArc\",\r\n\t\t\t\"iNwV\",\r\n\t\t\t\"iNwArc\",\r\n\t\t\t\"iNV\",\r\n\t\t\t\"iNeV\",\r\n\t\t\t\"iNeArc\",\r\n\t\t\t\"NwDiag\",\r\n\t\t\t\"NeDiag\",\r\n\t\t\t\"iWH\",\r\n\t\t\t\"iEH\",\r\n\t\t\t\"SwDiag\",\r\n\t\t\t\"SeDiag\",\r\n\t\t\t\"iSwV\",\r\n\t\t\t\"iSwArc\",\r\n\t\t\t\"iSV\",\r\n\t\t\t\"iSeV\",\r\n\t\t\t\"iSeArc\",\r\n\t\t\t\"oSwV\",\r\n\t\t\t\"oSwH\",\r\n\t\t\t\"oSwArc\",\r\n\t\t\t\"oSV\",\r\n\t\t\t\"oSeV\",\r\n\t\t\t\"oSeH\",\r\n\t\t\t\"oSeArc\"\r\n\t\t];\r\n\r\n\t\t// This object will be used to keep track of the current permutation, i.e., which segments are currently visible\r\n\t\tlet currentPerm = {\r\n\t\t\toNwV: startDisplayed,\r\n\t\t\toNwH: startDisplayed,\r\n\t\t\toNwArc: startDisplayed,\r\n\t\t\toNV: startDisplayed,\r\n\t\t\toNeV: startDisplayed,\r\n\t\t\toNeH: startDisplayed,\r\n\t\t\toNeArc: startDisplayed,\r\n\t\t\tiNwV: startDisplayed,\r\n\t\t\tiNwArc: startDisplayed,\r\n\t\t\tiNV: startDisplayed,\r\n\t\t\tiNeV: startDisplayed,\r\n\t\t\tiNeArc: startDisplayed,\r\n\t\t\tNwDiag: startDisplayed,\r\n\t\t\tNeDiag: startDisplayed,\r\n\t\t\tiWH: startDisplayed,\r\n\t\t\tiEH: startDisplayed,\r\n\t\t\tSwDiag: startDisplayed,\r\n\t\t\tSeDiag: startDisplayed,\r\n\t\t\tiSwV: startDisplayed,\r\n\t\t\tiSwArc: startDisplayed,\r\n\t\t\tiSV: startDisplayed,\r\n\t\t\tiSeV: startDisplayed,\r\n\t\t\tiSeArc: startDisplayed,\r\n\t\t\toSwV: startDisplayed,\r\n\t\t\toSwH: startDisplayed,\r\n\t\t\toSwArc: startDisplayed,\r\n\t\t\toSV: startDisplayed,\r\n\t\t\toSeV: startDisplayed,\r\n\t\t\toSeH: startDisplayed,\r\n\t\t\toSeArc: startDisplayed,\r\n\t\t};\r\n\r\n\t\t// The cycle of colours to go through\r\n\t\t// const colourCycle = [\r\n\t\t// \t\"#f52929\",\r\n\t\t// \t\"#ff6b00\",\r\n\t\t// \t\"#fcb500\",\r\n\t\t// \t\"#9ce500\",\r\n\t\t// \t\"#00b072\",\r\n\t\t// \t\"#0abcf2\",\r\n\t\t// \t\"#1e6bff\",\r\n\t\t// \t\"#743ee6\",\r\n\t\t// \t\"#ff458f\"\r\n\t\t// ];\r\n\t\tlet colourCycle = [];\r\n\t\tswitch (colour) {\r\n\t\t\tcase \"rainbow\":\r\n\t\t\t\tcolourCycle = [\r\n\t\t\t\t\tCOLOURS.red,\r\n\t\t\t\t\tCOLOURS.orange,\r\n\t\t\t\t\tCOLOURS.yellow,\r\n\t\t\t\t\tCOLOURS.green,\r\n\t\t\t\t\tCOLOURS.jade,\r\n\t\t\t\t\tCOLOURS.aqua,\r\n\t\t\t\t\tCOLOURS.blue,\r\n\t\t\t\t\tCOLOURS.purple,\r\n\t\t\t\t\tCOLOURS.pink\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"morning\":\r\n\t\t\t\tcolourCycle = [\r\n\t\t\t\t\tCOLOURS.red,\r\n\t\t\t\t\tCOLOURS.orange,\r\n\t\t\t\t\tCOLOURS.yellow,\r\n\t\t\t\t\tCOLOURS.green,\r\n\t\t\t\t\tCOLOURS.jade\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"daylight\":\r\n\t\t\t\tcolourCycle = [\r\n\t\t\t\t\tCOLOURS.yellow,\r\n\t\t\t\t\tCOLOURS.green,\r\n\t\t\t\t\tCOLOURS.jade,\r\n\t\t\t\t\tCOLOURS.aqua,\r\n\t\t\t\t\tCOLOURS.blue\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sunset\":\r\n\t\t\t\tcolourCycle = [\r\n\t\t\t\t\tCOLOURS.red,\r\n\t\t\t\t\tCOLOURS.orange,\r\n\t\t\t\t\tCOLOURS.yellow,\r\n\t\t\t\t\tCOLOURS.pink,\r\n\t\t\t\t\tCOLOURS.purple\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"twilight\":\r\n\t\t\t\tcolourCycle = [\r\n\t\t\t\t\tCOLOURS.aqua,\r\n\t\t\t\t\tCOLOURS.blue,\r\n\t\t\t\t\tCOLOURS.purple,\r\n\t\t\t\t\tCOLOURS.pink,\r\n\t\t\t\t\tCOLOURS.red\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"white\":\r\n\t\t\t\tcolourCycle = [COLOURS.white];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"black\":\r\n\t\t\tdefault:\r\n\t\t\t\tcolourCycle = [COLOURS.black];\r\n\t\t\t\tbreak;\r\n\t\t};\r\n\t\t\r\n\t\tlet colourIndex = colourCycle.length - 2; // The index of the colour to start on\r\n\r\n\r\n\r\n\r\n\r\n\t\t// This function will be used to update the permutation\r\n\t\tfunction letterMaker(letter, prevPerm = null) {\r\n\t\t\t// Letter: the letter to be displayed\r\n\t\t\t// prevPerm: the previous permutation (optional; if not provided, a random permutation will be chosen)\r\n\t\t\t\r\n\t\t\t// The new permutation will be stored in this array\r\n\t\t\t// This will be updated as the function progresses and then returned at the end\r\n\t\t\tlet newPerm = [];\r\n\r\n\r\n\r\n\r\n\t\t\t\r\n\t\t\t// This function is used to choose segments to show based on the previous permutation and the possible outcomes\r\n\t\t\tfunction chooseState(prevPerm, possibleOutcomes, optionalVisibility = false) {\r\n\t\t\t\t// PrevPerm is an object with the previous permutation\r\n\t\t\t\t// Sample possibleOutcomes: [[\"oNwV\", \"oNwH\"], [\"oNwArc\"], [\"oNwV\", \"oNwArc\"]] (Square, Round, VStem)\r\n\t\t\t\t// optionalVisibility is a boolean for if the segment is optional to be visible (chosen from a 50% chance)\r\n\r\n\t\t\t\t// Turning the prevPerm object into an array of segments\r\n\t\t\t\tlet prevPermSegments = Object.keys(prevPerm).filter(key => prevPerm[key]);\r\n\r\n\t\t\t\t// For each possible outcome, we'll count how many of its segments are in the previous permutation\r\n\t\t\t\t// We'll then choose the outcome with the most segments in the previous permutation\r\n\t\t\t\tlet bestOutcome = []; // The best outcome (note, outcomes should be pushed as arrays so this is an array of arrays)\r\n\t\t\t\tlet bestOutcomeCount = 0; // The number of segments in the best outcome that are in the previous permutation\r\n\r\n\t\t\t\t// Go through each possible outcome\r\n\t\t\t\tfor (let i = 0; i < possibleOutcomes.length; i++) {\r\n\t\t\t\t\tconst outcome = possibleOutcomes[i]; // The current outcome\r\n\r\n\t\t\t\t\t// Count how many segments in the outcome are in the previous permutation\r\n\t\t\t\t\tlet count = 0;\r\n\t\t\t\t\tfor (let j = 0; j < outcome.length; j++) {\r\n\t\t\t\t\t\tconst segment = outcome[j]; // The current segment\r\n\t\t\t\t\t\tif (prevPermSegments.includes(segment)) {\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// The count may be equal to the best outcome count, in which case we'll add it to the best outcome array\r\n\t\t\t\t\tif (count === bestOutcomeCount) {\r\n\t\t\t\t\t\tbestOutcome.push(outcome);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// If the count is greater than the best outcome count, we'll replace the best outcome array with this outcome\r\n\t\t\t\t\tif (count > bestOutcomeCount) {\r\n\t\t\t\t\t\tbestOutcome = [outcome];\r\n\t\t\t\t\t\tbestOutcomeCount = count;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If there are multiple best outcomes, we'll randomly choose one\r\n\t\t\t\tconst chosenOutcome = randomlyChoose(...bestOutcome);\r\n\r\n\t\t\t\t// If it is optionally visible and none of the segments were already visible, we'll return an empty array 50% of the time\r\n\t\t\t\tif (optionalVisibility && bestOutcomeCount === 0) {\r\n\t\t\t\t\tif (Math.random() < 0.5) {\r\n\t\t\t\t\t\treturn [];\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\treturn chosenOutcome;\r\n\t\t\t}\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t// There are some commonly used presets for corners and centres\r\n\t\t\t// This function is used to invoke the stateChooser by using presets instead of arrays of segments\r\n\t\t\tfunction chooseStatePresets(prevPerm, type, location, possibleOutcomes, optionalVisibility = false) {\r\n\t\t\t\t// Type is the type of segment: corner, centre, etc.\r\n\t\t\t\t// Location is the location of the segment: Ne, Se, Sw, Nw, E, W\r\n\r\n\t\t\t\t// Possible outcomes is an array of preset segment combinations\r\n\t\t\t\t\t// For corners:\r\n\t\t\t\t\t\t// \"Round\": Arc\r\n\t\t\t\t\t\t// \"Square\": Horizontal and Vertical\r\n\t\t\t\t\t\t// \"Horizontal\": Horizontal\r\n\t\t\t\t\t\t// \"Vertical\": Vertical\r\n\t\t\t\t\t\t// \"VStem\": Vertical and Arc\r\n\t\t\t\t\t// For centres:\r\n\t\t\t\t\t\t// \"Up\": Arc\r\n\t\t\t\t\t\t// \"Down\": Arc\r\n\t\t\t\t\t\t// \"Horizontal\": Horizontal\r\n\t\t\t\t\t// For centre-corners: (e.g., the inner hook of G)\r\n\t\t\t\t\t\t// \"Round\": Arc\r\n\t\t\t\t\t\t// \"Square\": Horizontal and Vertical\r\n\t\t\t\t\t\r\n\r\n\t\t\t\t// Turning possibleOutcomes into a format that stateChooser can use\r\n\t\t\t\tlet possibleOutcomesSegments = [];\r\n\t\t\t\tfor (let i = 0; i < possibleOutcomes.length; i++) {\r\n\t\t\t\t\tconst outcome = possibleOutcomes[i]; // The current outcome\r\n\t\t\t\t\tlet outcomeSegments = []; // The segments for this outcome\r\n\r\n\t\t\t\t\t// If being used for a corner\r\n\t\t\t\t\tif (type === \"corner\") {\r\n\t\t\t\t\t\tlet NorS;\r\n\t\t\t\t\t\tif (location === \"Nw\" || location === \"Ne\") {\r\n\t\t\t\t\t\t\tNorS = \"N\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tNorS = \"S\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tswitch (outcome) {\r\n\t\t\t\t\t\t\tcase \"Round\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`o${location}Arc`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"Square\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`o${location}H`, `o${location}V`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"SquareRound\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`o${location}H`, `o${location}V`, `o${location}Arc`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"Horizontal\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`o${location}H`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"HorizontalRound\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`o${location}H`, `o${location}Arc`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"Vertical\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`o${location}V`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"VStem\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`o${location}V`, `o${location}Arc`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}   \r\n\t\t\t\t\t}\r\n\t\t\t\t\t// If being used for a centre\r\n\t\t\t\t\tif (type === \"centre\") {\r\n\t\t\t\t\t\tlet north;\r\n\t\t\t\t\t\tlet south;\r\n\t\t\t\t\t\tif (location === \"W\") {\r\n\t\t\t\t\t\t\tnorth = \"Nw\";\r\n\t\t\t\t\t\t\tsouth = \"Sw\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnorth = \"Ne\";\r\n\t\t\t\t\t\t\tsouth = \"Se\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tswitch (outcome) {\r\n\t\t\t\t\t\t\tcase \"Up\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`i${north}Arc`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"Down\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`i${south}Arc`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"Horizontal\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`i${location}H`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"UpDown\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`i${north}Arc`, `i${south}Arc`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"UpHorizontal\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`i${north}Arc`, `i${location}H`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"DownHorizontal\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`i${south}Arc`, `i${location}H`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"UpDownHorizontal\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`i${north}Arc`, `i${south}Arc`, `i${location}H`);\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// If being used for a centre-corner\r\n\t\t\t\t\tif (type === \"centre-corner\") {\r\n\t\t\t\t\t\tlet EorW;\r\n\t\t\t\t\t\tif (location === \"Nw\" || location === \"Sw\") {\r\n\t\t\t\t\t\t\tEorW = \"W\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tEorW = \"E\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tswitch (outcome) {\r\n\t\t\t\t\t\t\tcase \"Round\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`i${location}Arc`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"Square\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(\r\n\t\t\t\t\t\t\t\t\t`i${EorW}H`, \r\n\t\t\t\t\t\t\t\t\t`i${location}V`\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tbreak; \r\n\t\t\t\t\t\t\tcase \"Horizontal\":\r\n\t\t\t\t\t\t\t\toutcomeSegments.push(`i${EorW}H`);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpossibleOutcomesSegments.push(outcomeSegments);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Using the chooseState function to choose the state\r\n\t\t\t\tconst chosenState = chooseState(prevPerm, possibleOutcomesSegments, optionalVisibility);\r\n\t\t\t\treturn chosenState;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t// The switch statement will calculate the new permutation based on the letter\r\n\t\t\t// +diacritics\r\n\t\t\tswitch (letter) {\r\n\t\t\t\tcase \"a\":\r\n\t\t\t\tcase \"A\":\r\n\t\t\t\t\t// A has 4 variables: the top-left and top-right corners, centre-left and centre-right\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"oSeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"iNeV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-LEFT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Nw\", [\"Square\", \"Round\"/* , \"SquareRound\" */]));\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Square\", \"Round\"/* , \"SquareRound\" */]));\r\n\t\t\t\t\t\t// CENTRE-LEFT is variable: Up, Down or Horizontal\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre\", \"W\", [\"Up\", \"Down\", \"Horizontal\"/* , \"UpHorizontal\", \"DownHorizontal\", \"UpDownHorizontal\" */]));\r\n\t\t\t\t\t\t// CENTRE-RIGHT is variable: Up, Down or Horizontal\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre\", \"E\", [\"Up\", \"Down\", \"Horizontal\"/* , \"UpHorizontal\", \"DownHorizontal\", \"UpDownHorizontal\" */]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"b\":\r\n\t\t\t\tcase \"B\":\r\n\t\t\t\t\t// B has 5 variables: the top-left, top-right and bottom-right corners, and the centre-left and centre-right which are both custom\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"oSwH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-LEFT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Nw\", [\"Square\", \"Round\"/* , \"SquareRound\" */]));\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Square\", \"Round\"/* , \"SquareRound\" */]));\r\n\t\t\t\t\t\t// BOTTOM-RIGHT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Se\", [\"Square\", \"Round\"/* , \"SquareRound\" */]));\r\n\t\t\t\t\t\t// CENTRE-LEFT is variable: Up, Down or Horizontal, but random chance of not being visible\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre\", \"W\", [\"Up\", \"Down\", \"Horizontal\"/* , \"UpHorizontal\", \"DownHorizontal\", \"UpDownHorizontal\" */], true));\r\n\t\t\t\t\t\t// CENTRE-RIGHT is custom\r\n\t\t\t\t\t\t// Possible outcomes:\r\n\t\t\t\t\t\t\t// Round on top and bottom\r\n\t\t\t\t\t\t\t// Round on top and Square on bottom\r\n\t\t\t\t\t\t\t// Square on top and Round on bottom\r\n\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t\t[\"iNeArc\", \"iSeArc\"], \r\n\t\t\t\t\t\t\t[\"iNeArc\", \"iEH\", \"iSeV\"], \r\n\t\t\t\t\t\t\t[\"iNeV\", \"iEH\", \"iSeArc\"]\r\n\t\t\t\t\t\t]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"c\":\r\n\t\t\t\tcase \"C\":\r\n\t\t\t\t\t// C has 2 main variables: the top-right and bottom-right corners\r\n\t\t\t\t\t// C has 2 structural variables: the top-left and bottom-left corners\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Horizontal\", \"Round\"/* , \"SquareRound\" */]));\r\n\t\t\t\t\t\t// BOTTOM-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Se\", [\"Horizontal\", \"Round\"/* , \"SquareRound\" */]));\r\n\r\n\t\t\t\t\t// // STRUCTURAL VARIABLES\r\n\t\t\t\t\t// \t// BOTTOM-LEFT CORNER is structurally variable: Round or SquareRound\r\n\t\t\t\t\t// \tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Sw\", [\"Round\"/* , \"SquareRound\" */]));\r\n\t\t\t\t\t// \t// TOP-LEFT CORNER is structurally variable: Round or SquareRound\r\n\t\t\t\t\t// \tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Nw\", [\"Round\"/* , \"SquareRound\" */]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"d\":\r\n\t\t\t\tcase \"D\":\r\n\t\t\t\t\t// D is a fixed letter - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwH\",\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\t\t\"oSwH\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"oNwV\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"e\":\r\n\t\t\t\tcase \"E\":\r\n\t\t\t\t\t// E has 6 variables, all 4 corners and the centre-left and centre-right\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-LEFT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Nw\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Horizontal\", \"Round\"]));\r\n\t\t\t\t\t\t// BOTTOM-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Se\", [\"Horizontal\", \"Round\"]));\r\n\t\t\t\t\t\t// BOTTOM-LEFT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Sw\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// CENTRE-LEFT is variable: Up, Down or Horizontal\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre\", \"W\", [\"Up\", \"Down\", \"Horizontal\"]));\r\n\t\t\t\t\t\t// CENTRE-RIGHT is custom: Horizontal, but random chance of not being visible\r\n\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [[\"iEH\"]], true));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"f\":\r\n\t\t\t\tcase \"F\":\r\n\t\t\t\t\t// F has 4 variables: the top-left and top-right corners, and the centre-left and centre-right\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-LEFT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Nw\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Horizontal\", \"Round\"]));\r\n\t\t\t\t\t\t// CENTRE-LEFT is variable: Down or Horizontal\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre\", \"W\", [\"Down\", \"Horizontal\"]));\r\n\t\t\t\t\t\t// CENTRE-RIGHT is custom: Horizontal, but random chance of not being visible\r\n\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [[\"iEH\"]], true));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"g\":\r\n\t\t\t\tcase \"G\":\r\n\t\t\t\t\t// G has 3 variables: the top-right and bottom-right corners, and the centre-SE\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Horizontal, Round or Square\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Horizontal\", \"Round\", \"Square\"]));\r\n\t\t\t\t\t\t// BOTTOM-RIGHT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Se\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// CENTRE-SE is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre-corner\", \"Se\", [\"Square\", \"Round\"]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"h\":\r\n\t\t\t\tcase \"H\":\r\n\t\t\t\t\t// H has 1 variable: the centre, which is custom\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"oNeV\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"oSeV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// CENTRE is custom:\r\n\t\t\t\t\t\t// Possible outcomes:\r\n\t\t\t\t\t\t\t// Up on left, Horizontal on right\r\n\t\t\t\t\t\t\t// Horizontal on left, Up on right\r\n\t\t\t\t\t\t\t// Down on left, Horizontal on right\r\n\t\t\t\t\t\t\t// Horizontal on left, Down on right\r\n\t\t\t\t\t\t\t// Horizontal on left, Horizontal on right\r\n\t\t\t\t\t\t\t// Up on left, Down on right\r\n\t\t\t\t\t\t\t// Down on left, Up on right\r\n\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t\t[\"iNwArc\", \"iEH\"],\r\n\t\t\t\t\t\t\t[\"iWH\", \"iNeArc\"],\r\n\t\t\t\t\t\t\t[\"iSwArc\", \"iEH\"],\r\n\t\t\t\t\t\t\t[\"iWH\", \"iSeArc\"],\r\n\t\t\t\t\t\t\t[\"iWH\", \"iEH\"],\r\n\t\t\t\t\t\t\t[\"iNwArc\", \"iSeArc\"],\r\n\t\t\t\t\t\t\t[\"iSwArc\", \"iNeArc\"]\r\n\t\t\t\t\t\t]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"i\":\r\n\t\t\t\tcase \"I\":\r\n\t\t\t\t\t// I has 1 variable: the serifs are optional\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNV\",\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"oSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// SERIFS are custom: randomly chosen to be visible or not\r\n\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [[\"oNwH\", \"oSwH\", \"oNeH\", \"oSeH\"]], true));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"j\":\r\n\t\t\t\tcase \"J\":\r\n\t\t\t\t\t// J is complex, and is done completely customly\r\n\r\n\t\t\t\t\t// Picking whether the stem is in the middle or on the right (this functions as a constant segment)\r\n\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t[\"oNV\", \"iNV\", \"iSV\"], // Stem in the middle\r\n\t\t\t\t\t\t[\"oNeV\", \"iNeV\", \"iSeV\", \"oSeArc\"] // Stem on the right\r\n\t\t\t\t\t]));\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// Checking if the stem is in the middle\r\n\t\t\t\t\t\tif (newPerm.includes(\"oNV\")) {\r\n\t\t\t\t\t\t\t// The J with the stem in the middle has 2 variables: the hook and the top serifs, the latter of which are optional, all of which are custom\r\n\r\n\t\t\t\t\t\t\t// HOOK is custom:\r\n\t\t\t\t\t\t\tnewPerm.push(\"oSV\", \"oSwArc\");\r\n\r\n\t\t\t\t\t\t\t// TOP SERIFS are custom: randomly chosen to be visible or not\r\n\t\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t\t\t[\"oNwH\"], \r\n\t\t\t\t\t\t\t\t[\"oNwH\", \"oNeH\"]\r\n\t\t\t\t\t\t\t], true));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// The J with the stem on the right has 2 variables: the hook and the top serifs, the latter of which are optional, all of which are custom\r\n\r\n\t\t\t\t\t\t\t// HOOK is custom:\r\n\t\t\t\t\t\t\t// Possible outcomes:\r\n\t\t\t\t\t\t\t\t// Curve continues\r\n\t\t\t\t\t\t\t\t// Curve becomes horizontal\r\n\t\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t\t\t[\"oSwArc\"],\r\n\t\t\t\t\t\t\t\t[\"oSwH\"]\r\n\t\t\t\t\t\t\t]));\r\n\r\n\t\t\t\t\t\t\t// TOP SERIFS are custom: randomly chosen to be visible or not\r\n\t\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t\t\t[\"oNeH\"], \r\n\t\t\t\t\t\t\t\t[\"oNeH\", \"oNwH\"]\r\n\t\t\t\t\t\t\t], true));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"k\":\r\n\t\t\t\tcase \"K\":\r\n\t\t\t\t\t// K has 2 variables: the centre-left and the bottom-right quarter, the latter of which is custom\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"iNeArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// CENTRE-LEFT is variable: Up, Down or Horizontal\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre\", \"W\", [\"Up\", \"Down\", \"Horizontal\"]));\r\n\t\t\t\t\t\t// BOTTOM-RIGHT QUARTER is custom:\r\n\t\t\t\t\t\t// Possible outcomes:\r\n\t\t\t\t\t\t\t// Straight leg: Diagonal\r\n\t\t\t\t\t\t\t// Outwards leg: Round then Down\r\n\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t\t[\"SeDiag\"],\r\n\t\t\t\t\t\t\t[\"iSeArc\", \"oSeV\"]\r\n\t\t\t\t\t\t]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"l\":\r\n\t\t\t\tcase \"L\":\r\n\t\t\t\t\t// L has 2 variables: the bottom-left and bottom-right corners\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// BOTTOM-LEFT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Sw\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// BOTTOM-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Se\", [\"Horizontal\", \"Round\"]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"m\":\r\n\t\t\t\tcase \"M\":\r\n\t\t\t\t\t// M has 1 variable: the top, which is custom\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"oSeV\",\r\n\t\t\t\t\t\t\"oNeV\",\r\n\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\"NwDiag\",\r\n\t\t\t\t\t\t\"NeDiag\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// // VARIABLE SEGMENTS\r\n\t\t\t\t\t// \t// TOP is custom:\r\n\t\t\t\t\t// \t// Possible outcomes:\r\n\t\t\t\t\t// \t\t// Diagonal on left, Curved on right\r\n\t\t\t\t\t// \t\t// Curved on left, Diagonal on right\r\n\t\t\t\t\t// \t\t// Diagonal on left, Diagonal on right\r\n\t\t\t\t\t// \tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t// \t\t[\"oNwV\", \"oNwInv\", \"oNeV\", \"oNeInv\"],\r\n\t\t\t\t\t// \t\t[\"oNwV\", \"oNwInv\", \"oNV\", \"oNeArc\"],\r\n\t\t\t\t\t// \t\t[\"oNwArc\", \"oNV\", \"oNeInv\", \"oNeV\"]\r\n\t\t\t\t\t// \t]));\r\n\r\n\t\t\t\t\t//!Could add more variables\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"n\":\r\n\t\t\t\tcase \"N\":\r\n\t\t\t\t\t// N has 2 variables: the top-left and bottom-right corners\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"oNeV\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\"NwDiag\",\r\n\t\t\t\t\t\t\"SeDiag\",\r\n\t\t\t\t\t\t\"oSeV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// // TOP-LEFT CORNER is variable: Outwards or Inwards\r\n\t\t\t\t\t\t// newPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Nw\", [\"Outwards\", \"Inwards\"]));\r\n\t\t\t\t\t\t// // BOTTOM-RIGHT CORNER is variable: Outwards or Inwards\r\n\t\t\t\t\t\t// newPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Se\", [\"Outwards\", \"Inwards\"]));\r\n\r\n\t\t\t\t\t\t//!Could add more variables\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"o\":\r\n\t\t\t\tcase \"O\":\r\n\t\t\t\t\t// O has 2 variables: the bottom-left and bottom-right corners\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// BOTTOM-LEFT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Sw\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// BOTTOM-RIGHT CORNER is variable: Square or Round, BUT if the bottom-left corner is Round, the bottom-right corner must also be Round\r\n\t\t\t\t\t\tif (newPerm.includes(\"oSwArc\")) {\r\n\t\t\t\t\t\t\tnewPerm.push(\"oSeArc\");\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Se\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"p\":\r\n\t\t\t\tcase \"P\":\r\n\t\t\t\t\t// P has 4 variables: the top-left corner, the top-right corner, the centre-left and the centre-NE\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-LEFT CORNER is variable: Square, Round or VStem\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Nw\", [\"Square\", \"Round\", \"VStem\"]));\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// CENTRE-LEFT is variable: Up, Down or Horizontal\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre\", \"W\", [\"Up\", \"Down\", \"Horizontal\"]));\r\n\t\t\t\t\t\t// CENTRE-NE is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre-corner\", \"Ne\", [\"Square\", \"Round\"]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"q\":\r\n\t\t\t\tcase \"Q\":\r\n\t\t\t\t\t// Q has 1 variable: the bottom-left corner\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"SeDiag\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// BOTTOM-LEFT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Sw\", [\"Square\", \"Round\"]));\r\n\r\n\t\t\t\t\t\t//!Could add more variables\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"r\":\r\n\t\t\t\tcase \"R\":\r\n\t\t\t\t\t// R has 5 variables: the top-left corner, the top-right corner, the centre-left, the centre-NE and the bottom-right quarter\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-LEFT CORNER is variable: Square, Round or VStem\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Nw\", [\"Square\", \"Round\", \"VStem\"]));\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// CENTRE-LEFT is variable: Up, Down or Horizontal\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre\", \"W\", [\"Up\", \"Down\", \"Horizontal\"]));\r\n\t\t\t\t\t\t// CENTRE-NE is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre-corner\", \"Ne\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// BOTTOM-RIGHT QUARTER is custom:\r\n\t\t\t\t\t\t// Possible outcomes:\r\n\t\t\t\t\t\t\t// Straight leg: Diagonal\r\n\t\t\t\t\t\t\t// Outwards leg: Round then Down\r\n\t\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t\t\t[\"SeDiag\"],\r\n\t\t\t\t\t\t\t\t[\"iSeArc\", \"oSeV\"]\r\n\t\t\t\t\t\t\t]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"s\":\r\n\t\t\t\tcase \"S\":\r\n\t\t\t\t\t// S has 2 variables: the top-right and bottom-left corners\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\t\t\"iSeArc\",\r\n\t\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Horizontal\", \"Round\"]));\r\n\t\t\t\t\t\t// BOTTOM-LEFT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Sw\", [\"Horizontal\", \"Round\"]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"t\":\r\n\t\t\t\tcase \"T\":\r\n\t\t\t\t\t// T has 1 variable: the top of the stem, which is custom\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwH\",\r\n\t\t\t\t\t\t\"oNeH\",\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"oSV\",\r\n\t\t\t\t\t\t\"oNV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// // VARIABLE SEGMENTS\r\n\t\t\t\t\t// \t// TOP OF STEM is custom:\r\n\t\t\t\t\t// \t// Possible outcomes:\r\n\t\t\t\t\t// \t\t// Vertical\r\n\t\t\t\t\t// \t\t// Curving to the left (Inv)\r\n\t\t\t\t\t// \tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t// \t\t[\"oNV\"],\r\n\t\t\t\t\t// \t\t[\"oNwInv\"]\r\n\t\t\t\t\t// \t]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"u\":\r\n\t\t\t\tcase \"U\":\r\n\t\t\t\t\t// U have 1 variable: the bottom-right corner, which is custom\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwArc\",\r\n\t\t\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"oNeV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// BOTTOM-RIGHT CORNER is custom: Vertical, but random chance of not being visible\r\n\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [[\"oSeV\"]], true));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"v\":\r\n\t\t\t\tcase \"V\":\r\n\t\t\t\t\t// V is a fixed letter - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"oSwH\",\r\n\t\t\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"oNeV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"w\":\r\n\t\t\t\tcase \"W\":\r\n\t\t\t\t\t// W is a fixed letter - no calculations needed\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\"iNwV\",\t\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oNeV\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"SwDiag\",\r\n\t\t\t\t\t\t\"SeDiag\",\r\n\t\t\t\t\t\t\"oSeV\",\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"x\":\r\n\t\t\t\tcase \"X\":\r\n\t\t\t\t\t// X is complex, and is done completely customly\r\n\r\n\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t[\"oNwV\", \"iNwArc\", \"oNeV\", \"iNeArc\", \"oSwV\", \"iSwArc\", \"oSeV\", \"iSeArc\"],\r\n\t\t\t\t\t\t[\"NwDiag\", \"NeDiag\", \"SeDiag\", \"SwDiag\"]\r\n\t\t\t\t\t]));\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"y\":\r\n\t\t\t\tcase \"Y\":\r\n\t\t\t\t\t// Y has 3 variables: the centre-NW, the centre-right and the bottom-left corner\r\n\r\n\t\t\t\t\t// If the previous permutation has the upper diagonal segments, then use the special symmetrical Y shape\r\n\t\t\t\t\tif (prevPerm[\"NwDiag\"] || prevPerm[\"NeDiag\"]) { \r\n\t\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\t\"NwDiag\",\r\n\t\t\t\t\t\t\t\"NeDiag\",\r\n\t\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\t\"oSV\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\t\"oNeV\",\r\n\t\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t\t// CENTRE-NW is variable: Square or Round\r\n\t\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre-corner\", \"Nw\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t\t// CENTRE-RIGHT is variable: Up, Down or Horizontal\r\n\t\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre\", \"E\", [\"Up\", \"Down\", \"Horizontal\"]));\r\n\t\t\t\t\t\t\t// BOTTOM-LEFT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Sw\", [\"Horizontal\", \"Round\"]));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"z\":\r\n\t\t\t\tcase \"Z\":\r\n\t\t\t\t\t// Z is a fixed letter - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwH\",\r\n\t\t\t\t\t\t\"oNeH\",\r\n\t\t\t\t\t\t\"NeDiag\",\r\n\t\t\t\t\t\t\"SwDiag\",\r\n\t\t\t\t\t\t\"oSwH\",\r\n\t\t\t\t\t\t\"oSeH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"1\":\r\n\t\t\t\t\t// 1 has 1 variable: the bottom, which is custom\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"oNV\",\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"oSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// BOTTOM is custom: Horizontal, but random chance of not being visible\r\n\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [[\"oSwH\", \"oSeH\"]], true));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"2\":\r\n\t\t\t\t\t// 2 has 1 variable: the top-left corner\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"iNeArc\",\r\n\t\t\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"oSwH\",\r\n\t\t\t\t\t\t\"oSeH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-LEFT CORNER is custom: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Nw\", [\"Horizontal\", \"Round\"]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"3\":\r\n\t\t\t\t\t// 3 has 5 variables: the top-left corner, the top-right corner, the centre-right, the centre-right and the bottom-right corner\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-LEFT CORNER is variable: Round or Horizontal\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Nw\", [\"Round\", \"Horizontal\"]));\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Round or Square\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Round\", \"Square\"]));\r\n\t\t\t\t\t\t// BOTTOM-RIGHT CORNER is variable: Round or Square\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Se\", [\"Round\", \"Square\"]));\r\n\t\t\t\t\t\t// BOTTOM-LEFT CORNER is variable: Round or Horizontal\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Sw\", [\"Round\", \"Horizontal\"]));\r\n\t\t\t\t\t\t// CENTRE-RIGHT is custom\r\n\t\t\t\t\t\t// Possible outcomes:\r\n\t\t\t\t\t\t\t// Round on top and bottom\r\n\t\t\t\t\t\t\t// Round on top and Square on bottom\r\n\t\t\t\t\t\t\t// Square on top and Round on bottom\r\n\t\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t\t\t[\"iNeArc\", \"iSeArc\"], \r\n\t\t\t\t\t\t\t\t[\"iNeArc\", \"iEH\", \"iSeV\"], \r\n\t\t\t\t\t\t\t\t[\"iNeV\", \"iEH\", \"iSeArc\"]\r\n\t\t\t\t\t\t\t]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"4\":\r\n\t\t\t\t\t// 4 has 3 variables: the centre-NW, the centre-right and the top-right vertical, the last of which is custom\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"oSeV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// CENTRE-NW is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre-corner\", \"Nw\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// CENTRE-RIGHT is variable: Up, Down or Horizontal\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre\", \"E\", [\"Up\", \"Down\", \"Horizontal\"]));\r\n\t\t\t\t\t\t// TOP-RIGHT VERTICAL is custom: Vertical, but random chance of not being visible\r\n\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [[\"oNeV\"]], true));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"5\":\r\n\t\t\t\t\t// 5 has 3 variables: the centre-NW, the centre-SE and the bottom-left corner\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNeH\",\r\n\t\t\t\t\t\t\"oNwH\",\r\n\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// CENTRE-NW is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre-corner\", \"Nw\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// CENTRE-SE is variable: Square or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre-corner\", \"Se\", [\"Square\", \"Round\"]));\r\n\t\t\t\t\t\t// BOTTOM-LEFT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Sw\", [\"Horizontal\", \"Round\"]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"6\":\r\n\t\t\t\t\t// 6 has 1 variable: the centre-SW\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwArc\",\r\n\t\t\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\t\t\"iSeArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// CENTRE-SW is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre-corner\", \"Sw\", [\"Horizontal\", \"Round\"]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"7\":\r\n\t\t\t\t\t// 7 has 1 variable: the centre, which is custom\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwH\",\r\n\t\t\t\t\t\t\"oNeH\",\r\n\t\t\t\t\t\t\"NeDiag\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"oSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// CENTRE is custom: Horizontal, but random chance of not being visible\r\n\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [[\"iWH\", \"iEH\"]], true));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"8\":\r\n\t\t\t\t\t// 8 is complex, and is done completely customly\r\n\r\n\t\t\t\t\t// THE CENTRE\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNwArc\", \r\n\t\t\t\t\t\t\"iNeArc\", \r\n\t\t\t\t\t\t\"iSeArc\", \r\n\t\t\t\t\t\t\"iSwArc\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\t// newPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t// \t[\"iNwArc\", \"iNeArc\", \"iSeArc\", \"iSwArc\"],\r\n\t\t\t\t\t// \t[\"iNwV\", \"iWH\", \"iSwArc\", \"iSeV\", \"iEH\", \"iNeArc\"],\r\n\t\t\t\t\t// \t[\"iSwV\", \"iWH\", \"iNwArc\", \"iNeV\", \"iEH\", \"iSeArc\"]\r\n\t\t\t\t\t// ]));\r\n\r\n\t\t\t\t\t// THE TOP-LEFT AND BOTTOM-RIGHT CORNERS\r\n\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t[\"oNwArc\", \"oSeArc\"],\r\n\t\t\t\t\t\t[\"oNwV\", \"oNwH\", \"oSeV\", \"oSeH\"]\r\n\t\t\t\t\t]));\r\n\r\n\t\t\t\t\t// THE BOTTOM-LEFT AND TOP-RIGHT CORNERS\r\n\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t[\"oSwArc\", \"oNeArc\"],\r\n\t\t\t\t\t\t[\"oSwV\", \"oSwH\", \"oNeV\", \"oNeH\"]\r\n\t\t\t\t\t]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"9\":\r\n\t\t\t\t\t// 9 has 1 variable: the bottom, which is custom and also influences the top-right corner\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\t\t\"iNeArc\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// BOTTOM is custom\r\n\t\t\t\t\t\t// Possible outcomes:\r\n\t\t\t\t\t\t\t// Vertical\r\n\t\t\t\t\t\t\t// Curved\r\n\t\t\t\t\t\tnewPerm.push(...chooseState(prevPerm, [\r\n\t\t\t\t\t\t\t[\"oSeV\", \"oNeArc\"],\r\n\t\t\t\t\t\t\t[\"oSeV\", \"oNeV\", \"oNeH\"],\r\n\t\t\t\t\t\t\t[\"oSeArc\", \"oSwArc\", \"oNeArc\"]\r\n\t\t\t\t\t\t]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"0\":\r\n\t\t\t\t\t// 0 is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\t\t\"oSwArc\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iNeArc\",\r\n\t\t\t\t\t\t\"iSwArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Œ\":\r\n\t\t\t\tcase \"œ\":\r\n\t\t\t\t\t// Œ has 2 variables: the top-right and bottom-right corners\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwArc\",\r\n\t\t\t\t\t\t\"oNV\",\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"oSV\",\r\n\t\t\t\t\t\t\"iEH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Horizontal\", \"Round\"]));\r\n\t\t\t\t\t\t// BOTTOM-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Se\", [\"Horizontal\", \"Round\"]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Æ\":\r\n\t\t\t\tcase \"æ\":\r\n\t\t\t\t\t// Æ has 3 variables: the top-right and bottom-right corners and the centre-left\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"oNV\",\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"oSV\",\r\n\t\t\t\t\t\t\"iEH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Horizontal\", \"Round\"]));\r\n\t\t\t\t\t\t// BOTTOM-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Se\", [\"Horizontal\", \"Round\"]));\r\n\t\t\t\t\t\t// CENTRE-LEFT is variable: Down or Horizontal\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"centre\", \"W\", [\"Down\", \"Horizontal\"]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"ß\":\r\n\t\t\t\t\t// ß is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"iNeArc\",\r\n\t\t\t\t\t\t\"iSeArc\",\r\n\t\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"!\":\r\n\t\t\t\t\t//. ! is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNV\",\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"oSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"?\":\r\n\t\t\t\t\t//. ? has 1 variable: the top-left corner\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"iNeArc\",\r\n\t\t\t\t\t\t\"oSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-LEFT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Nw\", [\"Horizontal\", \"Round\"]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \".\":\r\n\t\t\t\t\t// . is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \",\":\r\n\t\t\t\t\t// , is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oSwH\",\r\n\t\t\t\t\t\t\"oSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"'\":\r\n\t\t\t\tcase \"’\":\r\n\t\t\t\tcase \"`\":\r\n\t\t\t\tcase \"‘\":\r\n\t\t\t\t\t// ' is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '\"':\r\n\t\t\t\tcase \"“\":\r\n\t\t\t\tcase \"”\":\r\n\t\t\t\t\t// \" is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNV\",\r\n\t\t\t\t\t\t\"oNeV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \":\":\r\n\t\t\t\t\t// : is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"oSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \";\":\r\n\t\t\t\t\t// ; is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"oSV\",\r\n\t\t\t\t\t\t\"oSwH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-\":\r\n\t\t\t\tcase \"–\":\r\n\t\t\t\tcase \"—\":\r\n\t\t\t\t\t// - is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iWH\",\r\n\t\t\t\t\t\t\"iEH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"_\":\r\n\t\t\t\t\t// _ is fixed - no calculations needed\r\n\t\t\t\t\t\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oSwH\",\r\n\t\t\t\t\t\t\"oSeH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"+\":\r\n\t\t\t\t\t// + is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"iWH\",\r\n\t\t\t\t\t\t\"iEH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"=\":\r\n\t\t\t\t\t// = is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iWH\",\r\n\t\t\t\t\t\t\"iEH\",\r\n\t\t\t\t\t\t\"oSwH\",\r\n\t\t\t\t\t\t\"oSeH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"/\":\r\n\t\t\t\t\t// / is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"NeDiag\",\r\n\t\t\t\t\t\t\"SwDiag\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"\\\\\":\r\n\t\t\t\t\t// \\ is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"NwDiag\",\r\n\t\t\t\t\t\t\"SeDiag\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"|\":\r\n\t\t\t\t\t// | is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"iSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"(\":\r\n\t\t\t\t\t// ( is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \")\":\r\n\t\t\t\t\t// ) is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"[\":\r\n\t\t\t\t\t// [ is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwH\",\r\n\t\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"oSwH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"]\":\r\n\t\t\t\t\t// ] is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNeH\",\r\n\t\t\t\t\t\t\"oNeV\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"oSeV\",\r\n\t\t\t\t\t\t\"oSeH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"{\":\r\n\t\t\t\t\t// { is fixed - no calculations needed\r\n\r\n\t\t\t\t\t// newPerm.push(\r\n\t\t\t\t\t// \t\"oNwH\",\r\n\t\t\t\t\t// \t\"NwDiag\",\r\n\t\t\t\t\t// \t\"iWH\",\r\n\t\t\t\t\t// \t\"SwDiag\",\r\n\t\t\t\t\t// \t\"oSwH\"\r\n\t\t\t\t\t// );\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\t\t\"iWH\",\r\n\t\t\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\t\t\"oSwArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"}\":\r\n\t\t\t\t\t// } is fixed - no calculations needed\r\n\r\n\t\t\t\t\t// newPerm.push(\r\n\t\t\t\t\t// \t\"oNeH\",\r\n\t\t\t\t\t// \t\"NeDiag\",\r\n\t\t\t\t\t// \t\"iEH\",\r\n\t\t\t\t\t// \t\"SeDiag\",\r\n\t\t\t\t\t// \t\"oSeH\"\r\n\t\t\t\t\t// );\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"iNeArc\",\r\n\t\t\t\t\t\t\"iEH\",\r\n\t\t\t\t\t\t\"iSeArc\",\r\n\t\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"<\":\r\n\t\t\t\t\t// < is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"NeDiag\",\r\n\t\t\t\t\t\t\"SeDiag\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \">\":\r\n\t\t\t\t\t// > is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"NwDiag\",\r\n\t\t\t\t\t\t\"SwDiag\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"$\":\r\n\t\t\t\t\t// $ has 2 variables: the top-right and bottom-left corners\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\t\t\"iSeArc\",\r\n\t\t\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\t\t\"oNV\",\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"oSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// VARIABLE SEGMENTS\r\n\t\t\t\t\t\t// TOP-RIGHT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Ne\", [\"Horizontal\", \"Round\"]));\r\n\t\t\t\t\t\t// BOTTOM-LEFT CORNER is variable: Horizontal or Round\r\n\t\t\t\t\t\tnewPerm.push(...chooseStatePresets(prevPerm, \"corner\", \"Sw\", [\"Horizontal\", \"Round\"]));\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"£\":\r\n\t\t\t\t\t// £ is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\t\t\"iWH\",\r\n\t\t\t\t\t\t\"iEH\",\r\n\t\t\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\t\t\"oSwV\",\r\n\t\t\t\t\t\t\"oSwH\",\r\n\t\t\t\t\t\t\"oSeH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"€\":\r\n\t\t\t\t\t// € is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwArc\",\r\n\t\t\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\t\t\"iWH\",\r\n\t\t\t\t\t\t\"iSwArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"¥\":\r\n\t\t\t\t\t// ¥ is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"NwDiag\",\r\n\t\t\t\t\t\t\"NeDiag\",\r\n\t\t\t\t\t\t\"iWH\",\r\n\t\t\t\t\t\t\"iEH\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"oSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"¢\":\r\n\t\t\t\t\t// ¢ is fixed - no calculations needed\r\n\r\n\t\t\t\t\t// Adding the constant segments\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iEH\",\r\n\t\t\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\t\t\"oSwArc\",\r\n\t\t\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\t\t\"oSV\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"iNV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"&\":\r\n\t\t\t\t\t// & is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\t\t\"oSwArc\",\r\n\t\t\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\t\t\"SeDiag\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"*\":\r\n\t\t\t\t\t//. * is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\t\t\"iNeArc\",\r\n\t\t\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\t\t\"iSeArc\",\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"iSV\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"#\":\r\n\t\t\t\t\t// # is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNV\",\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"oSV\",\r\n\t\t\t\t\t\t\"oNeV\",\r\n\t\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\t\"oSeV\",\r\n\t\t\t\t\t\t\"iWH\",\r\n\t\t\t\t\t\t\"iEH\",\r\n\t\t\t\t\t\t\"oSwH\",\r\n\t\t\t\t\t\t\"oSeH\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"~\":\r\n\t\t\t\t\t// ~ is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\t\t\"iNeArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"%\":\r\n\t\t\t\t\t// % is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"SwDiag\",\r\n\t\t\t\t\t\t\"NeDiag\",\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"@\":\r\n\t\t\t\t\t// @ is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\t\"iNeArc\",\r\n\t\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\t\"oSwArc\",\r\n\t\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"^\":\r\n\t\t\t\t\t// ^ is fixed - no calculations needed\r\n\r\n\t\t\t\t\tnewPerm.push(\r\n\t\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\t\"oNeArc\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// (For now) the default option is to clear the grid\r\n\r\n\t\t\t\t\tnewPerm = [];\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Returning the new permutation\r\n\t\t\treturn newPerm;\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t// This is the function to change to a new letter (or number, punctuation, etc.)\r\n\t\tfunction changeToLetter(letter) {\r\n\t\t\t// If the element no longer exists or the letter is already changing, then return\r\n\t\t\tif (!svg.current || (currentlyChanging && mode !== \"tessellation\")) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Updating the tracker\r\n\t\t\tcurrentlyChanging = true;\r\n\r\n\t\t\t// Store the existing permutation of the grid\r\n\t\t\tlet existingPerm = Object.assign({}, currentPerm);\r\n\t\t\tlet existingPermSegments = Object.keys(existingPerm).filter(key => existingPerm[key]);\r\n\r\n\t\t\t// Getting the array of segments that should be visible for the new letter\r\n\t\t\tlet newPerm;\r\n\t\t\tif (Array.isArray(letter)) {\r\n\t\t\t\tnewPerm = letter.flatMap(l => letterMaker(l, existingPerm));\r\n\t\t\t} else {\r\n\t\t\t\tnewPerm = letterMaker(letter, existingPerm);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Getting the array of segments that are being added\r\n\t\t\tlet addedSegments = newPerm.filter(segment => !existingPermSegments.includes(segment));\r\n\t\t\tlet groupedAddedSegments = groupSegments(addedSegments, letter);\r\n\r\n\t\t\t// Getting the array of segments that are being removed\r\n\t\t\tlet removedSegments = existingPermSegments.filter(segment => !newPerm.includes(segment));\r\n\t\t\tlet groupedRemovedSegments = groupSegments(removedSegments);\r\n\r\n\t\t\t// If the new permutation is the same as the existing permutation, then return\r\n\t\t\tif (addedSegments.length === 0 && removedSegments.length === 0) {\r\n\t\t\t\tcurrentlyChanging = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Getting the array of segments that are being kept\r\n\t\t\tlet keptSegments = existingPermSegments.filter(segment => !removedSegments.includes(segment));\r\n\r\n\t\t\t// Changing the added colour\r\n\t\t\t// Getting a list of the colours currently visible\r\n\t\t\tlet visibleColours = [];\r\n\t\t\tfor (let segment of existingPermSegments) {\r\n\t\t\t\tlet colour = eval(segment).current.style.stroke;\r\n\t\t\t\t\r\n\t\t\t\t// The colour is represented as an RGB string, e.g. \"rgb(116, 62, 230)\", so we need to convert it to a hex string\r\n\t\t\t\t// The rgbToHex function takes the RGB values as input, so we need to extract them from the string\r\n\t\t\t\tif (colour) {\r\n\t\t\t\t\tlet rgb = colour.match(/\\d+/g).map(Number);\r\n\t\t\t\t\tlet colourHex = rgbToHex(...rgb);\r\n\t\r\n\t\t\t\t\tif (!visibleColours.includes(colourHex)) {\r\n\t\t\t\t\t\tvisibleColours.push(colourHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Getting a list of colours that could be used\r\n\t\t\tlet availableColours = colourCycle.filter(colour => !visibleColours.includes(colour));\r\n\r\n\t\t\t// Choosing a new colour (if availableColours is empty, then the colour will be randomly chosen from colourCycle)\r\n\t\t\tlet newColour = (availableColours.length > 0) ? randomlyChoose(...availableColours) : randomlyChoose(...colourCycle);\r\n\r\n\t\t\t// The hierarchy of the segments; this dictates the order in which the segments are drawn\r\n\t\t\tconst segmentsHierarchy = [\r\n\t\t\t\t\"oNwV\",\r\n\t\t\t\t\"iNwV\",\r\n\t\t\t\t\"iSwV\",\r\n\t\t\t\t\"oSwV\",\r\n\t\t\t\t\"oNwH\",\r\n\t\t\t\t\"NwDiag\",\r\n\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\"iWH\",\r\n\t\t\t\t\"oNV\",\r\n\t\t\t\t\"iNV\",\r\n\t\t\t\t\"oNeH\",\r\n\t\t\t\t\"oNeV\",\r\n\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\"NeDiag\",\r\n\t\t\t\t\"iNeV\",\r\n\t\t\t\t\"iNeArc\",\r\n\t\t\t\t\"iEH\",\r\n\t\t\t\t\"SwDiag\",\r\n\t\t\t\t\"iSV\",\r\n\t\t\t\t\"SeDiag\",\r\n\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\"iSeV\",\r\n\t\t\t\t\"iSeArc\",\r\n\t\t\t\t\"oSwArc\",\r\n\t\t\t\t\"oSeV\",\r\n\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\"oSwH\",\r\n\t\t\t\t\"oSV\",\r\n\t\t\t\t\"oSeH\"\r\n\t\t\t];\r\n\t\t\t\r\n\t\t\t// Ordering the groupedAddedSegments and groupedRemovedSegments arrays based on the segmentsHierarchy array\r\n\t\t\tgroupedAddedSegments.sort((a, b) => segmentsHierarchy.indexOf(a[0]) - segmentsHierarchy.indexOf(b[0]));\r\n\t\t\tgroupedRemovedSegments.sort((a, b) => segmentsHierarchy.indexOf(a[0]) - segmentsHierarchy.indexOf(b[0]));\r\n\r\n\t\t\t// Updating the permutation to reflect the new letter and showing/hiding segments as necessary\r\n\t\t\tlet letterChangeTl = gsap.timeline({ paused: true });\r\n\t\t\t\r\n\t\t\t// Setting the duration and easing of the animations\r\n\t\t\tlet dur = controllerDur;\r\n\t\t\tlet ease = \"power2.inOut\";\r\n\r\n\t\t\t// Removing the removed segments\r\n\t\t\tfor (let group of groupedRemovedSegments) {\r\n\t\t\t\t// Use GSAP to animate the erasing of the group\r\n\t\t\t\tif (group.length === 1) {\r\n\t\t\t\t\tlet segment = group[0];\r\n\r\n\t\t\t\t\t// Change the status of the segment to invisible\r\n\t\t\t\t\tcurrentPerm[segment] = false;\r\n\r\n\t\t\t\t\t// Erase the segment\r\n\t\t\t\t\tletterChangeTl.to(eval(segment).current, {\r\n\t\t\t\t\t\tduration: dur,\r\n\t\t\t\t\t\tstrokeDashoffset: -101,\r\n\t\t\t\t\t\tease: ease,\r\n\t\t\t\t\t\tonComplete: () => {\r\n\t\t\t\t\t\t\tgsap.set(eval(segment).current, { strokeDashoffset: 101 });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, \"<\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// If the group has multiple segments, string together the erasing of the segments\r\n\t\t\t\t\tlet segmentDuration = dur * 2 / group.length;\r\n\r\n\t\t\t\t\tlet tl = gsap.timeline({\r\n\t\t\t\t\t\tpaused: true,\r\n\t\t\t\t\t\tdefaults: {\r\n\t\t\t\t\t\t\tduration: segmentDuration,\r\n\t\t\t\t\t\t\tease: \"none\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tfor (let segment of group) {\r\n\t\t\t\t\t\t// Change the status of the segment to invisible\r\n\t\t\t\t\t\tcurrentPerm[segment] = false;\r\n\r\n\t\t\t\t\t\ttl.to(eval(segment).current, {\r\n\t\t\t\t\t\t\tstrokeDashoffset: -101,\r\n\t\t\t\t\t\t\tonComplete: () => {\r\n\t\t\t\t\t\t\t\tgsap.set(eval(segment).current, { strokeDashoffset: 101 });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tletterChangeTl.to(tl, {\r\n\t\t\t\t\t\ttime: tl.duration(),\r\n\t\t\t\t\t\tduration: tl.duration(),\r\n\t\t\t\t\t\tease: ease,\r\n\t\t\t\t\t}, \"<\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Adding the added segments\r\n\t\t\tfor (let group of groupedAddedSegments) {\r\n\t\t\t\t// Use GSAP to animate the drawing of the group\r\n\t\t\t\tif (group.length === 1) {\r\n\t\t\t\t\tlet segment = group[0];\r\n\r\n\t\t\t\t\t// Change the status of the segment to visible\r\n\t\t\t\t\tcurrentPerm[segment] = true;\r\n\r\n\t\t\t\t\t// If the group only has one segment, draw it normally\r\n\t\t\t\t\tletterChangeTl.to(eval(segment).current, {\r\n\t\t\t\t\t\tduration: dur,\r\n\t\t\t\t\t\tstrokeDashoffset: 0,\r\n\t\t\t\t\t\tease: ease,\r\n\t\t\t\t\t}, `<${dur * 0.2}`);\r\n\r\n\t\t\t\t\t// Changing the colour of the segment\r\n\t\t\t\t\teval(segment).current.style.stroke = newColour;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// If the group has multiple segments, string together the drawing of the segments\r\n\t\t\t\t\tlet segmentDuration = dur * 2 / group.length;\r\n\r\n\t\t\t\t\tlet tl = gsap.timeline({\r\n\t\t\t\t\t\tpaused: true,\r\n\t\t\t\t\t\tdefaults: {\r\n\t\t\t\t\t\t\tduration: segmentDuration,\r\n\t\t\t\t\t\t\tease: \"none\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tfor (let segment of group) {\r\n\t\t\t\t\t\t// Change the status of the segment to visible\r\n\t\t\t\t\t\tcurrentPerm[segment] = true;\r\n\r\n\t\t\t\t\t\ttl.to(eval(segment).current, {\r\n\t\t\t\t\t\t\tstrokeDashoffset: 0,\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Changing the colour of the segment\r\n\t\t\t\t\t\teval(segment).current.style.stroke = newColour;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tletterChangeTl.to(tl, {\r\n\t\t\t\t\t\ttime: tl.duration(),\r\n\t\t\t\t\t\tduration: tl.duration(),\r\n\t\t\t\t\t\tease: ease,\r\n\t\t\t\t\t}, `<${dur * 0.2}`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Play the timeline\r\n\t\t\tletterChangeTl.play();\r\n\r\n\t\t\t// When the animation is finished, update the tracker\r\n\t\t\tletterChangeTl.add(() => {\r\n\t\t\t\tcurrentlyChanging = false;\r\n\t\t\t}, `>-=${dur * 0.4}`);\r\n\r\n\t\t\tif (mode === \"tessellation\" && !reset) {\r\n\t\t\t\tletterChangeTl.add(() => {\r\n\t\t\t\t\t// If there's a program, then change to the next letter in the program\r\n\t\t\t\t\tif (program) {\r\n\t\t\t\t\t\t// If the program is finished, then restart it\r\n\t\t\t\t\t\tif (programIndex === program.length - 1) {\r\n\t\t\t\t\t\t\tprogramIndex = 0;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tprogramIndex++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchangeToLetter(program[programIndex]);\r\n\t\t\t\t}, `>-=${dur * 0.2}`);\r\n\t\t\t}\r\n\t\t\tif (reset) {\r\n\t\t\t\treset = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\t\tfunction groupSegments(segments, letter) {\r\n\t\t\t// Create a copy of the segments array\r\n\t\t\tlet groupedSegments = [...segments];\r\n\r\n\t\t\t// Special cases\r\n\t\t\t// R and K hook\r\n\t\t\tif ((letter === \"r\" || letter === \"R\" || letter === \"k\" || letter === \"K\") && containsSet(groupedSegments, [\"iSeArc\", \"oSeV\"])) {\r\n\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iSeArc\", \"oSeV\"]);\r\n\t\t\t\tgroupedSegments.push([\"iSeArc\", \"oSeV\"]);\r\n\t\t\t}\r\n\r\n\t\t\t// Straight line, centre\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNV\",\r\n\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\"oSV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNV\", \"iNV\", \"iSV\", \"oSV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNV\", \"iNV\", \"iSV\", \"oSV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNw\",\r\n\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\"iSV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNw\", \"iNV\", \"iSV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNw\", \"iNV\", \"iSV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\"oSV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iNV\", \"iSV\", \"oSV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iNV\", \"iSV\", \"oSV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNw\",\r\n\t\t\t\t\t\"iNV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNw\", \"iNV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNw\", \"iNV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iNV\",\r\n\t\t\t\t\t\"iSV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iNV\", \"iSV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iNV\", \"iSV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iSV\",\r\n\t\t\t\t\t\"oSV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iSV\", \"oSV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iSV\", \"oSV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t};\r\n\r\n\t\t\t// Upper circle\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\"iNeArc\",\r\n\t\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\t\"oNwArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNeArc\", \"iNeArc\", \"iNwArc\", \"oNwArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNeArc\", \"iNeArc\", \"iNwArc\", \"oNwArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\"oNeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwArc\", \"oNeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwArc\", \"oNeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwH\",\r\n\t\t\t\t\t\"oNeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwH\", \"oNeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwH\", \"oNeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\"oNeH\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwArc\", \"oNeH\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwArc\", \"oNeH\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t};\r\n\r\n\t\t\t// Lower circle\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oSeArc\",\r\n\t\t\t\t\t\"iSeArc\",\r\n\t\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\t\"oSwArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oSeArc\", \"iSeArc\", \"iSwArc\", \"oSwArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oSeArc\", \"iSeArc\", \"iSwArc\", \"oSwArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oSwArc\",\r\n\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oSwArc\", \"oSeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oSwArc\", \"oSeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oSwH\",\r\n\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oSwH\", \"oSeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oSwH\", \"oSeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oSwArc\",\r\n\t\t\t\t\t\"oSeH\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oSwArc\", \"oSeH\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oSwArc\", \"oSeH\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t};\r\n\r\n\t\t\t// Middle horizontal bar\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iWH\",\r\n\t\t\t\t\t\"iEH\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iWH\", \"iEH\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iWH\", \"iEH\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\t\"iNeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iNwArc\", \"iNeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iNwArc\", \"iNeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\t\"iSeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iSwArc\", \"iSeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iSwArc\", \"iSeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\t\"iEH\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iNwArc\", \"iEH\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iNwArc\", \"iEH\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iWH\",\r\n\t\t\t\t\t\"iNeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iWH\", \"iNeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iWH\", \"iNeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\t\"iEH\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iSwArc\", \"iEH\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iSwArc\", \"iEH\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iWH\",\r\n\t\t\t\t\t\"iSeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iWH\", \"iSeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iWH\", \"iSeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iNwArc\",\r\n\t\t\t\t\t\"iSeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iNwArc\", \"iSeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iNwArc\", \"iSeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iSwArc\",\r\n\t\t\t\t\t\"iNeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iSwArc\", \"iNeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iSwArc\", \"iNeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t};\r\n\r\n\t\t\t// Upper horizontal bar\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwH\",\r\n\t\t\t\t\t\"oNeH\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwH\", \"oNeH\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwH\", \"oNeH\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t};\r\n\r\n\t\t\t// Lower horizontal bar\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oSwH\",\r\n\t\t\t\t\t\"oSeH\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oSwH\", \"oSeH\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oSwH\", \"oSeH\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t};\r\n\r\n\t\t\t// Straight line, left\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\"oSwV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwV\", \"iNwV\", \"iSwV\", \"oSwV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwV\", \"iNwV\", \"iSwV\", \"oSwV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\"oSwV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwArc\", \"iNwV\", \"iSwV\", \"oSwV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwArc\", \"iNwV\", \"iSwV\", \"oSwV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\"oSwArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwV\", \"iNwV\", \"iSwV\", \"oSwArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwV\", \"iNwV\", \"iSwV\", \"oSwArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\"oSwArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwArc\", \"iNwV\", \"iSwV\", \"oSwArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwArc\", \"iNwV\", \"iSwV\", \"oSwArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\"iSwV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwV\", \"iNwV\", \"iSwV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwV\", \"iNwV\", \"iSwV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\"iSwV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwArc\", \"iNwV\", \"iSwV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwArc\", \"iNwV\", \"iSwV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\"oSwV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iNwV\", \"iSwV\", \"oSwV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iNwV\", \"iSwV\", \"oSwV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\"oSwArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iNwV\", \"iSwV\", \"oSwArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iNwV\", \"iSwV\", \"oSwArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwV\",\r\n\t\t\t\t\t\"iNwV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwV\", \"iNwV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwV\", \"iNwV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNwArc\",\r\n\t\t\t\t\t\"iNwV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNwArc\", \"iNwV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNwArc\", \"iNwV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iNwV\",\r\n\t\t\t\t\t\"iSwV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iNwV\", \"iSwV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iNwV\", \"iSwV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\"oSwV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iSwV\", \"oSwV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iSwV\", \"oSwV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iSwV\",\r\n\t\t\t\t\t\"oSwArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iSwV\", \"oSwArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iSwV\", \"oSwArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t// Straight line, right\r\n\t\t\tswitch (true) {\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNeV\",\r\n\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\"oSeV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNeV\", \"iNeV\", \"iSeV\", \"oSeV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNeV\", \"iNeV\", \"iSeV\", \"oSeV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\"oSeV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNeArc\", \"iNeV\", \"iSeV\", \"oSeV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNeArc\", \"iNeV\", \"iSeV\", \"oSeV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNeV\",\r\n\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNeV\", \"iNeV\", \"iSeV\", \"oSeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNeV\", \"iNeV\", \"iSeV\", \"oSeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNeArc\", \"iNeV\", \"iSeV\", \"oSeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNeArc\", \"iNeV\", \"iSeV\", \"oSeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNeV\",\r\n\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\"iSeV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNeV\", \"iNeV\", \"iSeV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNeV\", \"iNeV\", \"iSeV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\"iSeV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNeArc\", \"iNeV\", \"iSeV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNeArc\", \"iNeV\", \"iSeV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\"oSeV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iNeV\", \"iSeV\", \"oSeV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iNeV\", \"iSeV\", \"oSeV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iNeV\", \"iSeV\", \"oSeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iNeV\", \"iSeV\", \"oSeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNeV\",\r\n\t\t\t\t\t\"iNeV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNeV\", \"iNeV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNeV\", \"iNeV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"oNeArc\",\r\n\t\t\t\t\t\"iNeV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"oNeArc\", \"iNeV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"oNeArc\", \"iNeV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iNeV\",\r\n\t\t\t\t\t\"iSeV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iNeV\", \"iSeV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iNeV\", \"iSeV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\"oSeV\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iSeV\", \"oSeV\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iSeV\", \"oSeV\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase containsSet(groupedSegments, [\r\n\t\t\t\t\t\"iSeV\",\r\n\t\t\t\t\t\"oSeArc\"\r\n\t\t\t\t]):\r\n\t\t\t\t\tgroupedSegments = removeValues(groupedSegments, [\"iSeV\", \"oSeArc\"]);\r\n\t\t\t\t\tgroupedSegments.push([\"iSeV\", \"oSeArc\"]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t};\r\n\r\n\t\t\t// For any segments that are not part of a group, put each one into an array of its own (so it can be animated individually) and add it to the groupedSegments array\r\n\t\t\tlet ungroupedSegments = groupedSegments.filter(segment => !Array.isArray(segment));\r\n\t\t\t\r\n\t\t\tfor (let segment of ungroupedSegments) {\r\n\t\t\t\tlet newArray = [segment];\r\n\t\t\t\tgroupedSegments.push(newArray);\r\n\t\t\t}\r\n\r\n\t\t\t// Remove the ungrouped segments from the groupedSegments array\r\n\t\t\tgroupedSegments = groupedSegments.filter(segment => Array.isArray(segment));\r\n\t\t\t\r\n\t\t\treturn groupedSegments;\r\n\t\t}\r\n\r\n\r\n\r\n\t\t// If there's a letter to start with, change to that letter\r\n\t\tif (initialLetter) {\r\n\t\t\tchangeToLetter(initialLetter);\r\n\r\n\t\t\tif (initialLetter === \" \") {\r\n\t\t\t\tcontrollerStartDisplayed = false;\r\n\t\t\t\tcurrentlyChanging = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// If the letter is to be blank at the start (i.e., not fully displayed) and there isn't an initial letter, hide all the segments\r\n\t\tif (!initialLetter) {\r\n\t\t\tif (!controllerStartDisplayed) {\r\n\t\t\t\tfor (let segment in currentPerm) {\r\n\t\t\t\t\teval(segment).current.style.strokeDashoffset = 101;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (let segment in currentPerm) {\r\n\t\t\t\t\teval(segment).current.style.strokeDashoffset = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\t\t\r\n\r\n\t\tif (mode === \"singleLetter\") {\r\n\t\t\t// A keypress event listener is added to the window to allow the user to change the letter\r\n\t\t\tconst handleKeyPress = (e) => {\r\n\t\t\t\t// The key that was pressed is stored in the variable 'key'\r\n\t\t\t\t// alert(\"Key pressed: \" + e.key);\r\n\t\t\t\tlet key = e.key;\r\n\t\t\t\tchangeToLetter(key);\r\n\t\t\t};\r\n\t\r\n\t\t\twindow.addEventListener(\"keypress\", handleKeyPress);\r\n\t\r\n\t\t\t// Cleanup function to remove the event listener\r\n\t\t\treturn () => {\r\n\t\t\t\twindow.removeEventListener(\"keypress\", handleKeyPress);\r\n\t\t\t};\r\n\t\t}\r\n\t\tif (mode === \"wordSnake\" || mode === \"set\" || mode === \"sentences\") {\r\n\t\t\t// Add a listener for a letter change from a custom event\r\n\t\t\tconst handleLetterChange = (e) => {\r\n\t\t\t\tlet letter = e.detail;\r\n\t\t\t\tchangeToLetter(letter);\r\n\t\t\t};\r\n\r\n\t\t\twindow.addEventListener((\"letterChange\" + mode + reference), handleLetterChange);\r\n\t\t}\r\n\t\tif (mode === \"tessellation\") {\r\n\t\t\t// Start the program\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tchangeToLetter(program[programIndex]);\r\n\t\t\t}, 500);\r\n\r\n\t\t\tconst handleLetterChangeStop = () => {\r\n\t\t\t\t// Killing any existing gsap for this element\r\n\t\t\t\treset = true;\r\n\t\t\t}\r\n\r\n\t\t\t$$(`.LetterGrid--${reference}`).addEventListener(\"letterChangeStop\", handleLetterChangeStop);\r\n\r\n\t\t\t// Cleanup function to remove the event listener\r\n\t\t\treturn () => {\r\n\t\t\t\tif (svg.current) {\r\n\t\t\t\t\t$$(`.LetterGrid--${reference}`).removeEventListener(\"letterChangeStop\", handleLetterChangeStop);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\r\n\t}, []);\r\n\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<svg className={ \"LetterGrid LetterGrid--\" + reference } ref={ svg } xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0.6 0.5 189.1 400.5\" preserveAspectRatio='none'>\r\n\t\t\t<path \r\n\t\t\t\tclassName=\"oSeArc\" \r\n\t\t\t\tref={ oSeArc } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\td=\"M94.84,400.5c7.046,0,13.47-.263,21.224-1.846,5.852-1.195,11.552-2.72,17.296-5.074,5.743-2.354,11.123-5.558,16.1-8.967s9.552-7.325,13.687-11.708,7.829-9.233,11.045-14.509,6.303-10.978,8.524-17.066,3.718-12.029,4.722-18.451c1.512-9.668,1.675-15.303,1.742-22.379\"/>\r\n\t\t\t<path \r\n\t\t\t\tclassName=\"oSwArc\" \r\n\t\t\t\tref={ oSwArc } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\td=\"M.5,300.5c0,7.468.248,14.278,1.742,22.497,1.127,6.204,2.566,12.246,4.787,18.333,2.22,6.088,5.244,11.79,8.46,17.066s6.91,10.126,11.045,14.509c4.135,4.383,8.71,8.299,13.687,11.708s10.357,6.682,16.1,9.035,11.348,3.941,17.407,5.006c9.121,1.603,14.437,1.775,21.113,1.846\"/>\r\n\t\t\t<path \r\n\t\t\t\tclassName=\"iSeArc\" \r\n\t\t\t\tref={ iSeArc } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\td=\"M94.84,200.5c6.676.071,11.991.243,21.113,1.846,6.059,1.065,11.663,2.652,17.407,5.006,5.743,2.354,11.123,5.626,16.1,9.035,4.977,3.409,9.552,7.325,13.687,11.708s7.829,9.233,11.045,14.509,6.239,10.978,8.46,17.066c2.22,6.088,3.659,12.13,4.787,18.333,1.493,8.219,1.742,15.029,1.742,22.497\"/>\r\n\t\t\t<path \r\n\t\t\t\tclassName=\"iSwArc\" \r\n\t\t\t\tref={ iSwArc } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\td=\"M.5,300.5c.067-7.076.229-12.711,1.742-22.379,1.005-6.422,2.502-12.363,4.722-18.451s5.308-11.79,8.524-17.066,6.91-10.126,11.045-14.509,8.71-8.299,13.687-11.708c4.977-3.409,10.357-6.613,16.1-8.967s11.443-3.879,17.296-5.074c7.754-1.583,14.178-1.846,21.224-1.846\"/>\r\n\t\t\t<path \r\n\t\t\t\tclassName=\"iNeArc\" \r\n\t\t\t\tref={ iNeArc } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\td=\"M189.179,100.5c-.067,7.076-.229,12.711-1.742,22.379-1.005,6.422-2.502,12.363-4.722,18.451-2.22,6.088-5.308,11.79-8.524,17.066s-6.91,10.126-11.045,14.509-8.71,8.299-13.687,11.708-10.357,6.613-16.1,8.967c-5.743,2.354-11.443,3.879-17.296,5.074-7.754,1.583-14.178,1.846-21.224,1.846\"/>\r\n\t\t\t<path \r\n\t\t\t\tclassName=\"iNwArc\" \r\n\t\t\t\tref={ iNwArc } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\td=\"M94.84,200.5c-6.676-.071-11.991-.243-21.113-1.846-6.059-1.065-11.663-2.652-17.407-5.006s-11.123-5.626-16.1-9.035c-4.977-3.409-9.552-7.325-13.687-11.708-4.135-4.383-7.829-9.233-11.045-14.509s-6.239-10.978-8.46-17.066c-2.22-6.088-3.659-12.13-4.787-18.333-1.493-8.219-1.742-15.029-1.742-22.497\"/>\r\n\t\t\t<path \r\n\t\t\t\tclassName=\"oNeArc\" \r\n\t\t\t\tref={ oNeArc } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\td=\"M94.84.5c6.676.071,11.991.243,21.113,1.846,6.059,1.065,11.663,2.652,17.407,5.006s11.123,5.626,16.1,9.035,9.552,7.325,13.687,11.708,7.829,9.233,11.045,14.509,6.239,10.978,8.46,17.066c2.22,6.088,3.659,12.13,4.787,18.333,1.493,8.219,1.742,15.029,1.742,22.497\"/>\r\n\t\t\t<path \r\n\t\t\t\tclassName=\"oNwArc\" \r\n\t\t\t\tref={ oNwArc } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\td=\"M.5,100.5c.067-7.076.229-12.711,1.742-22.379,1.005-6.422,2.502-12.363,4.722-18.451s5.308-11.79,8.524-17.066,6.91-10.126,11.045-14.509,8.71-8.299,13.687-11.708,10.357-6.613,16.1-8.967,11.443-3.879,17.296-5.074c7.754-1.583,14.178-1.846,21.224-1.846\"/>\r\n\t\t\t\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"SeDiag\" \r\n\t\t\t\tref={ SeDiag } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"94.84\" y1=\"200.5\" x2=\"189.179\" y2=\"400.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"SwDiag\" \r\n\t\t\t\tref={ SwDiag } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"94.84\" y1=\"200.5\" x2=\".5\" y2=\"400.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"NeDiag\" \r\n\t\t\t\tref={ NeDiag } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"94.84\" y1=\"200.5\" x2=\"189.179\" y2=\".5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"NwDiag\" \r\n\t\t\t\tref={ NwDiag } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"94.84\" y1=\"200.5\" x2=\".5\" y2=\".5\"/>\r\n\t\t\t\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"oSeH\" \r\n\t\t\t\tref={ oSeH } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"94.84\" y1=\"400.5\" x2=\"189.179\" y2=\"400.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"oSwH\" \r\n\t\t\t\tref={ oSwH } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\".5\" y1=\"400.5\" x2=\"94.84\" y2=\"400.5\"/>\r\n\t\t\t\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"iEH\" \r\n\t\t\t\tref={ iEH } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"94.84\" y1=\"200.5\" x2=\"189.179\" y2=\"200.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"iWH\" \r\n\t\t\t\tref={ iWH } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\".5\" y1=\"200.5\" x2=\"94.84\" y2=\"200.5\"/>\r\n\t\t\t\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"oNeH\" \r\n\t\t\t\tref={ oNeH } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"94.84\" y1=\".5\" x2=\"189.179\" y2=\".5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"oNwH\" \r\n\t\t\t\tref={ oNwH } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\".5\" y1=\".5\" x2=\"94.84\" y2=\".5\"/>\r\n\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"oSV\" \r\n\t\t\t\tref={ oSV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"94.84\" y1=\"300.5\" x2=\"94.84\" y2=\"400.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"iSV\" \r\n\t\t\t\tref={ iSV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"94.84\" y1=\"200.5\" x2=\"94.84\" y2=\"300.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"iNV\" \r\n\t\t\t\tref={ iNV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"94.84\" y1=\"100.5\" x2=\"94.84\" y2=\"200.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"oNV\" \r\n\t\t\t\tref={ oNV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"94.84\" y1=\".5\" x2=\"94.84\" y2=\"100.5\"/>\r\n\t\t\t\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"oSeV\" \r\n\t\t\t\tref={ oSeV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"189.179\" y1=\"300.5\" x2=\"189.179\" y2=\"400.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"iSeV\" \r\n\t\t\t\tref={ iSeV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"189.179\" y1=\"200.5\" x2=\"189.179\" y2=\"300.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"iNeV\" \r\n\t\t\t\tref={ iNeV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"189.179\" y1=\"100.5\" x2=\"189.179\" y2=\"200.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"oNeV\" \r\n\t\t\t\tref={ oNeV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\"189.179\" y1=\".5\" x2=\"189.179\" y2=\"100.5\"/>\r\n\t\t\t\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"oSwV\" \r\n\t\t\t\tref={ oSwV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\".5\" y1=\"300.5\" x2=\".5\" y2=\"400.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"iSwV\" \r\n\t\t\t\tref={ iSwV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\".5\" y1=\"200.5\" x2=\".5\" y2=\"300.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"iNwV\" \r\n\t\t\t\tref={ iNwV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\".5\" y1=\"100.5\" x2=\".5\" y2=\"200.5\"/>\r\n\t\t\t<line \r\n\t\t\t\tclassName=\"oNwV\" \r\n\t\t\t\tref={ oNwV } \r\n\t\t\t\tpathLength={ 100 }\r\n\t\t\t\tx1=\".5\" y1=\".5\" x2=\".5\" y2=\"100.5\"/>\r\n\t\t</svg>\r\n\t);\r\n}","// The standard transition duration (in seconds)\r\nexport const TRANSITION_DURATION = 0.5;\r\n\r\n\r\n\r\n// The list of colours\r\nexport const COLOURS = {\r\n\tred:    \"#f52929\",\r\n\torange: \"#ff6b00\",\r\n\tyellow: \"#fcb500\",\r\n\tgreen:  \"#9ce500\",\r\n\tjade:   \"#00b072\",\r\n\taqua:   \"#0abcf2\",\r\n\tblue:   \"#1e6bff\",\r\n\tpurple: \"#743ee6\",\r\n\tpink:   \"#ff458f\",\r\n\r\n\tblack:  \"#1e1e1e\",\r\n\twhite:  \"#eeeeee\"\r\n};\r\n\r\n\r\n\r\n// A list of words related to the project\r\nexport const WORDS = [\r\n\t\"word\",\r\n\t\"animation\",\r\n\t\"morph\",\r\n\t\"transform\",\r\n\t\"transition\",\r\n\t\"interactivity\",\r\n\t\"responsive\",\r\n\t\"design\",\r\n\t\"web\",\r\n\t\"development\",\r\n\t\"code\",\r\n\t\"programming\",\r\n\t\"javascript\",\r\n\t\"font\",\r\n\t\"typography\",\r\n\t\"letter\",\r\n\t\"grid\",\r\n\t\"layout\",\r\n\t\"responsive\",\r\n\t\"tessellation\",\r\n\t\"glyph\",\r\n\t\"character\",\r\n\t\"symbol\",\r\n\t\"punctuation\",\r\n\t\"mark\",\r\n\t\"graphic\",\r\n\t\"illustration\",\r\n\t\"art\",\r\n\t\"creative\",\r\n\t\"expression\",\r\n\t\"typographic\",\r\n\t\"typeface\",\r\n\t\"language\",\r\n\t\"communication\",\r\n\t\"message\",\r\n\t\"meaning\",\r\n\t\"semantics\",\r\n\t\"phonetics\",\r\n\t\"phonology\",\r\n\t\"morphology\",\r\n\t\"syntactics\",\r\n\t\"pragmatics\",\r\n\t\"linguistics\",\r\n\t\"read\",\r\n\t\"write\",\r\n\t\"draw\",\r\n\t\"paint\",\r\n\t\"create\",\r\n\t\"compose\",\r\n\t\"illustrate\",\r\n\t\"animate\",\r\n\t\"interact\",\r\n\t\"experience\",\r\n\t\"explore\",\r\n\t\"enhanced\",\r\n\t\"develop\",\r\n\t\"evolve\",\r\n\t\"progress\",\r\n\t\"advance\",\r\n\t\"move\",\r\n\t\"flow\",\r\n\t\"change\",\r\n\t\"shift\",\r\n\t\"switch\",\r\n\t\"toggle\",\r\n\t\"cycle\",\r\n\t\"loop\",\r\n\t\"repeat\",\r\n\t\"iterate\",\r\n\t\"recycle\",\r\n\t\"renew\",\r\n\t\"refresh\",\r\n\t\"restart\",\r\n\t\"begin\",\r\n\t\"start\",\r\n\t\"end\",\r\n\t\"finish\",\r\n\t\"complete\",\r\n\t\"conclude\",\r\n\t\"close\",\r\n\t\"open\",\r\n\t\"expand\",\r\n\t\"contract\",\r\n\t\"stretch\",\r\n\t\"shrink\",\r\n\t\"grow\",\r\n\t\"reduce\",\r\n\t\"enlarge\",\r\n\t\"diminish\",\r\n\t\"scale\",\r\n\t\"resize\",\r\n\t\"reposition\",\r\n\t\"relocate\",\r\n\t\"rearrange\",\r\n\t\"reorder\",\r\n\t\"reorganize\",\r\n\t\"restructure\",\r\n\t\"reform\",\r\n\t\"rebuild\",\r\n\t\"recreate\",\r\n\t\"reinvent\",\r\n\t\"reimagine\",\r\n\t\"rethink\",\r\n\t\"reconsider\",\r\n\t\"reflect\",\r\n\t\"contemplate\",\r\n\t\"meditate\",\r\n\t\"ponder\",\r\n\t\"ruminate\",\r\n\t\"speculate\",\r\n\t\"imagine\",\r\n\t\"dream\",\r\n\t\"fantasize\",\r\n\t\"envision\",\r\n\t\"visualize\",\r\n\t\"picture\",\r\n\t\"see\",\r\n\t\"look\",\r\n\t\"observe\",\r\n\t\"watch\",\r\n\t\"view\",\r\n\t\"perceive\",\r\n\t\"notice\",\r\n\t\"recognize\",\r\n\t\"identify\",\r\n\t\"distinguish\",\r\n\t\"discern\",\r\n\t\"discriminate\",\r\n\t\"understand\",\r\n\t\"comprehend\",\r\n\t\"interpret\",\r\n\t\"decode\",\r\n\t\"decipher\",\r\n\t\"encode\",\r\n\t\"smooth\",\r\n\t\"modulate\",\r\n\t\"lattice\",\r\n\t\"modular\",\r\n\t\"modularity\",\r\n\t\"system\"\r\n];","// Shortcut to call upon a DOM object (the first object with this CSS selector) by a CSS selector (e.g., h1, #ID, .class, etc.)\r\nexport const $$ = (CSSSelector) => document.querySelector(CSSSelector); \r\n// Shortcut to call upon multiple DOM objects by a CSS selector (e.g., h1, .class, etc.)\r\nexport const $$all = (CSSSelector) => document.querySelectorAll(CSSSelector);\r\n\r\n// Shortcut for adding CSS classes\r\nexport const classAdd = (element, className) => element.classList.add(className);\r\n// Shortcut for removing CSS classes\r\nexport const classRemove = (element, className) => element.classList.remove(className);\r\n// Shortcut for removing all CSS classes\r\nexport const classRemoveAll = (element) => element.className = '';\r\n// Shortcut for toggling CSS classes - i.e., if the element doesn't have this class it'll be given it, and if it already does it'll be removed from it\r\nexport const classToggle = (element, className) => element.classList.toggle(className);\r\n// Shortcut for checking if an element has a certain CSS class\r\nexport const classHas = (element, className) => element.classList.contains(className);\r\n\r\n// Shortcut for adding event listeners\r\nexport const on = (element, event, callback) => element.addEventListener(event, callback);\r\n\r\n// Shortcut for console.log\r\nexport const log =  () => console.log;\r\n\r\n// Math shortcuts\r\n// Min and max\r\nexport const min = (numbers) => Math.min(numbers);\r\nexport const max = (numbers) => Math.max(numbers);\r\n// Round to the nearest, up and down\r\nexport const round = (number) => Math.round(number);\r\nexport const roundUp = (number) => Math.ceil(number);\r\nexport const roundDown = (number) => Math.floor(number);\r\n\r\n// Shortcut for changing a string into start case (This Is Start Case)\r\nexport function toStartCase(str) {\r\n\t// Creating an array of each word in the sentence\r\n\tlet splitStr = str.toLowerCase().split(' ');\r\n\r\n\tfor (var i = 0; i < splitStr.length; i++) {\r\n       // Capitalising the first letter of each word in the string\r\n       splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);     \r\n\t}\r\n\r\n\t// Rejoining the words together back into one string\r\n\tlet newStr = splitStr.join(\" \");\r\n\r\n\t// Returning the joined string\r\n\treturn newStr; \r\n}\r\n\r\n// Shortcut for adding a CSS rule (to the global scope)\r\nexport const addCSS = css => document.head.appendChild(document.createElement(\"style\")).innerHTML = css;\r\n\r\n// Get a URL param\r\nexport const searchParams = () => new URLSearchParams(window.location.search);\r\n\r\n\r\n// Show an element\r\nexport const show = element => classRemove(element, 'hidden');\r\n// Hide an element\r\nexport const hide = element => classAdd(element, 'hidden');\r\n\r\n\r\n// To randomly choose between a set of values\r\nexport const randomlyChoose = (...values) => values[roundDown(Math.random() * values.length)];\r\n\r\n\r\n// To check if an array only contains exactly the same values\r\nexport function containsExactSet(array, values) {\r\n\t// Check if lengths match first\r\n\tif (array.length !== values.length) return false;\r\n\t\r\n\t// Sort both arrays and check if they are identical\r\n\tconst sortedArray = array.slice().sort();\r\n\tconst sortedValues = values.slice().sort();\r\n  \r\n\treturn sortedArray.every((value, index) => value === sortedValues[index]);\r\n}\r\n// To check if an array contains all but not necessarily just those values\r\nexport function containsSet(array, values) {\r\n\treturn values.every(value => array.includes(value));\r\n}\r\n\r\n\r\n// To remove values from an array\r\nexport function removeValues(array, values) {\r\n\treturn array.filter(value => !values.includes(value));\r\n}\r\n\r\n\r\n// To convert a colour from RGB to hex\r\nexport function rgbToHex(r, g, b) {\r\n\treturn \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n}"],"names":["LetterGrid","_ref","reference","mode","startDisplayed","colour","program","initialLetter","props","svg","useRef","oNwV","oNwH","oNwArc","oNV","oNeV","oNeH","oNeArc","iNwV","iNwArc","iNV","iNeV","iNeArc","NwDiag","NeDiag","iWH","iEH","SwDiag","SeDiag","iSwV","iSwArc","iSV","iSeV","iSeArc","oSwV","oSwH","oSwArc","oSV","oSeV","oSeH","oSeArc","useEffect","controllerDur","controllerStartDisplayed","reset","programIndex","currentlyChanging","allSegments","currentPerm","colourCycle","COLOURS","red","orange","yellow","green","jade","aqua","blue","purple","pink","white","black","colourIndex","length","letterMaker","letter","prevPerm","arguments","undefined","newPerm","chooseState","possibleOutcomes","optionalVisibility","prevPermSegments","Object","keys","filter","key","bestOutcome","bestOutcomeCount","i","outcome","count","j","segment","includes","push","chosenOutcome","randomlyChoose","Math","random","chooseStatePresets","type","location","possibleOutcomesSegments","outcomeSegments","NorS","north","south","EorW","changeToLetter","current","existingPerm","assign","existingPermSegments","Array","isArray","flatMap","l","addedSegments","groupedAddedSegments","groupSegments","removedSegments","groupedRemovedSegments","keptSegments","visibleColours","eval","style","stroke","rgb","match","map","Number","colourHex","rgbToHex","availableColours","newColour","segmentsHierarchy","sort","a","b","indexOf","letterChangeTl","gsap","timeline","paused","dur","ease","group","to","duration","strokeDashoffset","onComplete","set","segmentDuration","tl","defaults","time","play","add","segments","groupedSegments","containsSet","removeValues","ungroupedSegments","newArray","handleKeyPress","e","window","addEventListener","removeEventListener","handleLetterChange","detail","setTimeout","handleLetterChangeStop","$$","_jsxs","className","ref","xmlns","viewBox","preserveAspectRatio","children","_jsx","pathLength","d","x1","y1","x2","y2","TRANSITION_DURATION","WORDS","CSSSelector","document","querySelector","$$all","querySelectorAll","classAdd","element","classList","classRemove","remove","_len","values","_key","number","floor","array","every","value","r","g","toString","slice"],"sourceRoot":""}