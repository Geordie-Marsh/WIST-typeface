{"version":3,"file":"static/js/988.a8ab68db.chunk.js","mappings":"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","sources":["components/Button.jsx","components/Icons.jsx","components/Input.jsx","components/Radio.jsx","components/Shapes.jsx","components/Pagination.jsx","pages/modes/Demos.jsx","pages/modes/Departures.jsx","pages/modes/PerfumeTv.jsx","pages/modes/Sentences.jsx","pages/modes/Tessellation.jsx","pages/modes/WordSnake.jsx"],"sourcesContent":["export function Major({ children, onClick }) {\r\n\treturn (\r\n\t\t<button className='Button Major' onClick={onClick}>\r\n\t\t\t<h2>{ children }</h2>\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport function Minor ({ children, dark = false, onClick }) {\r\n\treturn (\r\n\t\t<button className={'Button Minor ' + (dark === true ? \"dark\" : \"\")} onClick={onClick}>\r\n\t\t\t<p>{ children }</p>\r\n\t\t</button>\r\n\t);\r\n}","export function BackArrow({ className }) {\n\treturn (\n\t\t<svg className={\"Icon BackArrow \" + className } xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 53.207 100\">\n  \t\t\t<path d=\"M43.727,5.898c1.838,0,3.579.729,4.902,2.052,1.31,1.31,2.062,3.1,2.062,4.911,0,1.925-.77,3.728-2.114,4.964L16.249,50.152l-.05.09,32.43,32.443c1.338,1.337,2.105,3.127,2.105,4.911,0,1.981-.739,3.744-2.082,4.973-1.276,1.243-2.979,1.927-4.806,1.927-1.838,0-3.576-.685-4.893-1.929L6.429,60.13c-2.603-2.603-4.094-6.211-4.094-9.902,0-3.851,1.468-7.381,4.134-9.942L38.806,7.95c1.323-1.323,3.07-2.052,4.92-2.052h0Z\"/>\n\t\t</svg>\n\t);\n}\n\nexport function ForwardArrow({ className }) {\n\treturn (\n\t\t<svg className={\"Icon ForwardArrow \" + className } xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 53.207 100\">\n\t\t\t<path d=\"M9.341,94.496c-1.838,0-3.579-.729-4.902-2.052-1.31-1.31-2.062-3.1-2.062-4.911,0-1.925.77-3.728,2.114-4.964l32.328-32.327.05-.09L4.44,17.709c-1.338-1.337-2.105-3.127-2.105-4.911,0-1.981.739-3.744,2.082-4.973,1.276-1.243,2.979-1.927,4.806-1.927,1.838,0,3.576.685,4.893,1.929l32.523,32.437c2.603,2.603,4.094,6.211,4.094,9.902,0,3.851-1.468,7.381-4.134,9.942L14.262,92.444c-1.323,1.323-3.07,2.052-4.92,2.052h0Z\"/>\n\t\t</svg>\n\t);\n}\n\nexport function House({ className }) {\n\treturn (\n\t\t<svg className={\"Icon House \" + className } xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n\t\t\t<path d=\"M65.67,96.385c-5.866,0-10.639-4.577-10.64-10.204v-10.39c0-.346-.355-.894-1.311-.894h-7.431c-.954,0-1.31.548-1.31.894v10.39c0,5.627-4.773,10.204-10.64,10.204h-9.518c-5.866,0-10.639-4.577-10.64-10.204l-.004-27.673c-.03-2.557,2.033-4.674,4.598-4.712h.002c1.324,0,2.5.492,3.383,1.385.883.894,1.361,2.077,1.346,3.334l.004,27.667c0,.346.356.895,1.31.895h9.518c.954,0,1.31-.549,1.31-.895v-10.39c0-5.626,4.773-10.203,10.64-10.204h7.431c5.866,0,10.64,4.578,10.641,10.204v10.39c0,.346.355.895,1.31.895h9.518c.955,0,1.311-.549,1.311-.895v-27.673c-.031-2.557,2.031-4.674,4.597-4.712h.002c1.324,0,2.501.492,3.383,1.385.883.894,1.361,2.077,1.346,3.334v27.667c0,5.627-4.773,10.204-10.64,10.204h-9.518ZM5.79,53.712c-1.271,0-2.458-.503-3.344-1.414-1.786-1.84-1.747-4.794.086-6.585L40.844,7.397c2.44-2.439,5.707-3.782,9.199-3.782,3.496,0,6.763,1.345,9.203,3.786l38.226,38.23c1.83,1.787,1.868,4.741.082,6.581-.885.911-2.074,1.413-3.344,1.413h0c-1.266,0-2.451-.499-3.335-1.405L52.648,13.995c-.713-.713-1.637-1.105-2.603-1.105s-1.891.392-2.603,1.105L9.122,52.31c-.881.903-2.066,1.402-3.332,1.402Z\"/>\n\t\t</svg>\n\t);\n}\n\nexport function Settings({ className }) {\n\treturn (\n\t\t<svg className={\"Icon Settings \" + className } xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n\t\t\t<path d=\"M91.382,36.013h-2.851c-.395-1.154-.856-2.284-1.381-3.385l2.005-2.005c2.964-2.95,2.976-7.745.026-10.709-.009-.009-.017-.017-.026-.026l-8.909-8.909c-2.99-2.902-7.745-2.902-10.735,0l-2.005,2.005c-1.101-.525-2.231-.986-3.385-1.381v-2.985c0-4.207-3.41-7.617-7.617-7.618-.03,0-.06,0-.09,0h-12.829c-4.189.025-7.573,3.428-7.573,7.617v2.851c-1.154.395-2.284.856-3.385,1.381l-2.005-2.005c-2.95-2.964-7.745-2.976-10.709-.026-.009.009-.017.017-.026.026l-8.909,8.909c-2.964,2.95-2.976,7.745-.026,10.709.009.009.017.017.026.026l2.005,2.005c-.525,1.101-.986,2.231-1.381,3.385h-2.985c-4.207,0-7.617,3.41-7.618,7.617,0,.03,0,.06,0,.09v12.829c.025,4.189,3.428,7.573,7.617,7.573h2.851c.395,1.154.856,2.284,1.381,3.385l-2.005,2.005c-2.964,2.95-2.976,7.745-.026,10.709.009.009.017.017.026.026l8.909,8.909c2.95,2.964,7.745,2.976,10.709.026.009-.009.017-.017.026-.026l2.005-2.005c1.101.525,2.231.986,3.385,1.381v2.851c-.074,4.206,3.276,7.676,7.482,7.75.075.001.15.002.224,0h12.829c4.189-.025,7.573-3.428,7.573-7.617v-2.851c1.154-.395,2.284-.856,3.385-1.381l2.005,2.005c2.99,2.902,7.745,2.902,10.735,0l8.909-8.909c2.964-2.95,2.976-7.745.026-10.709-.009-.009-.017-.017-.026-.026l-2.005-2.005c.525-1.101.986-2.231,1.381-3.385h2.851c4.206.074,7.676-3.276,7.75-7.482.001-.075.002-.15,0-.224v-12.829c-.024-4.189-3.428-7.573-7.617-7.573ZM90.091,55.078h-2.45c-3.295.02-6.213,2.132-7.261,5.256-.446,1.32-.967,2.614-1.559,3.875-1.506,2.957-.95,6.546,1.381,8.909l1.737,1.737-7.172,7.172-1.737-1.737c-2.369-2.318-5.95-2.873-8.909-1.381-1.243.6-2.522,1.121-3.831,1.559-3.124,1.048-5.237,3.966-5.256,7.261v2.361h-10.112v-2.45c-.02-3.295-2.132-6.213-5.256-7.261-1.308-.439-2.588-.959-3.831-1.559-2.957-1.506-6.546-.95-8.909,1.381l-1.737,1.737-7.127-7.172,1.737-1.737c2.331-2.363,2.887-5.952,1.381-8.909-.592-1.261-1.113-2.555-1.559-3.875-1.048-3.124-3.966-5.237-7.261-5.256h-2.45v-10.067h2.45c3.295-.02,6.213-2.132,7.261-5.256.446-1.32.967-2.614,1.559-3.875,1.506-2.957.95-6.546-1.381-8.909l-1.737-1.737,7.172-7.083,1.737,1.737c2.363,2.331,5.952,2.887,8.909,1.381,1.243-.6,2.522-1.121,3.831-1.559,3.124-1.048,5.237-3.966,5.256-7.261v-2.45h10.156v2.45c.02,3.295,2.132,6.213,5.256,7.261,1.308.439,2.588.959,3.831,1.559,2.959,1.492,6.54.937,8.909-1.381l1.737-1.737,7.172,7.172-1.737,1.737c-2.331,2.363-2.887,5.952-1.381,8.909.592,1.261,1.113,2.555,1.559,3.875,1.048,3.124,3.966,5.237,7.261,5.256h2.361v10.067Z\"/>\n  \t\t\t<path d=\"M50,25.5c-13.531,0-24.5,10.969-24.5,24.5s10.969,24.5,24.5,24.5,24.5-10.969,24.5-24.5c-.025-13.521-10.979-24.475-24.5-24.5ZM50,65.591c-8.611,0-15.591-6.98-15.591-15.591s6.98-15.591,15.591-15.591,15.591,6.98,15.591,15.591-6.98,15.591-15.591,15.591Z\"/>\n\t\t</svg>\n\t);\n}\n\nexport function History({ className }) {\n\treturn (\n\t\t<svg className={\"Icon History \" + className } xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n\t\t\t<path d=\"M18.809,88.318c8.663,6.956,19.442,10.744,30.552,10.733,1.831.007,3.66-.097,5.478-.312,26.951-2.395,46.857-26.185,44.461-53.136C96.905,18.654,73.115-1.252,46.165,1.143c-.718.064-1.434.143-2.148.239-12.691,1.337-24.342,7.627-32.423,17.503l-.713-4.944c-.357-2.46-2.64-4.165-5.1-3.808-2.46.357-4.165,2.64-3.808,5.1l2.539,17.013c.092.129.196.248.312.356-.025.237-.025.476,0,.713.135.307.315.592.534.846l.534.534s.267.356.445.445c.148.115.313.205.49.267h0c.469.186.966.292,1.47.312h0c.37.044.744.044,1.113,0l16.122-3.919c2.383-.61,3.82-3.036,3.21-5.419-.001-.005-.003-.01-.004-.015-.689-2.295-3.07-3.633-5.389-3.029l-4.721,1.024c6.59-7.944,16.015-13.009,26.277-14.118,21.914-3.135,42.221,12.088,45.357,34.002,3.135,21.914-12.088,42.221-34.002,45.357-.813.116-1.629.208-2.447.274-22.006,2.41-41.799-13.475-44.209-35.481-.005-.05-.011-.099-.016-.149-.365-2.302-2.443-3.933-4.765-3.741-2.444.278-4.199,2.485-3.921,4.929,0,.005.001.01.002.014,1.34,12.907,7.786,24.743,17.904,32.868Z\"/>\n\t\t\t<path d=\"M49.361,20.177c-2.46,0-4.454,1.994-4.454,4.454v25.431c.006,1.355.629,2.634,1.692,3.474l16.122,12.738c1.921,1.516,4.706,1.198,6.235-.713,1.526-1.91,1.228-4.692-.668-6.235l-14.475-11.402v-23.293c0-2.46-1.994-4.454-4.454-4.454Z\"/>\n\t\t</svg>\n\t);\n}\n\nexport function ThreeDots({ className }) {\n\treturn (\n\t\t<svg className={\"Icon ThreeDots \" + className } xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n\t\t\t<circle cx=\"50\" cy=\"50\" r=\"6.804\"/>\n\t\t\t<circle cx=\"73.148\" cy=\"50\" r=\"6.804\"/>\n\t\t\t<circle cx=\"26.852\" cy=\"50\" r=\"6.804\"/>\n\t\t</svg>\n\t);\n}\n\n","// Imports\r\n\t// Importing React\r\n\timport { useEffect } from \"react\";\r\n\r\n\t// Importing defs\r\n\timport { $$ } from \"../defs\";\r\n\r\nexport function Text({ value, placeholder, onChange, minLength, maxLength }) {\r\n\t// If the value is outside the min/max length, add a class to the input\r\n\t// to show the user that the input is invalid\r\n\tlet inputClass = '';\r\n\tif (value.length < minLength || value.length > maxLength) {\r\n\t\tinputClass = 'invalid';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='Input Text'>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value)}\r\n\t\t\t\tminLength={minLength}\r\n\t\t\t\tmaxLength={maxLength}\r\n\t\t\t\tclassName={inputClass}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport function Number({ value, placeholder, onChange, min, max }) {\r\n\t// If the value is outside the min/max length, add a class to the input\r\n\t// to show the user that the input is invalid\r\n\tlet inputClass = '';\r\n\tif (value < min || value > max) {\r\n\t\tinputClass = 'invalid';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='Input Number'>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"number\"\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value)}\r\n\t\t\t\tmin={min}\r\n\t\t\t\tmax={max}\r\n\t\t\t\tclassName={inputClass}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport function TextArea({ value, placeholder, onChange, minLength, maxLength }) {\r\n\t// If the value is outside the min/max length, add a class to the input\r\n\t// to show the user that the input is invalid\r\n\tlet inputClass = '';\r\n\tif (value.length < minLength || value.length > maxLength) {\r\n\t\tinputClass = 'invalid';\r\n\t}\r\n\r\n\t// Function to auto grow the textarea\r\n\tfunction autoGrow() {\r\n\t\tlet element = $$(\".TextArea textarea\");\r\n\t\telement.style.height = \"10px\";\r\n\t\telement.style.height = (element.scrollHeight + 4) + \"px\";\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\t// Add an event listener to the textarea to auto grow it\r\n\t\twindow.addEventListener(\"textareaUpdated\", autoGrow);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className='Input TextArea'>\r\n\t\t\t<textarea \r\n\t\t\t\tvalue={value}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\tonChange(e.target.value);\r\n\t\t\t\t\tautoGrow();\r\n\t\t\t\t}}\r\n\t\t\t\tminLength={minLength}\r\n\t\t\t\tmaxLength={maxLength}\r\n\t\t\t\tclassName={inputClass}\r\n\t\t\t\tonInput={autoGrow}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}","// Imports\r\n\t// Importing React\r\n\timport React, { useState } from 'react';\r\n\r\n\r\n\r\nexport default function Radio({ options, selectedValue, onChange }) {\r\n\tconst [hoveredOption, setHoveredOption] = useState(null);\r\n\r\n\tconst handleOptionClick = (name) => {\r\n\t\tif (onChange) {\r\n\t\t\tonChange(name);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleMouseEnter = (name) => {\r\n\t\tsetHoveredOption(name);\r\n\t}\r\n\r\n\tconst handleMouseLeave = () => {\r\n\t\tsetHoveredOption(null);\r\n\t}\r\n\t\r\n\r\n\r\n\treturn (\r\n\t\t<div className='Radio d-flex jc-btwn gap--xs'>\r\n\t\t\t{ options.map(option => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tkey={option.name}\r\n\t\t\t\t\tclassName={`Radio__option ${selectedValue === option.name ? 'selected' : ''} ${hoveredOption === option.name ? 'hovered ' + option.name : ''}`}\r\n\t\t\t\t\tonClick={() => handleOptionClick(option.name)}\r\n\t\t\t\t\tonMouseEnter={ () => handleMouseEnter(option.name) }\r\n\t\t\t\t\tonMouseLeave={ handleMouseLeave }\r\n\t\t\t\t>\r\n\t\t\t\t\t<p >{ option.label }</p>\r\n\t\t\t\t</div>\r\n\t\t\t)) }\r\n\t\t</div>\r\n\t);\r\n}","export function Circle() {\r\n\treturn (\r\n\t\t<svg className=\"Shape Circle\" viewBox=\"0 0 100 100\">\r\n\t\t\t<circle cx=\"50\" cy=\"50\" r=\"45\" />\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\nexport function Square() {\r\n\treturn (\r\n\t\t<svg className=\"Shape Square\" viewBox=\"0 0 100 100\">\r\n\t\t\t<rect x=\"5\" y=\"5\" width=\"90\" height=\"90\" />\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\nexport function Triangle() {\r\n\treturn (\r\n\t\t<svg className=\"Shape Triangle\" viewBox=\"0 0 100 100\">\r\n\t\t\t<polygon points=\"50,5 95,95 5,95\" />\r\n\t\t</svg>\r\n\t)\r\n}","// Imports\r\n\t// Importing React\r\n\timport React, { useState } from 'react';\r\n\r\n\t// Importing components\r\n\timport * as Icons from '../components/Icons';\r\n\timport * as Shapes from '../components/Shapes';\r\n\r\n\r\n\r\nexport default function Pagination({ options, selectedValue, onChange }) {\r\n\tconst [hoveredOption, setHoveredOption] = useState(null);\r\n\r\n\tconst handleOptionClick = (name) => {\r\n\t\tif (name === 'back') {\r\n\t\t\t// Go to the previous option\r\n\t\t\tconst currentIndex = options.findIndex(option => option.name === selectedValue);\r\n\t\t\tconst newIndex = currentIndex - 1;\r\n\t\t\tif (newIndex < 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tonChange(options[newIndex].name);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (name === 'forward') {\r\n\t\t\t// Go to the next option\r\n\t\t\tconst currentIndex = options.findIndex(option => option.name === selectedValue);\r\n\t\t\tconst newIndex = currentIndex + 1;\r\n\t\t\tif (newIndex >= options.length) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tonChange(options[newIndex].name);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (onChange) {\r\n\t\t\tonChange(name);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleMouseEnter = (name) => {\r\n\t\tsetHoveredOption(name);\r\n\t}\r\n\r\n\tconst handleMouseLeave = () => {\r\n\t\tsetHoveredOption(null);\r\n\t}\r\n\r\n\t/* Note:\r\n\tthe options will looks something like this:\r\n\t[\r\n\t\t{ name: \"tessellation\", label: \"Tessellation\" },\r\n\t\t{ name: \"sentences\", label: \"Sentences\" },\r\n\t]\r\n\t*/\r\n\t\r\n\r\n\r\n\treturn (\r\n\t\t<div className='Pagination d-flex jc-btwn gap--xs'>\r\n\t\t\t<div\r\n\t\t\t\tclassName='Pagination__arrow'\r\n\t\t\t\tonClick={ () => handleOptionClick('back') }\r\n\t\t\t>\r\n\t\t\t\t<Icons.BackArrow />\r\n\t\t\t</div>\r\n\t\t\t{ options.map(option => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tkey={option.name}\r\n\t\t\t\t\tclassName={`Pagination__option ${selectedValue === option.name ? 'selected' : ''} ${hoveredOption === option.name ? 'hovered ' + option.name : ''}`}\r\n\t\t\t\t\tonClick={() => handleOptionClick(option.name)}\r\n\t\t\t\t\tonMouseEnter={ () => handleMouseEnter(option.name) }\r\n\t\t\t\t\tonMouseLeave={ handleMouseLeave }\r\n\t\t\t\t>\r\n\t\t\t\t\t<Shapes.Circle />\r\n\t\t\t\t</div>\r\n\t\t\t)) }\r\n\t\t\t<div\r\n\t\t\t\tclassName='Pagination__arrow'\r\n\t\t\t\tonClick={ () => handleOptionClick('forward') }\r\n\t\t\t>\r\n\t\t\t\t<Icons.ForwardArrow />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}","// Imports\r\n\t// Importing React\r\n\timport { useRef, useState } from 'react';\r\n\timport { Outlet, Link } from 'react-router-dom';\r\n\r\n\t// Importing demo pages\r\n\timport Tessellation from './Tessellation';\r\n\timport Sentences from './Sentences';\r\n\timport WordSnake from './WordSnake';\r\n\timport DeparturesBoard from './Departures';\r\n\timport Perfume from './PerfumeTv';\r\n\r\n\t// Importing components\r\n\timport Pagination from '../../components/Pagination';\r\n\timport * as Icons from '../../components/Icons';\r\n\r\n\r\n\r\nexport default function Demos() {\r\n\tconst [currentDemo, setCurrentDemo] = useState(\"tessellation\");\r\n\tconst demoOptions = [ // Options\r\n\t\t{ name: \"tessellation\", label: \"Tessellation\" },\r\n\t\t{ name: \"sentences\", label: \"Sentences\" },\r\n\t\t{ name: \"word-snake\", label: \"Word snake\" },\r\n\t\t{ name: \"departures-board\", label: \"Departures board\" },\r\n\t\t{ name: \"perfume-tv-ad\", label: \"Perfume TV ad\" },\r\n\t];\r\n\tconst handleDemoChange = (name) => {\r\n\t\tsetCurrentDemo(name);\r\n\t\t// Adding this page to the shown pages\r\n\t\tshownPages.current.push(name);\r\n\t};\r\n\r\n\tconst shownPages = useRef([]);\r\n\r\n\r\n\r\n\t\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"Demos\">\r\n\t\t\t{ currentDemo === \"tessellation\" && <Tessellation demo={ true } /> }\r\n\t\t\t{ currentDemo === \"sentences\" && <Sentences demo={ true } alreadyShown={\r\n\t\t\t\t// If \"sentences\" is in shownPages at least twice\r\n\t\t\t\tshownPages.current.filter(page => page === \"sentences\").length > 1\r\n\t\t\t} /> }\r\n\t\t\t{ currentDemo === \"word-snake\" && <WordSnake demo={ true } alreadyShown={\r\n\t\t\t\t// If \"sentences\" is in shownPages at least twice\r\n\t\t\t\tshownPages.current.filter(page => page === \"sentences\").length > 1\r\n\t\t\t} /> }\r\n\t\t\t{ currentDemo === \"departures-board\" && <DeparturesBoard /> }\r\n\t\t\t{ currentDemo === \"perfume-tv-ad\" && <Perfume /> }\r\n\t\t\t\r\n\r\n\t\t\t<div className='title-cont d-flex flex-h jc-c ai-c'>\r\n\t\t\t\t<h1>\r\n\t\t\t\t\t{ currentDemo === \"tessellation\" && \"Mode: Tessellation\" }\r\n\t\t\t\t\t{ currentDemo === \"sentences\" && \"Mode: Sentences\" }\r\n\t\t\t\t\t{ currentDemo === \"word-snake\" && \"Mode: Word snake\" }\r\n\t\t\t\t\t{ currentDemo === \"departures-board\" && \"Mock-up: Departures board\" }\r\n\t\t\t\t\t{ currentDemo === \"perfume-tv-ad\" && \"Mock-up: Perfume TV ad\" }\r\n\t\t\t\t</h1>\r\n\t\t\t</div>\r\n\r\n\t\t\t<Pagination \r\n\t\t\t\toptions={ demoOptions }\r\n\t\t\t\tselectedValue={ currentDemo }\r\n\t\t\t\tonChange={ handleDemoChange }\r\n\t\t\t/>\r\n\r\n\t\t\t<div className='explore-button-cont'>\r\n\t\t\t\t<Link to={\r\n\t\t\t\t\t(currentDemo === \"tessellation\" && \"/playground/tessellation\") ||\r\n\t\t\t\t\t(currentDemo === \"sentences\" && \"/playground/sentences\") ||\r\n\t\t\t\t\t(currentDemo === \"word-snake\" && \"/playground/word-snake\") ||\r\n\t\t\t\t\t(currentDemo === \"departures-board\" && \"/mock-up/departures-board\") ||\r\n\t\t\t\t\t(currentDemo === \"perfume-tv-ad\" && \"/mock-up/perfume-tv-ad\")\r\n\t\t\t\t}><p>Explore <Icons.ForwardArrow /></p></Link>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","// Imports\r\n\t// Importing assets\r\n\timport Video from '../../assets/mockup-departures.mp4';\r\n\r\n\r\n\r\nexport default function Departures() {\r\n\treturn (\r\n\t\t<div className=\"Departures mode-cont\">\r\n\t\t\t<video \r\n\t\t\t\tsrc={ Video }\r\n\t\t\t\tcontrols\r\n\t\t\t\tloop\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}","// Imports\r\n\t// Importing assets\r\n\timport Video from '../../assets/mockup-perfume-tv-ad.mp4';\r\n\r\n\r\n\r\nexport default function PerfumeTv() {\r\n\treturn (\r\n\t\t<div className=\"PerfumeTv mode-cont\">\r\n\t\t\t<video \r\n\t\t\t\tsrc={ Video }\r\n\t\t\t\tcontrols\r\n\t\t\t\tloop\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}","// Imports\r\n\t// Importing React\r\n\timport { useEffect, useState, useRef } from 'react';\r\n\timport { useLocation } from \"react-router-dom\";\r\n\r\n\t// Importing gsap\r\n\timport { gsap } from 'gsap';\r\n\r\n\t// Importing components\r\n\timport LetterGrid from '../../components/LetterGrid.jsx';\r\n\timport Radio from '../../components/Radio.jsx';\r\n\timport * as Button from '../../components/Button.jsx';\r\n\timport * as Input from '../../components/Input';\r\n\r\n\t// Importing defs\r\n\timport { $$, max, min } from '../../defs.js';\r\n\r\n\t// Importing constants\r\n\timport { TRANSITION_DURATION } from '../../constants.js';\r\nimport { div } from 'framer-motion/client';\r\n\r\n\r\n\r\nexport default function Sentences({ demo = false, alreadyShown = false }) {\r\n\tconst location = useLocation();\r\n\r\n\t// Input functionality\r\n\tconst [inputNumber, setInputNumber] = useState(9); // Default value\r\n\tconst handleNumberChange = (newValue) => {\r\n\t\tsetInputNumber(newValue);\r\n\t};\r\n\t// The number validity\r\n\tconst [validNumber, setValidNumber] = useState(true);\r\n\tconst handleNumberValidity = (newValue) => {\r\n\t\tsetValidNumber(newValue);\r\n\t};\r\n\t// The min and max values for the number input\r\n\tconst minNumber = 7;\r\n\tconst maxNumber = 11;\r\n\r\n\tconst [inputSentence, setInputSentence] = useState(\r\n\t\t( demo === true ) ? \"Letters are to words. And words are to sentences. And sentences are to ideas. And ideas are to being human.\" : \"\"\r\n\t); // Default value\r\n\tconst handleSentenceChange = (newValue) => {\r\n\t\tsetInputSentence(newValue);\r\n\t};\r\n\t// The sentence validity\r\n\tconst [validSentence, setValidSentence] = useState(true);\r\n\tconst handleSentenceValidity = (newValue) => {\r\n\t\tsetValidSentence(newValue);\r\n\t};\r\n\t// The min and max values for the sentence input\r\n\tconst minSentence = 12;\r\n\tconst maxSentence = 200;\r\n\t// The preset sentences\r\n\tconst presetSentences = [\r\n\t\t\"Letters are to words. And words are to sentences. And sentences are to ideas. And ideas are to being human.\",\r\n\t\t\"I see a little silhouetto of a man, Scaramouche, Scaramouche, will you do the Fandango? Thunderbolt and lightning, very, very frightening me. (Galileo)\",\r\n\t\t\"There's a starman waiting in the sky. He'd like to come and meet us but he thinks he'd blow our minds.\",\r\n\t\t\"If you liked it then you shoulda put a ring on it. Don't be mad once you see that he want it.\",\r\n\t\t\"Don't go wasting your emotion. Lay all your love on me. Don't go sharing your devotion. Lay all your love on me.\",\r\n\t\t\"I'm that bad type, make your mama sad type, make your girlfriend mad tight, might seduce your dad type, I'm the bad guy... duh!\",\r\n\t\t\"I'm a Barbie girl, in the Barbie world. Life in plastic, it's fantastic. You can brush my hair, undress me everywhere. Imagination, life is your creation!\"\r\n\t];\r\n\tconst [currentPreset, setCurrentPreset] = useState(0);\r\n\r\n\t// Radio functionality\r\n\t// Colour radio\r\n\tconst [radioColour, setRadioColour] = useState(\r\n\t\t( demo === true ) ? \"morning\" : \"rainbow\"\r\n\t); // Default value\r\n\tconst colourOptions = [ // Options\r\n\t\t{ name: \"black\", label: \"Black\" },\r\n\t\t{ name: \"rainbow\", label: \"Rainbow\" },\r\n\t\t{ name: \"morning\", label: \"Morning\" },\r\n\t\t{ name: \"daylight\", label: \"Daylight\" },\r\n\t\t{ name: \"sunset\", label: \"Sunset\" },\r\n\t\t{ name: \"twilight\", label: \"Twilight\" },\r\n\t];\r\n\tconst handleColourChange = (name) => {\r\n\t\tsetRadioColour(name);\r\n\t};\r\n\t// Gap radio\r\n\tconst [radioGap, setRadioGap] = useState(\r\n\t\t( demo === true ) ? \"none\" : \"small\"\r\n\t); // Default value\r\n\tconst gapOptions = [ // Options\r\n\t\t{ name: \"none\", label: \"None\" },\r\n\t\t{ name: \"small\", label: \"Small\" },\r\n\t\t{ name: \"large\", label: \"Large\" }\r\n\t];\r\n\tconst handleGapChange = (name) => {\r\n\t\tsetRadioGap(name);\r\n\t}\r\n\r\n\t// The items\r\n\tconst [items, setItems] = useState(null);\r\n\r\n\t// The sentence\r\n\tconst sentence = useRef(\"\");\r\n\r\n\t// The sentence as an array\r\n\tlet sentenceArray = [];\r\n\r\n\t// The program\r\n\tconst program = useRef([]);\r\n\r\n\t// The index of the current instance\r\n\tconst instanceIndex = useRef(0);\r\n\t// The index of the current letter\r\n\tconst letterIndex = useRef(0);\r\n\t// The flag for a pause\r\n\tconst pause = useRef(false);\r\n\r\n\t// The interval\r\n\tconst interval = useRef(null);\r\n\r\n\t// The number of displayed letters\r\n\tconst noOfDisplayedLetters = useRef(7);\r\n\r\n\t// The duration of an entire instance (in seconds)\r\n\tconst instanceDuration = 2;\r\n\r\n\t// The variable to store the letter elements\r\n\tlet letterElements = [];\r\n\r\n\t// The initialised flag\r\n\tconst initialised = useRef(false);\r\n\r\n\r\n\r\n\t// Function to initialise the mode\r\n\tfunction init() {\r\n\t\tif (!demo) {\r\n\t\t\t// Pushing the history state\r\n\t\t\twindow.history.pushState({}, \"\", \"#\" + location.pathname);\r\n\r\n\t\t\tgsap.to(\".options-cont\", {\r\n\t\t\t\topacity: 0,\r\n\t\t\t\tduration: TRANSITION_DURATION,\r\n\t\t\t\tonComplete: () => {\r\n\t\t\t\t\t$$(\".options-cont\").style.display = \"none\";\r\n\r\n\t\t\t\t\t$$(\".letters-cont\").style.display = \"flex\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// Ensuring the letter cont is visible\r\n\t\t\t$$(\".letters-cont\").style.opacity = 1;\r\n\r\n\t\t\t// Broadcasting that the settings are now inactive\r\n\t\t\twindow.dispatchEvent(new CustomEvent('settingsInactive'));\r\n\t\t} else {\r\n\t\t\t$$(\".letters-cont\").style.display = \"flex\";\r\n\t\t}\r\n\r\n\t\t\r\n\t\t// Checking if the number is valid\r\n\t\tif (inputNumber < minNumber || inputNumber > maxNumber) {\r\n\t\t\tsetValidNumber(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Checking if the sentence is valid\r\n\t\tif (inputSentence.length < minSentence || inputSentence.length > maxSentence) {\r\n\t\t\tsetValidSentence(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Setting the initialised flag\r\n\t\tinitialised.current = true;\r\n\r\n\t\t// Getting the sentence\r\n\t\tsentence.current = inputSentence;\r\n\t\t\r\n\t\t// Getting the number of displayed letters\r\n\t\tnoOfDisplayedLetters.current = inputNumber;\r\n\r\n\t\t// Setting up the sentence array\r\n\t\tsentenceArray = sentence.current.split('');\r\n\r\n\r\n\r\n\t\t// Creating the letter elements\r\n\t\tlet paddingClass = (radioGap === \"small\") ? \"pad--small\" : (radioGap === \"large\") ? \"pad--large\" : \"\";\r\n\r\n\t\tfor (let i = 0; i < noOfDisplayedLetters.current; i++) {\r\n\t\t\t// Creating the letter elements\r\n\t\t\tletterElements.push(\r\n\t\t\t\t<div className={\"letter-cont \" + paddingClass} key={ i }>\r\n\t\t\t\t\t<LetterGrid \r\n\t\t\t\t\t\treference={ \"letter\" + i }\r\n\t\t\t\t\t\tmode='sentences'\r\n\t\t\t\t\t\tcolour={ radioColour }\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\t// Splitting the sentence into words\r\n\t\tlet words = sentence.current.split(\" \");\r\n\t\t// Converting the words into arrays of letters\r\n\t\twords = words.map(word => word.split(\"\"));\r\n\r\n\t\t// Making each instance and adding it to the program\r\n\t\twhile (words.length > 0) {\r\n\t\t\tlet instance = [];\r\n\r\n\t\t\t// Getting the length of this word\r\n\t\t\tlet wordLength = words[0].length;\r\n\r\n\t\t\t// Storing which words to remove from the wordlist\r\n\t\t\tlet wordsToRemove = [];\r\n\r\n\t\t\t// Check if this word can fit wholely into the instance\r\n\t\t\tif (wordLength <= noOfDisplayedLetters.current) {\r\n\t\t\t\t// Adding the word to the instance\r\n\t\t\t\twords[0].forEach(letter => {\r\n\t\t\t\t\tinstance.push(letter);\r\n\t\t\t\t});\r\n\t\t\t\twordsToRemove.push(0);\r\n\r\n\t\t\t\t// Seeing if any following words will also fit into the instance\r\n\t\t\t\tfor (let i = 1; i < words.length; i++) {\r\n\t\t\t\t\tconst word = words[i];\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst potentialNewLength = instance.length + 1 + word.length;\r\n\r\n\t\t\t\t\tif (potentialNewLength <= noOfDisplayedLetters.current) {\r\n\t\t\t\t\t\tinstance.push(\" \");\r\n\t\t\t\t\t\tword.forEach(letter => {\r\n\t\t\t\t\t\t\tinstance.push(letter);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\twordsToRemove.push(i);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Adding in trailing spaces\r\n\t\t\t\twhile (instance.length < noOfDisplayedLetters.current) {\r\n\t\t\t\t\tinstance.push(\" \");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// If the word is longer than the number of letters in each instance, remove the first x number of letters from the word\r\n\t\t\t\tlet word = words[0];\r\n\t\t\t\tlet instanceLetters = word.slice(0, noOfDisplayedLetters.current);\r\n\t\t\t\tinstance.push(...instanceLetters);\r\n\t\t\t\twords[0] = word.slice(noOfDisplayedLetters.current);\r\n\t\t\t}\r\n\r\n\t\t\t// Removing the words that have been added to the instance\r\n\t\t\twords = words.filter((word, index) => !wordsToRemove.includes(index));\r\n\r\n\t\t\t// Adding the instance to the program\r\n\t\t\tprogram.current.push(instance);\r\n\t\t}\r\n\r\n\t\t// Setting the items\r\n\t\tsetItems(letterElements);\r\n\r\n\t\tif (!alreadyShown) {\r\n\t\t\t// Setting up the interval\r\n\t\t\tinterval.current = setInterval(() => {\r\n\t\t\t\t// Checking if the pause flag is set\r\n\t\t\t\tif (pause.current) {\r\n\t\t\t\t\tpause.current = false;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Getting the current instance\r\n\t\t\t\tlet instance = program.current[instanceIndex.current];\r\n\r\n\t\t\t\t// Setting the letter\r\n\t\t\t\t// Broadcast the letter to the LetterGrid component\r\n\t\t\t\twindow.dispatchEvent(\r\n\t\t\t\t\tnew CustomEvent(('letterChangesentencesletter' + letterIndex.current), {\r\n\t\t\t\t\t\tdetail: instance[letterIndex.current]\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Incrementing the letter index\r\n\t\t\t\tletterIndex.current++;\r\n\r\n\t\t\t\t// Resetting the letter index if it goes over the number of letters in the instance\r\n\t\t\t\tif (letterIndex.current >= noOfDisplayedLetters.current) {\r\n\t\t\t\t\tletterIndex.current = 0;\r\n\r\n\t\t\t\t\t// Incrementing the instance index\r\n\t\t\t\t\tinstanceIndex.current++;\r\n\r\n\t\t\t\t\t// Pausing the interval for one round\r\n\t\t\t\t\tpause.current = true;\r\n\t\t\t\t}\r\n\t\t\t\t// Resetting the instance index if it goes over the number of instances\r\n\t\t\t\tif (instanceIndex.current >= program.current.length) {\r\n\t\t\t\t\tinstanceIndex.current = 0;\r\n\t\t\t\t}\r\n\t\t\t}, instanceDuration * 1000 / noOfDisplayedLetters.current);\r\n\t\t}\r\n\t}\t\r\n\r\n\tfunction initSettings() {\r\n\t\t// Setting the initialised flag\r\n\t\tinitialised.current = false;\r\n\r\n\t\t// Broadcasting that the settings are now active\r\n\t\twindow.dispatchEvent(new CustomEvent('settingsActive'));\r\n\r\n\t\t// Hiding the items\r\n\t\tgsap.to(\".letters-cont\", {\r\n\t\t\topacity: 0,\r\n\t\t\tduration: TRANSITION_DURATION,\r\n\t\t\tonComplete: () => {\r\n\t\t\t\t$$(\".letters-cont\").style.display = \"none\";\r\n\t\t\t\tsetItems(null);\r\n\r\n\t\t\t\t// Clearing the interval\r\n\t\t\t\tclearInterval(interval.current);\r\n\r\n\t\t\t\t// Resetting the variables\r\n\t\t\t\tsentence.current = \"\";\r\n\t\t\t\tsentenceArray = [];\r\n\t\t\t\tprogram.current = [];\r\n\t\t\t\tinstanceIndex.current = 0;\r\n\t\t\t\tletterIndex.current = 0;\r\n\t\t\t\tpause.current = false;\r\n\t\t\t\tletterElements = [];\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Showing the options\r\n\t\t$$(\".options-cont\").style.display = \"flex\";\r\n\t\tgsap.to(\".options-cont\", {\r\n\t\t\topacity: 1,\r\n\t\t\tdelay: TRANSITION_DURATION * 1.5,\r\n\t\t\tduration: TRANSITION_DURATION\r\n\t\t});\r\n\t}\r\n\r\n\tfunction initPresets() {\r\n\t\t// Setting the sentence\r\n\t\tsetInputSentence(presetSentences[currentPreset]);\r\n\r\n\t\t// Incrementing the current preset\r\n\t\tsetCurrentPreset((currentPreset + 1) % presetSentences.length);\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\t// Make the textarea input detect the change\r\n\t\t\twindow.dispatchEvent(new Event('textareaUpdated'));\r\n\t\t}, 4);\r\n\t}\r\n\r\n\r\n\r\n\tfunction handlePopstate() {\r\n\t\tif (initialised.current) {\r\n\t\t\t// Reloading the page\r\n\t\t\t// window.location.reload();\r\n\t\t\tinitSettings();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\t// If the demo is active, initialise the mode\r\n\t\tif (demo === true) {\r\n\t\t\tconsole.log(alreadyShown);\r\n\t\t\tinit();\r\n\t\t}\r\n\r\n\r\n\t\t// Adding the event lister for the popstate event\r\n\t\twindow.addEventListener(\"popstate\", handlePopstate);\r\n\r\n\t\t// Adding the event listener for the settingsClicked event\r\n\t\twindow.addEventListener(\"settingsClicked--sentences\", initSettings);\r\n\r\n\t\t// Cleanup\r\n\t\treturn () => {\r\n\t\t\t// Removing the event listeners\r\n\t\t\twindow.removeEventListener(\"popstate\", handlePopstate);\r\n\r\n\t\t\t// Removing the event listener for the settingsClicked event\r\n\t\t\twindow.removeEventListener(\"settingsClicked--sentences\", initSettings);\r\n\t\t};\r\n\t}, []);\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div className='Sentences mode-cont'>\r\n\t\t\t<div className='letters-cont'>\r\n\t\t\t\t{ items }\r\n\t\t\t</div>\r\n\r\n\t\t\t{ demo === false && \r\n\t\t\t\t<div className='options-cont d-flex flex-v ai-c gap--md'>\r\n\t\t\t\t\t<h1>Sentences options</h1>\r\n\r\n\t\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t\t<h2>Number of letters displayed</h2>\r\n\t\t\t\t\t\t<Input.Number \r\n\t\t\t\t\t\t\tplaceholder=\"7\"\r\n\t\t\t\t\t\t\tvalue={ inputNumber }\r\n\t\t\t\t\t\t\tonChange={ handleNumberChange }\r\n\t\t\t\t\t\t\tmin={ minNumber }\r\n\t\t\t\t\t\t\tmax={ maxNumber }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// If the number is too long or too short, show an error message\r\n\t\t\t\t\t\t\t((inputNumber < minNumber || inputNumber > maxNumber) && !validNumber) ? <p className='numberInputError'>(Number must be between {minNumber} and {maxNumber})</p> : ''\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t\t<h2>Sentence to print</h2>\r\n\t\t\t\t\t\t<div className='sentence-input-cont d-flex flex-h jc-btwn ai-c gap--sm'>\r\n\t\t\t\t\t\t\t<Input.TextArea \r\n\t\t\t\t\t\t\t\tplaceholder=\"Type here...\"\r\n\t\t\t\t\t\t\t\tvalue={ inputSentence }\r\n\t\t\t\t\t\t\t\tonChange={ handleSentenceChange }\r\n\t\t\t\t\t\t\t\tminLength={ minSentence }\r\n\t\t\t\t\t\t\t\tmaxLength={ maxSentence }\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Button.Minor onClick={ initPresets }>Cycle presets</Button.Minor>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// If the sentence is too long or too short, show an error message\r\n\t\t\t\t\t\t\t((inputSentence.length < minSentence || inputSentence.length > maxSentence) && !validSentence) ? <p className='sentenceInputError'>(The sentence must be {minSentence}-{maxSentence} characters long)</p> : ''\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t\t<h2>Colour</h2>\r\n\t\t\t\t\t\t<Radio\r\n\t\t\t\t\t\t\toptions={ colourOptions }\r\n\t\t\t\t\t\t\tselectedValue={ radioColour }\r\n\t\t\t\t\t\t\tonChange={ handleColourChange }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t\t<h2>Gap between letters</h2>\r\n\t\t\t\t\t\t<Radio\r\n\t\t\t\t\t\t\toptions={ gapOptions }\r\n\t\t\t\t\t\t\tselectedValue={ radioGap }\r\n\t\t\t\t\t\t\tonChange={ handleGapChange }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Button.Major onClick={init}>Start!</Button.Major>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}","// Imports\r\n\t// Importing components\r\n\timport { React, useEffect, useRef, useState } from 'react';\r\n\timport { useLocation, useNavigate } from \"react-router-dom\";\r\n\r\n\t// Importing defs\r\n\timport { $$, $$all, randomlyChoose } from '../../defs.js';\r\n\r\n\t// Importing constants\r\n\timport { TRANSITION_DURATION, WORDS } from '../../constants.js';\r\n\r\n\t// Importing GSAP\r\n\timport { gsap } from 'gsap';\r\n\t\r\n\t// Importing components\r\n\timport LetterGrid from '../../components/LetterGrid';\r\n\timport Radio from '../../components/Radio';\r\n\timport * as Button from '../../components/Button';\r\n\r\n\r\n\r\nexport default function Tessellation({ demo = false }) {\r\n\tconst location = useLocation();\r\n\r\n\t// Radio functionality\r\n\t// Density radio\r\n\tconst [radioDensity, setRadioDensity] = useState(\"medium\"); // Default value\r\n\tconst densityOptions = [ // Options\r\n\t\t{ name: \"low\", label: \"L\" },\r\n\t\t{ name: \"medium\", label: \"M\" },\r\n\t\t{ name: \"high\", label: \"H\" }\r\n\t];\r\n\tconst handleDensityChange = (name) => {\r\n\t\tsetRadioDensity(name);\r\n\t};\r\n\t// Colour radio\r\n\tconst [radioColour, setRadioColour] = useState(\"rainbow\"); // Default value\r\n\tconst colourOptions = [ // Options\r\n\t\t{ name: \"black\", label: \"Black\" },\r\n\t\t{ name: \"rainbow\", label: \"Rainbow\" },\r\n\t\t{ name: \"morning\", label: \"Morning\" },\r\n\t\t{ name: \"daylight\", label: \"Daylight\" },\r\n\t\t{ name: \"sunset\", label: \"Sunset\" },\r\n\t\t{ name: \"twilight\", label: \"Twilight\" },\r\n\t];\r\n\tconst handleColourChange = (name) => {\r\n\t\tsetRadioColour(name);\r\n\t};\r\n\r\n\r\n\r\n\t// The number of rows and columns is dependent on the viewport size\r\n\tconst [items, setItems] = useState([]);\r\n\r\n\t// CONTROLLERS\r\n\tconst controllerDensity = {\r\n\t\tlow: 140,\r\n\t\tmedium: 100,\r\n\t\thigh: 60\r\n\t};\r\n\r\n\t// Movement consts\r\n\tconst totalDur = 12;\r\n\r\n\t// The movement interval\r\n\tconst movementInterval = useRef(null);\r\n\r\n\t// Keeping track of whether the tessellation has been initialised\r\n\tconst tessellationInitialised = useRef(false);\r\n\r\n\r\n\r\n\tfunction getGridColumns() {\r\n\t\tconst gridItemWidth = controllerDensity[radioDensity];\r\n\t\tconst newColumns = Math.floor(window.innerWidth / gridItemWidth);\r\n\t\treturn newColumns;\r\n\t}\r\n\r\n\tfunction getGridRows() {\r\n\t\tconst gridItemHeight = controllerDensity[radioDensity] * 2;\r\n\t\tconst newRows = Math.ceil(window.innerHeight / gridItemHeight) + 1;\r\n\t\treturn newRows;\r\n\t}\r\n\r\n\tfunction updateGrid() {\r\n\t\t// Setting the tessellation initialised flag\r\n\t\ttessellationInitialised.current = true;\r\n\r\n\t\t// Broadcasting that the settings are now inactive\r\n\t\twindow.dispatchEvent(new CustomEvent('settingsInactive'));\r\n\r\n\t\t// Directly calculate the number of columns and rows\r\n\t\tconst columns = getGridColumns();\r\n\t\tconst rows = getGridRows();\r\n\r\n\t\t// Dynamically adding in the grid elements from the useState items list\r\n\t\tlet newItems = [];\r\n\t\tfor (let i = 0; i < rows; i++) {\r\n\t\t\tlet newItemsRow = [];\r\n\r\n\t\t\tfor (let j = 0; j < columns; j++) {\r\n\t\t\t\t// Making the program for the letter\r\n\t\t\t\t// This is done by randomly selecting 5 words from the WORDS constant\r\n\t\t\t\tlet program = [];\r\n\t\t\t\tfor (let k = 0; k < 5; k++) {\r\n\t\t\t\t\t// Randomly selecting a word from the WORDS constant\r\n\t\t\t\t\tlet word = randomlyChoose(...WORDS);\r\n\t\t\t\t\t// Turning the word into an array of letters\r\n\t\t\t\t\tlet letters = word.split(\"\");\r\n\t\t\t\t\t// Adding the letters to the program\r\n\t\t\t\t\tprogram.push(...letters);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnewItemsRow.push(\r\n\t\t\t\t\t<div className='letter-cont' key={ (i + 1) + \"-\" + (j + 1) }>\r\n\t\t\t\t\t\t<LetterGrid \r\n\t\t\t\t\t\t\treference={ \"--\" + (i + 1) + \"-\" + (j + 1) } \r\n\t\t\t\t\t\t\tmode=\"tessellation\" \r\n\t\t\t\t\t\t\tstartDisplayed={ false } \r\n\t\t\t\t\t\t\tprogram={ program } \r\n\t\t\t\t\t\t\tcolour={ radioColour }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tnewItems.push(\r\n\t\t\t\t<div className={`letters-row letter-row--${ i }`} key={ i }>\r\n\t\t\t\t\t{ newItemsRow }\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlet itemsReturn = (\r\n\t\t\t<div className='letters-cont'>\r\n\t\t\t\t{ newItems }\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\t\tsetItems(itemsReturn);\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\t// Running the movement engine\r\n\t\t\tmovementEngine(rows);\r\n\t\t}, 500);\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction movementEngine(rowCount) {\r\n\t\tconst repeatNo = 100;\r\n\t\tlet movedRows = 0;\r\n\t\tlet timesOver = 1;\r\n\r\n\t\t// Moving the rows\r\n\t\tgsap.to('.letters-cont', {\r\n\t\t\ty: '-=' + (100 * repeatNo) + '%',\r\n\t\t\tduration: totalDur * repeatNo,\r\n\t\t\tease: 'none',\r\n\t\t\trepeat: -1,\r\n\t\t});\r\n\r\n\t\t// Moving the individual rows to the bottom when they've reached the top\r\n\t\tmovementInterval.current = setInterval(() => {\r\n\t\t\tif (movedRows % rowCount === 0 && movedRows > 0) {\r\n\t\t\t\tif (timesOver === repeatNo) {\r\n\t\t\t\t\ttimesOver = 1;\r\n\t\t\t\t\t$$all(\".letters-row\").forEach(element => {\r\n\t\t\t\t\t\telement.style.transform = \"translateY(\" + 0 + \"%)\";\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttimesOver++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$$(\".letter-row--\" + (movedRows % rowCount)).style.transform = \"translateY(\" + (100 * rowCount * timesOver) + \"%)\";\r\n\t\t\tmovedRows++;\r\n \t\t}, totalDur / rowCount * 1000);\r\n\t}\r\n\r\n\r\n\r\n\r\n\tfunction initTessellation() {\r\n\t\t// Pushing the history state\r\n\t\twindow.history.pushState({}, \"\", \"#\" + location.pathname);\r\n\r\n\t\tgsap.to(\".options-cont\", {\r\n\t\t\topacity: 0,\r\n\t\t\tduration: TRANSITION_DURATION,\r\n\t\t\tonComplete: () => {\r\n\t\t\t\t$$(\".options-cont\").style.display = \"none\";\r\n\t\t\t\tupdateGrid();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tfunction initSettings() {\r\n\t\t// Setting the tessellation initialised flag\r\n\t\ttessellationInitialised.current = false;\r\n\t\t\r\n\t\t// Clearing the movement interval (from the movementEngine)\r\n\t\tclearInterval(movementInterval.current);\r\n\r\n\t\t// Hiding the items\r\n\t\tgsap.to(\".letters-cont\", {\r\n\t\t\topacity: 0,\r\n\t\t\tduration: TRANSITION_DURATION\r\n\t\t});\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\t// Resetting the items\r\n\t\t\tsetItems([]);\r\n\t\t}, TRANSITION_DURATION * 1000);\t\t\r\n\r\n\t\t// Broadcasting that the settings are now active\r\n\t\twindow.dispatchEvent(new CustomEvent('settingsActive'));\r\n\r\n\t\t// Showing the settings\r\n\t\t$$(\".options-cont\").style.display = \"flex\";\r\n\t\tgsap.to(\".options-cont\", {\r\n\t\t\topacity: 1,\r\n\t\t\tdelay: TRANSITION_DURATION * 1.5,\r\n\t\t\tduration: TRANSITION_DURATION\r\n\t\t});\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// Debounce function\r\n\tfunction debounce(func, timeout = 2000) {\r\n\t\tlet timer;\r\n\t\treturn (...args) => {\r\n\t\t\tclearTimeout(timer);\r\n\t\t\ttimer = setTimeout(() => { \r\n\t\t\t\tfunc.apply(this, args); \r\n\t\t\t}, timeout);\r\n\t\t};\r\n\t}\r\n\t\r\n\t// Resize event listener\r\n\tconst handleResize = debounce(() => {\r\n\t\t// Killing all GSAP\r\n\t\t$$all(\".LetterGrid\").forEach(element => {\r\n\t\t\telement.dispatchEvent(\r\n\t\t\t\tnew CustomEvent(\"letterChangeStop\")\r\n\t\t\t)\r\n\t\t});\r\n\r\n\t\t// Killing the GSAP for the movement\r\n\t\tgsap.killTweensOf('.letters-cont');\r\n\t\tif (tessellationInitialised.current) {\r\n\t\t\tconsole.log(\"Resizing\");\r\n\t\t\t$$(\".letters-cont\").style.transform = \"translateY(0%)\";\r\n\t\t\t$$all(\".letters-row\").forEach(element => {\r\n\t\t\t\telement.style.transform = \"translateY(\" + 0 + \"%)\";\r\n\t\t\t});\r\n\r\n\t\t\t// Clearing the movement interval (from the movementEngine)\r\n\t\t\tclearInterval(movementInterval.current);\r\n\t\t\t\r\n\t\t\t// Resetting the items\r\n\t\t\tsetItems([]);\r\n\t\r\n\t\t\t// Remaking the grid\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tupdateGrid();\r\n\t\t\t}, 50);\r\n\t\t}\r\n\t}, 300);\r\n\r\n\tfunction handlePopstate() {\r\n\t\tif (tessellationInitialised.current) {\r\n\t\t\t// Reloading the page\r\n\t\t\twindow.location.reload();\r\n\t\t}\r\n\t}\r\n\r\n\t// Adding event listeners\r\n\tuseEffect(() => {\r\n\t\t// If it's a demo, initialise the tessellation with pre-set values\r\n\t\tif (demo) {\r\n\t\t\tupdateGrid();\r\n\t\t}\r\n\r\n\r\n\t\t// Adding the event listener for the resize event\r\n\t\twindow.addEventListener(\"resize\", handleResize);\r\n\r\n\t\t// Adding the event lister for the popstate event\r\n\t\twindow.addEventListener(\"popstate\", handlePopstate);\r\n\r\n\t\t// Adding the event listener for the settingsClicked event\r\n\t\twindow.addEventListener(\"settingsClicked--tessellation\", initSettings);\r\n\t\r\n\t\t// Cleanup event listener and interval on component unmount\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(\"resize\", handleResize);\r\n\t\t\twindow.removeEventListener(\"popstate\", handlePopstate);\r\n\t\t\twindow.removeEventListener(\"settingsClicked--tessellation\", initSettings);\r\n\t\t\tclearInterval(movementInterval.current);\r\n\t\t};\r\n\t}, []);\r\n\r\n\r\n\r\n\t\r\n\r\n\t\r\n\r\n\r\n\treturn (\r\n\t\t<div className='Tessellation mode-cont'>\r\n\t\t\t{/* The grid of letters */}\r\n\t\t\t{ items }\r\n\t\t\t\r\n\t\t\t{ demo === false && \r\n\t\t\t\t<div className='options-cont d-flex flex-v ai-c gap--md'>\r\n\t\t\t\t\t<h1>Tessellation options</h1>\r\n\r\n\t\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t\t<h2>Density</h2>\r\n\t\t\t\t\t\t<Radio\r\n\t\t\t\t\t\t\toptions={ densityOptions }\r\n\t\t\t\t\t\t\tselectedValue={ radioDensity }\r\n\t\t\t\t\t\t\tonChange={ handleDensityChange }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// If the high density is selected, show a warning\r\n\t\t\t\t\t\t\t(radioDensity === \"high\") ? <p className='densityWarning'><i>(Warning:  high density may cause performance issues)</i></p> : ''\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t\t<h2>Colour</h2>\r\n\t\t\t\t\t\t<Radio\r\n\t\t\t\t\t\t\toptions={ colourOptions }\r\n\t\t\t\t\t\t\tselectedValue={ radioColour }\r\n\t\t\t\t\t\t\tonChange={ handleColourChange }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Button.Major onClick={initTessellation}>Tessellate!</Button.Major>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}","\r\n\r\n// Imports\r\n\t// Importing components\r\n\timport { useEffect, useRef, useState } from 'react';\r\n\timport { useLocation } from \"react-router-dom\";\r\n\r\n\t// Importing defs\r\n\timport { $$, randomlyChoose } from '../../defs.js';\r\n\r\n\t// Importing constants\r\n\timport { TRANSITION_DURATION } from '../../constants.js';\r\n\r\n\t// Importing GSAP\r\n\timport { gsap } from 'gsap';\r\n\t\r\n\t// Importing components\r\n\timport LetterGrid from '../../components/LetterGrid';\r\n\timport Radio from '../../components/Radio';\r\n\timport * as Button from '../../components/Button';\r\n\timport * as Input from '../../components/Input';\r\n\r\n\r\n\r\nexport default function WordSnake({ demo = false, alreadyShown = false }) {\r\n\tconst location = useLocation();\r\n\r\n\tconst [letters, setLetters] = useState([]);\r\n\r\n\t// Input functionality\r\n\tconst [inputWord, setInputWord] = useState(\"type\"); // Default value\r\n\tconst handleWordChange = (newValue) => {\r\n\t\tsetInputWord(newValue);\r\n\t};\r\n\t// The word validity\r\n\tconst [validWord, setValidWord] = useState(true);\r\n\tconst handleWordValidity = (newValue) => {\r\n\t\tsetValidWord(newValue);\r\n\t};\r\n\r\n\t// Radio functionality\r\n\t// Colour radio\r\n\tconst [radioColour, setRadioColour] = useState(\r\n\t\t(demo) ? \"sunset\" : \"black\"\r\n\t); // Default value\r\n\tconst colourOptions = [ // Options\r\n\t\t{ name: \"black\", label: \"Black\" },\r\n\t\t{ name: \"rainbow\", label: \"Rainbow\" },\r\n\t\t{ name: \"morning\", label: \"Morning\" },\r\n\t\t{ name: \"daylight\", label: \"Daylight\" },\r\n\t\t{ name: \"sunset\", label: \"Sunset\" },\r\n\t\t{ name: \"twilight\", label: \"Twilight\" },\r\n\t];\r\n\tconst handleColourChange = (name) => {\r\n\t\tsetRadioColour(name);\r\n\t};\r\n\r\n\t// Gap radio\r\n\tconst [radioGap, setRadioGap] = useState(\"small\"); // Default value\r\n\tconst gapOptions = [ // Options\r\n\t\t{ name: \"none\", label: \"None\" },\r\n\t\t{ name: \"small\", label: \"Small\" },\r\n\t\t{ name: \"large\", label: \"Large\" }\r\n\t];\r\n\tconst handleGapChange = (name) => {\r\n\t\tsetRadioGap(name);\r\n\t}\r\n\r\n\r\n\r\n\t// The word\r\n\tconst word = useRef(null);\r\n\r\n\t// Breaking the word into an array of characters\r\n\tlet wordArray;\r\n\r\n\t// The variable to store the current state of the word snake\r\n\tlet currentPerm = [];\r\n\r\n\t// The variable to store the letter elements\r\n\tlet letterElements = [];\r\n\t\r\n\t// The duration of the interval (in seconds)\r\n\tconst dur = 2.1;\r\n\t// The duration of the movement (in seconds)\r\n\tlet moveDur;\r\n\r\n\t// The interval\r\n\tconst interval = useRef(null);\r\n\r\n\t// Keeping track of whether the word snake has been initialised\r\n\tconst wordSnakeInitialised = useRef(false);\r\n\r\n\t// Setting up the movement animation\r\n\tconst tl = gsap.timeline({ repeat: -1, paused: true });\r\n\r\n\r\n\r\n\tfunction wordSnakeEngine() {\r\n\t\t\r\n\t\tif (currentPerm.length === 0) {\r\n\t\t\tcurrentPerm = wordArray;\r\n\t\t} else {\r\n\t\t\t// Removing the last letter and adding it to the start\r\n\t\t\tcurrentPerm.unshift(currentPerm.pop());\r\n\t\t}\r\n\r\n\t\t// Updating the letters -- this is done by broadcasting a custom event for each letter\r\n\t\tfor (let i = 0; i < currentPerm.length; i++) {\r\n\t\t\twindow.dispatchEvent(\r\n\t\t\t\tnew CustomEvent((\"letterChangewordSnakeletter\" + i), {\r\n\t\t\t\t\tdetail: currentPerm[i]\r\n\t\t\t\t\t// For now, return a random letter\r\n\t\t\t\t\t// detail: randomlyChoose('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t// Init function\r\n\tfunction init() {\r\n\t\tif (!demo) {\r\n\t\t\t// Pushing the history state\r\n\t\t\twindow.history.pushState({}, \"\", \"#\" + location.pathname);\r\n\r\n\t\t\t// Hiding the options\r\n\t\t\tgsap.to(\".options-cont\", {\r\n\t\t\t\topacity: 0,\r\n\t\t\t\tduration: TRANSITION_DURATION,\r\n\t\t\t\tonComplete: () => {\r\n\t\t\t\t\t$$(\".options-cont\").style.display = \"none\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// Ensuring the letter conts are visible\r\n\t\t\t$$(\".WorkSnake .letters-cont\").style.opacity = 1;\r\n\t\t\t$$(\".WorkSnake .duplicate-letters-cont\").style.opacity = 1;\r\n\r\n\t\t\t// Broadcasting that the settings are now inactive\r\n\t\t\twindow.dispatchEvent(new CustomEvent('settingsInactive'));\r\n\t\t}\r\n\r\n\t\t// Checking if the word snake has been initialised\r\n\t\tif (wordSnakeInitialised.current) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (inputWord.length < 4 || inputWord.length > 8) {\r\n\t\t\tsetValidWord(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// Setting the word snake initialised flag\r\n\t\twordSnakeInitialised.current = true;\r\n\t\t\r\n\t\t// Getting the word\r\n\t\tword.current = inputWord;\r\n\t\twordArray = word.current.split('');\r\n\t\t\r\n\t\t// Setting the move duration\r\n\t\tmoveDur = dur * wordArray.length;\r\n\t\t\r\n\t\t// Setting up the interval\r\n\t\tinterval.current = setInterval(wordSnakeEngine, dur * 1000);\r\n\r\n\t\t// Creating the letter elements\r\n\t\tlet paddingClass = (radioGap === \"small\") ? \"pad--small\" : (radioGap === \"large\") ? \"pad--large\" : \"\";\r\n\r\n\t\tfor (let i = 0; i < wordArray.length; i++) {\r\n\t\t\tletterElements.push(\r\n\t\t\t\t<div className={\"letter-cont \" + paddingClass} key={ i }>\r\n\t\t\t\t\t<LetterGrid \r\n\t\t\t\t\t\treference={ \"letter\" + i } \r\n\t\t\t\t\t\tmode=\"wordSnake\" \r\n\t\t\t\t\t\tcolour={ radioColour }\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\tsetLetters(letterElements);\r\n\r\n\t\ttl.to('.word-snake-letters-cont', {\r\n\t\t\tx: '-=100%',\r\n\t\t\tduration: moveDur,\r\n\t\t\tease: 'none',\r\n\t\t\tonComplete: () => {\r\n\t\t\t\tgsap.set('.word-snake-letters-cont', { x: '100%' });\r\n\t\t\t\ttl.addLabel(\"halfway\");\r\n\t\t\t}\r\n\t\t}, 0);\r\n\t\ttl.to('.word-snake-duplicate-letters-cont', {\r\n\t\t\tx: '-=200%',\r\n\t\t\tduration: moveDur * 2,\r\n\t\t\tease: 'none',\r\n\t\t}, 0);\r\n\t\ttl.to('.word-snake-letters-cont', {\r\n\t\t\tx: '-=100%',\r\n\t\t\tduration: moveDur,\r\n\t\t\tease: 'none',\r\n\t\t}, moveDur);\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\ttl.play();\r\n\t\t}, dur * 1000 * 1.9);\r\n\t}\r\n\r\n\tfunction initSettings() {\r\n\t\t// Setting the word snake initialised flag\r\n\t\twordSnakeInitialised.current = false;\r\n\r\n\t\t// Clearing the interval\r\n\t\tclearInterval(interval.current);\r\n\r\n\t\t// Broadcasting that the settings are now active\r\n\t\twindow.dispatchEvent(new CustomEvent('settingsActive'));\r\n\r\n\t\t// Hiding the items\r\n\t\tgsap.to(\".letters-cont, .duplicate-letters-cont\", {\r\n\t\t\topacity: 0,\r\n\t\t\tduration: TRANSITION_DURATION\r\n\t\t});\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\t// Resetting the items\r\n\t\t\tsetLetters([]);\r\n\r\n\t\t\t// Resetting the variables\r\n\t\t\tword.current = null;\r\n\t\t\twordArray = null;\r\n\t\t\tcurrentPerm = [];\r\n\t\t\tletterElements = [];\r\n\r\n\t\t\t// Resetting the timeline\r\n\t\t\ttl.pause(0);\r\n\t\t\ttl.clear();\r\n\t\t}, TRANSITION_DURATION * 1000);\r\n\r\n\t\t// Showing the options\r\n\t\t$$(\".options-cont\").style.display = \"flex\";\r\n\t\tgsap.to(\".options-cont\", {\r\n\t\t\topacity: 1,\r\n\t\t\tdelay: TRANSITION_DURATION * 1.5,\r\n\t\t\tduration: TRANSITION_DURATION\r\n\t\t});\r\n\t}\r\n\t\r\n\r\n\r\n\tfunction handlePopstate() {\r\n\t\tif (wordSnakeInitialised.current) {\r\n\t\t\t// Reloading the page\r\n\t\t\twindow.location.reload();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\t// If the demo is active, start the word snake\r\n\t\tif (demo) {\r\n\t\t\tinit();\r\n\t\t}\r\n\r\n\r\n\t\t// Adding the event lister for the popstate event\r\n\t\twindow.addEventListener(\"popstate\", handlePopstate);\r\n\r\n\t\t// Adding the event listener for the settingsClicked event\r\n\t\twindow.addEventListener(\"settingsClicked--word-snake\", initSettings);\r\n\r\n\t\t// Cleanup\r\n\t\treturn () => {\r\n\t\t\tclearInterval(interval.current);\r\n\r\n\t\t\t// Removing the event listeners\r\n\t\t\twindow.removeEventListener(\"popstate\", handlePopstate);\r\n\r\n\t\t\t// Removing the event listener for the settingsClicked event\r\n\t\t\twindow.removeEventListener(\"settingsClicked--word-snake\", initSettings);\r\n\t\t};\r\n\t}, []);\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div className='WordSnake mode-cont'>\r\n\t\t\t<div className='letters-cont word-snake-letters-cont'>\r\n\t\t\t\t{ letters }\r\n\t\t\t</div>\r\n\t\t\t<div className='duplicate-letters-cont word-snake-duplicate-letters-cont'>\r\n\t\t\t\t{ letters }\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t{ demo === false &&\r\n\t\t\t\t<div className='options-cont d-flex flex-v ai-c gap--md'>\r\n\t\t\t\t\t<h1>Word snake options</h1>\r\n\r\n\t\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t\t<h2>Word</h2>\r\n\t\t\t\t\t\t<Input.Text \r\n\t\t\t\t\t\t\tplaceholder=\"Enter a word...\"\r\n\t\t\t\t\t\t\tvalue={ inputWord }\r\n\t\t\t\t\t\t\tonChange={ handleWordChange }\r\n\t\t\t\t\t\t\tminLength={ 4 }\r\n\t\t\t\t\t\t\tmaxLength={ 8 }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// If the word is too long or too short, show an error message\r\n\t\t\t\t\t\t\t((inputWord.length < 4 || inputWord.length > 8) && !validWord) ? <p className='wordInputError'>(Word must be between 4-8 characters long)</p> : ''\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t\t<h2>Colour</h2>\r\n\t\t\t\t\t\t<Radio\r\n\t\t\t\t\t\t\toptions={ colourOptions }\r\n\t\t\t\t\t\t\tselectedValue={ radioColour }\r\n\t\t\t\t\t\t\tonChange={ handleColourChange }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t\t<h2>Gap between letters</h2>\r\n\t\t\t\t\t\t<Radio\r\n\t\t\t\t\t\t\toptions={ gapOptions }\r\n\t\t\t\t\t\t\tselectedValue={ radioGap }\r\n\t\t\t\t\t\t\tonChange={ handleGapChange }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Button.Major onClick={init}>Start word snake</Button.Major>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}"],"names":["Major","_ref","children","onClick","_jsx","className","Minor","_ref2","dark","BackArrow","xmlns","viewBox","d","ForwardArrow","House","_ref3","Settings","_ref4","_jsxs","History","_ref5","ThreeDots","_ref6","cx","cy","r","Text","value","placeholder","onChange","minLength","maxLength","inputClass","length","type","e","target","Number","min","max","TextArea","autoGrow","element","$$","style","height","scrollHeight","useEffect","window","addEventListener","onInput","Radio","options","selectedValue","hoveredOption","setHoveredOption","useState","handleMouseLeave","map","option","name","handleOptionClick","onMouseEnter","handleMouseEnter","onMouseLeave","label","Circle","Pagination","newIndex","findIndex","Icons","Shapes","Demos","currentDemo","setCurrentDemo","shownPages","useRef","Tessellation","demo","Sentences","alreadyShown","current","filter","page","WordSnake","DeparturesBoard","Perfume","push","Link","to","Departures","src","Video","controls","loop","PerfumeTv","location","useLocation","inputNumber","setInputNumber","validNumber","setValidNumber","inputSentence","setInputSentence","validSentence","setValidSentence","maxSentence","presetSentences","currentPreset","setCurrentPreset","radioColour","setRadioColour","radioGap","setRadioGap","items","setItems","sentence","sentenceArray","program","instanceIndex","letterIndex","pause","interval","noOfDisplayedLetters","letterElements","initialised","init","display","history","pushState","pathname","gsap","opacity","duration","TRANSITION_DURATION","onComplete","dispatchEvent","CustomEvent","split","paddingClass","i","LetterGrid","reference","mode","colour","words","word","instance","wordLength","wordsToRemove","forEach","letter","instanceLetters","slice","index","includes","setInterval","detail","instanceDuration","initSettings","clearInterval","delay","handlePopstate","console","log","removeEventListener","Input","newValue","Button","setTimeout","Event","radioDensity","setRadioDensity","controllerDensity","low","medium","high","movementInterval","tessellationInitialised","updateGrid","columns","gridItemWidth","Math","floor","innerWidth","getGridColumns","rows","gridItemHeight","ceil","innerHeight","getGridRows","newItems","newItemsRow","j","k","letters","randomlyChoose","WORDS","startDisplayed","rowCount","repeatNo","movedRows","timesOver","y","ease","repeat","$$all","transform","movementEngine","handleResize","func","_this","timer","timeout","arguments","undefined","_len","args","Array","_key","clearTimeout","apply","debounce","killTweensOf","reload","setLetters","inputWord","setInputWord","validWord","setValidWord","wordArray","currentPerm","moveDur","wordSnakeInitialised","tl","timeline","paused","wordSnakeEngine","unshift","pop","dur","x","set","addLabel","play","clear"],"sourceRoot":""}