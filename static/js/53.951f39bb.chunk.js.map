{"version":3,"file":"static/js/53.951f39bb.chunk.js","mappings":"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","sources":["components/Button.jsx","components/Radio.jsx","pages/modes/Tessellation.jsx"],"sourcesContent":["export function Major({ children, onClick }) {\r\n\treturn (\r\n\t\t<button className='Button Major' onClick={onClick}>\r\n\t\t\t<h2>{ children }</h2>\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport function Minor ({ children, dark = false, onClick }) {\r\n\treturn (\r\n\t\t<button className={'Button Minor ' + (dark === true ? \"dark\" : \"\")} onClick={onClick}>\r\n\t\t\t<p>{ children }</p>\r\n\t\t</button>\r\n\t);\r\n}","// Imports\r\n\t// Importing React\r\n\timport React, { useState } from 'react';\r\n\r\n\r\n\r\nexport default function Radio({ options, selectedValue, onChange }) {\r\n\tconst [hoveredOption, setHoveredOption] = useState(null);\r\n\r\n\tconst handleOptionClick = (name) => {\r\n\t\tif (onChange) {\r\n\t\t\tonChange(name);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleMouseEnter = (name) => {\r\n\t\tsetHoveredOption(name);\r\n\t}\r\n\r\n\tconst handleMouseLeave = () => {\r\n\t\tsetHoveredOption(null);\r\n\t}\r\n\t\r\n\r\n\r\n\treturn (\r\n\t\t<div className='Radio d-flex jc-btwn gap--xs'>\r\n\t\t\t{ options.map(option => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tkey={option.name}\r\n\t\t\t\t\tclassName={`Radio__option ${selectedValue === option.name ? 'selected' : ''} ${hoveredOption === option.name ? 'hovered ' + option.name : ''}`}\r\n\t\t\t\t\tonClick={() => handleOptionClick(option.name)}\r\n\t\t\t\t\tonMouseEnter={ () => handleMouseEnter(option.name) }\r\n\t\t\t\t\tonMouseLeave={ handleMouseLeave }\r\n\t\t\t\t>\r\n\t\t\t\t\t<p >{ option.label }</p>\r\n\t\t\t\t</div>\r\n\t\t\t)) }\r\n\t\t</div>\r\n\t);\r\n}","// Imports\r\n\t// Importing components\r\n\timport { React, useEffect, useRef, useState } from 'react';\r\n\timport { useLocation, useNavigate } from \"react-router-dom\";\r\n\r\n\t// Importing defs\r\n\timport { $$, $$all, randomlyChoose } from '../../defs.js';\r\n\r\n\t// Importing constants\r\n\timport { TRANSITION_DURATION, WORDS } from '../../constants.js';\r\n\r\n\t// Importing GSAP\r\n\timport { gsap } from 'gsap';\r\n\t\r\n\t// Importing components\r\n\timport LetterGrid from '../../components/LetterGrid';\r\n\timport Radio from '../../components/Radio';\r\n\timport * as Button from '../../components/Button';\r\n\r\n\r\n\r\nexport default function Tessellation({ demo = false }) {\r\n\tconst location = useLocation();\r\n\r\n\t// Radio functionality\r\n\t// Density radio\r\n\tconst [radioDensity, setRadioDensity] = useState(\"medium\"); // Default value\r\n\tconst densityOptions = [ // Options\r\n\t\t{ name: \"low\", label: \"L\" },\r\n\t\t{ name: \"medium\", label: \"M\" },\r\n\t\t{ name: \"high\", label: \"H\" }\r\n\t];\r\n\tconst handleDensityChange = (name) => {\r\n\t\tsetRadioDensity(name);\r\n\t};\r\n\t// Colour radio\r\n\tconst [radioColour, setRadioColour] = useState(\"rainbow\"); // Default value\r\n\tconst colourOptions = [ // Options\r\n\t\t{ name: \"black\", label: \"Black\" },\r\n\t\t{ name: \"rainbow\", label: \"Rainbow\" },\r\n\t\t{ name: \"morning\", label: \"Morning\" },\r\n\t\t{ name: \"daylight\", label: \"Daylight\" },\r\n\t\t{ name: \"sunset\", label: \"Sunset\" },\r\n\t\t{ name: \"twilight\", label: \"Twilight\" },\r\n\t];\r\n\tconst handleColourChange = (name) => {\r\n\t\tsetRadioColour(name);\r\n\t};\r\n\r\n\r\n\r\n\t// The number of rows and columns is dependent on the viewport size\r\n\tconst [items, setItems] = useState([]);\r\n\r\n\t// CONTROLLERS\r\n\tconst controllerDensity = {\r\n\t\tlow: 140,\r\n\t\tmedium: 100,\r\n\t\thigh: 60\r\n\t};\r\n\r\n\t// Movement consts\r\n\tconst totalDur = 12;\r\n\r\n\t// The movement interval\r\n\tconst movementInterval = useRef(null);\r\n\r\n\t// Keeping track of whether the tessellation has been initialised\r\n\tconst tessellationInitialised = useRef(false);\r\n\r\n\r\n\r\n\tfunction getGridColumns() {\r\n\t\tconst gridItemWidth = controllerDensity[radioDensity];\r\n\t\tconst newColumns = Math.floor(window.innerWidth / gridItemWidth);\r\n\t\treturn newColumns;\r\n\t}\r\n\r\n\tfunction getGridRows() {\r\n\t\tconst gridItemHeight = controllerDensity[radioDensity] * 2;\r\n\t\tconst newRows = Math.ceil(window.innerHeight / gridItemHeight) + 1;\r\n\t\treturn newRows;\r\n\t}\r\n\r\n\tfunction updateGrid() {\r\n\t\t// Setting the tessellation initialised flag\r\n\t\ttessellationInitialised.current = true;\r\n\r\n\t\t// Broadcasting that the settings are now inactive\r\n\t\twindow.dispatchEvent(new CustomEvent('settingsInactive'));\r\n\r\n\t\t// Directly calculate the number of columns and rows\r\n\t\tconst columns = getGridColumns();\r\n\t\tconst rows = getGridRows();\r\n\r\n\t\t// Dynamically adding in the grid elements from the useState items list\r\n\t\tlet newItems = [];\r\n\t\tfor (let i = 0; i < rows; i++) {\r\n\t\t\tlet newItemsRow = [];\r\n\r\n\t\t\tfor (let j = 0; j < columns; j++) {\r\n\t\t\t\t// Making the program for the letter\r\n\t\t\t\t// This is done by randomly selecting 5 words from the WORDS constant\r\n\t\t\t\tlet program = [];\r\n\t\t\t\tfor (let k = 0; k < 5; k++) {\r\n\t\t\t\t\t// Randomly selecting a word from the WORDS constant\r\n\t\t\t\t\tlet word = randomlyChoose(...WORDS);\r\n\t\t\t\t\t// Turning the word into an array of letters\r\n\t\t\t\t\tlet letters = word.split(\"\");\r\n\t\t\t\t\t// Adding the letters to the program\r\n\t\t\t\t\tprogram.push(...letters);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnewItemsRow.push(\r\n\t\t\t\t\t<div className='letter-cont' key={ (i + 1) + \"-\" + (j + 1) }>\r\n\t\t\t\t\t\t<LetterGrid \r\n\t\t\t\t\t\t\treference={ \"--\" + (i + 1) + \"-\" + (j + 1) } \r\n\t\t\t\t\t\t\tmode=\"tessellation\" \r\n\t\t\t\t\t\t\tstartDisplayed={ false } \r\n\t\t\t\t\t\t\tprogram={ program } \r\n\t\t\t\t\t\t\tcolour={ radioColour }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tnewItems.push(\r\n\t\t\t\t<div className={`letters-row letter-row--${ i }`} key={ i }>\r\n\t\t\t\t\t{ newItemsRow }\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlet itemsReturn = (\r\n\t\t\t<div className='letters-cont'>\r\n\t\t\t\t{ newItems }\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\t\tsetItems(itemsReturn);\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\t// Running the movement engine\r\n\t\t\tmovementEngine(rows);\r\n\t\t}, 500);\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction movementEngine(rowCount) {\r\n\t\tconst repeatNo = 100;\r\n\t\tlet movedRows = 0;\r\n\t\tlet timesOver = 1;\r\n\r\n\t\t// Moving the rows\r\n\t\tgsap.to('.letters-cont', {\r\n\t\t\ty: '-=' + (100 * repeatNo) + '%',\r\n\t\t\tduration: totalDur * repeatNo,\r\n\t\t\tease: 'none',\r\n\t\t\trepeat: -1,\r\n\t\t});\r\n\r\n\t\t// Moving the individual rows to the bottom when they've reached the top\r\n\t\tmovementInterval.current = setInterval(() => {\r\n\t\t\tif (movedRows % rowCount === 0 && movedRows > 0) {\r\n\t\t\t\tif (timesOver === repeatNo) {\r\n\t\t\t\t\ttimesOver = 1;\r\n\t\t\t\t\t$$all(\".letters-row\").forEach(element => {\r\n\t\t\t\t\t\telement.style.transform = \"translateY(\" + 0 + \"%)\";\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttimesOver++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$$(\".letter-row--\" + (movedRows % rowCount)).style.transform = \"translateY(\" + (100 * rowCount * timesOver) + \"%)\";\r\n\t\t\tmovedRows++;\r\n \t\t}, totalDur / rowCount * 1000);\r\n\t}\r\n\r\n\r\n\r\n\r\n\tfunction initTessellation() {\r\n\t\t// Pushing the history state\r\n\t\twindow.history.pushState({}, \"\", \"#\" + location.pathname);\r\n\r\n\t\tgsap.to(\".options-cont\", {\r\n\t\t\topacity: 0,\r\n\t\t\tduration: TRANSITION_DURATION,\r\n\t\t\tonComplete: () => {\r\n\t\t\t\t$$(\".options-cont\").style.display = \"none\";\r\n\t\t\t\tupdateGrid();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tfunction initSettings() {\r\n\t\t// Setting the tessellation initialised flag\r\n\t\ttessellationInitialised.current = false;\r\n\t\t\r\n\t\t// Clearing the movement interval (from the movementEngine)\r\n\t\tclearInterval(movementInterval.current);\r\n\r\n\t\t// Hiding the items\r\n\t\tgsap.to(\".letters-cont\", {\r\n\t\t\topacity: 0,\r\n\t\t\tduration: TRANSITION_DURATION\r\n\t\t});\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\t// Resetting the items\r\n\t\t\tsetItems([]);\r\n\t\t}, TRANSITION_DURATION * 1000);\t\t\r\n\r\n\t\t// Broadcasting that the settings are now active\r\n\t\twindow.dispatchEvent(new CustomEvent('settingsActive'));\r\n\r\n\t\t// Showing the settings\r\n\t\t$$(\".options-cont\").style.display = \"flex\";\r\n\t\tgsap.to(\".options-cont\", {\r\n\t\t\topacity: 1,\r\n\t\t\tdelay: TRANSITION_DURATION * 1.5,\r\n\t\t\tduration: TRANSITION_DURATION\r\n\t\t});\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// Debounce function\r\n\tfunction debounce(func, timeout = 2000) {\r\n\t\tlet timer;\r\n\t\treturn (...args) => {\r\n\t\t\tclearTimeout(timer);\r\n\t\t\ttimer = setTimeout(() => { \r\n\t\t\t\tfunc.apply(this, args); \r\n\t\t\t}, timeout);\r\n\t\t};\r\n\t}\r\n\t\r\n\t// Resize event listener\r\n\tconst handleResize = debounce(() => {\r\n\t\t// Killing all GSAP\r\n\t\t$$all(\".LetterGrid\").forEach(element => {\r\n\t\t\telement.dispatchEvent(\r\n\t\t\t\tnew CustomEvent(\"letterChangeStop\")\r\n\t\t\t)\r\n\t\t});\r\n\r\n\t\t// Killing the GSAP for the movement\r\n\t\tgsap.killTweensOf('.letters-cont');\r\n\t\tif (tessellationInitialised.current) {\r\n\t\t\tconsole.log(\"Resizing\");\r\n\t\t\t$$(\".letters-cont\").style.transform = \"translateY(0%)\";\r\n\t\t\t$$all(\".letters-row\").forEach(element => {\r\n\t\t\t\telement.style.transform = \"translateY(\" + 0 + \"%)\";\r\n\t\t\t});\r\n\r\n\t\t\t// Clearing the movement interval (from the movementEngine)\r\n\t\t\tclearInterval(movementInterval.current);\r\n\t\t\t\r\n\t\t\t// Resetting the items\r\n\t\t\tsetItems([]);\r\n\t\r\n\t\t\t// Remaking the grid\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tupdateGrid();\r\n\t\t\t}, 50);\r\n\t\t}\r\n\t}, 300);\r\n\r\n\tfunction handlePopstate() {\r\n\t\tif (tessellationInitialised.current) {\r\n\t\t\t// Reloading the page\r\n\t\t\twindow.location.reload();\r\n\t\t}\r\n\t}\r\n\r\n\t// Adding event listeners\r\n\tuseEffect(() => {\r\n\t\t// If it's a demo, initialise the tessellation with pre-set values\r\n\t\tif (demo) {\r\n\t\t\tupdateGrid();\r\n\t\t}\r\n\r\n\r\n\t\t// Adding the event listener for the resize event\r\n\t\twindow.addEventListener(\"resize\", handleResize);\r\n\r\n\t\t// Adding the event lister for the popstate event\r\n\t\twindow.addEventListener(\"popstate\", handlePopstate);\r\n\r\n\t\t// Adding the event listener for the settingsClicked event\r\n\t\twindow.addEventListener(\"settingsClicked--tessellation\", initSettings);\r\n\t\r\n\t\t// Cleanup event listener and interval on component unmount\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(\"resize\", handleResize);\r\n\t\t\twindow.removeEventListener(\"popstate\", handlePopstate);\r\n\t\t\twindow.removeEventListener(\"settingsClicked--tessellation\", initSettings);\r\n\t\t\tclearInterval(movementInterval.current);\r\n\t\t};\r\n\t}, []);\r\n\r\n\r\n\r\n\t\r\n\r\n\t\r\n\r\n\r\n\treturn (\r\n\t\t<div className='Tessellation mode-cont'>\r\n\t\t\t{/* The grid of letters */}\r\n\t\t\t{ items }\r\n\t\t\t\r\n\t\t\t{ demo === false && \r\n\t\t\t\t<div className='options-cont d-flex flex-v ai-c gap--md'>\r\n\t\t\t\t\t<h1>Tessellation options</h1>\r\n\r\n\t\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t\t<h2>Density</h2>\r\n\t\t\t\t\t\t<Radio\r\n\t\t\t\t\t\t\toptions={ densityOptions }\r\n\t\t\t\t\t\t\tselectedValue={ radioDensity }\r\n\t\t\t\t\t\t\tonChange={ handleDensityChange }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// If the high density is selected, show a warning\r\n\t\t\t\t\t\t\t(radioDensity === \"high\") ? <p className='densityWarning'><i>(Warning:  high density may cause performance issues)</i></p> : ''\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t\t<h2>Colour</h2>\r\n\t\t\t\t\t\t<Radio\r\n\t\t\t\t\t\t\toptions={ colourOptions }\r\n\t\t\t\t\t\t\tselectedValue={ radioColour }\r\n\t\t\t\t\t\t\tonChange={ handleColourChange }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Button.Major onClick={initTessellation}>Tessellate!</Button.Major>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}"],"names":["Major","_ref","children","onClick","_jsx","className","Minor","_ref2","dark","Radio","options","selectedValue","onChange","hoveredOption","setHoveredOption","useState","handleMouseLeave","map","option","name","handleOptionClick","onMouseEnter","handleMouseEnter","onMouseLeave","label","Tessellation","demo","location","useLocation","radioDensity","setRadioDensity","radioColour","setRadioColour","items","setItems","controllerDensity","low","medium","high","movementInterval","useRef","tessellationInitialised","updateGrid","current","window","dispatchEvent","CustomEvent","columns","gridItemWidth","Math","floor","innerWidth","getGridColumns","rows","gridItemHeight","ceil","innerHeight","getGridRows","newItems","i","newItemsRow","j","program","k","letters","randomlyChoose","WORDS","split","push","LetterGrid","reference","mode","startDisplayed","colour","setTimeout","rowCount","repeatNo","movedRows","timesOver","gsap","to","y","duration","ease","repeat","setInterval","$$all","forEach","element","style","transform","$$","movementEngine","initSettings","clearInterval","opacity","TRANSITION_DURATION","display","delay","handleResize","func","_this","timer","timeout","arguments","length","undefined","_len","args","Array","_key","clearTimeout","apply","debounce","killTweensOf","console","log","handlePopstate","reload","useEffect","addEventListener","removeEventListener","_jsxs","Button","history","pushState","pathname","onComplete"],"sourceRoot":""}