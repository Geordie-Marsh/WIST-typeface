{"version":3,"file":"static/js/206.419dd6db.chunk.js","mappings":"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","sources":["components/Button.jsx","components/Input.jsx","components/Radio.jsx","pages/modes/Sentences.jsx"],"sourcesContent":["export function Major({ children, onClick }) {\r\n\treturn (\r\n\t\t<button className='Button Major' onClick={onClick}>\r\n\t\t\t<h2>{ children }</h2>\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport function Minor ({ children, onClick }) {\r\n\treturn (\r\n\t\t<button className='Button Minor' onClick={onClick}>\r\n\t\t\t<p>{ children }</p>\r\n\t\t</button>\r\n\t);\r\n}","// Imports\r\n\t// Importing React\r\n\timport { useEffect } from \"react\";\r\n\r\n\t// Importing defs\r\n\timport { $$ } from \"../defs\";\r\n\r\nexport function Text({ value, placeholder, onChange, minLength, maxLength }) {\r\n\t// If the value is outside the min/max length, add a class to the input\r\n\t// to show the user that the input is invalid\r\n\tlet inputClass = '';\r\n\tif (value.length < minLength || value.length > maxLength) {\r\n\t\tinputClass = 'invalid';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='Input Text'>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value)}\r\n\t\t\t\tminLength={minLength}\r\n\t\t\t\tmaxLength={maxLength}\r\n\t\t\t\tclassName={inputClass}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport function Number({ value, placeholder, onChange, min, max }) {\r\n\t// If the value is outside the min/max length, add a class to the input\r\n\t// to show the user that the input is invalid\r\n\tlet inputClass = '';\r\n\tif (value < min || value > max) {\r\n\t\tinputClass = 'invalid';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='Input Number'>\r\n\t\t\t<input \r\n\t\t\t\ttype=\"number\"\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tonChange={(e) => onChange(e.target.value)}\r\n\t\t\t\tmin={min}\r\n\t\t\t\tmax={max}\r\n\t\t\t\tclassName={inputClass}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport function TextArea({ value, placeholder, onChange, minLength, maxLength }) {\r\n\t// If the value is outside the min/max length, add a class to the input\r\n\t// to show the user that the input is invalid\r\n\tlet inputClass = '';\r\n\tif (value.length < minLength || value.length > maxLength) {\r\n\t\tinputClass = 'invalid';\r\n\t}\r\n\r\n\t// Function to auto grow the textarea\r\n\tfunction autoGrow() {\r\n\t\tlet element = $$(\".TextArea textarea\");\r\n\t\telement.style.height = \"10px\";\r\n\t\telement.style.height = (element.scrollHeight + 4) + \"px\";\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\t// Add an event listener to the textarea to auto grow it\r\n\t\twindow.addEventListener(\"textareaUpdated\", autoGrow);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className='Input TextArea'>\r\n\t\t\t<textarea \r\n\t\t\t\tvalue={value}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\tonChange(e.target.value);\r\n\t\t\t\t\tautoGrow();\r\n\t\t\t\t}}\r\n\t\t\t\tminLength={minLength}\r\n\t\t\t\tmaxLength={maxLength}\r\n\t\t\t\tclassName={inputClass}\r\n\t\t\t\tonInput={autoGrow}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}","// Imports\r\n\t// Importing React\r\n\timport React, { useState } from 'react';\r\n\r\n\r\n\r\nexport default function Radio({ options, selectedValue, onChange }) {\r\n\tconst [hoveredOption, setHoveredOption] = useState(null);\r\n\r\n\tconst handleOptionClick = (name) => {\r\n\t\tif (onChange) {\r\n\t\t\tonChange(name);\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleMouseEnter = (name) => {\r\n\t\tsetHoveredOption(name);\r\n\t}\r\n\r\n\tconst handleMouseLeave = () => {\r\n\t\tsetHoveredOption(null);\r\n\t}\r\n\t\r\n\r\n\r\n\treturn (\r\n\t\t<div className='Radio d-flex jc-btwn gap--xs'>\r\n\t\t\t{ options.map(option => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tkey={option.name}\r\n\t\t\t\t\tclassName={`Radio__option ${selectedValue === option.name ? 'selected' : ''} ${hoveredOption === option.name ? 'hovered ' + option.name : ''}`}\r\n\t\t\t\t\tonClick={() => handleOptionClick(option.name)}\r\n\t\t\t\t\tonMouseEnter={ () => handleMouseEnter(option.name) }\r\n\t\t\t\t\tonMouseLeave={ handleMouseLeave }\r\n\t\t\t\t>\r\n\t\t\t\t\t<p >{ option.label }</p>\r\n\t\t\t\t</div>\r\n\t\t\t)) }\r\n\t\t</div>\r\n\t);\r\n}","// Imports\r\n\t// Importing React\r\n\timport { useEffect, useState, useRef } from 'react';\r\n\timport { useLocation } from \"react-router-dom\";\r\n\r\n\t// Importing gsap\r\n\timport { gsap } from 'gsap';\r\n\r\n\t// Importing components\r\n\timport LetterGrid from '../../components/LetterGrid.jsx';\r\n\timport Radio from '../../components/Radio.jsx';\r\n\timport * as Button from '../../components/Button.jsx';\r\n\timport * as Input from '../../components/Input';\r\n\r\n\t// Importing defs\r\n\timport { $$, max, min } from '../../defs.js';\r\n\r\n\t// Importing constants\r\n\timport { TRANSITION_DURATION } from '../../constants.js';\r\nimport { div } from 'framer-motion/client';\r\n\r\n\r\n\r\nexport default function Sentences() {\r\n\tconst location = useLocation();\r\n\r\n\t// Input functionality\r\n\tconst [inputNumber, setInputNumber] = useState(9); // Default value\r\n\tconst handleNumberChange = (newValue) => {\r\n\t\tsetInputNumber(newValue);\r\n\t};\r\n\t// The number validity\r\n\tconst [validNumber, setValidNumber] = useState(true);\r\n\tconst handleNumberValidity = (newValue) => {\r\n\t\tsetValidNumber(newValue);\r\n\t};\r\n\t// The min and max values for the number input\r\n\tconst minNumber = 7;\r\n\tconst maxNumber = 11;\r\n\r\n\tconst [inputSentence, setInputSentence] = useState(\"\"); // Default value\r\n\tconst handleSentenceChange = (newValue) => {\r\n\t\tsetInputSentence(newValue);\r\n\t};\r\n\t// The sentence validity\r\n\tconst [validSentence, setValidSentence] = useState(true);\r\n\tconst handleSentenceValidity = (newValue) => {\r\n\t\tsetValidSentence(newValue);\r\n\t};\r\n\t// The min and max values for the sentence input\r\n\tconst minSentence = 12;\r\n\tconst maxSentence = 200;\r\n\t// The preset sentences\r\n\tconst presetSentences = [\r\n\t\t\"Letters are to words. And words are to sentences. And sentences are to ideas. And ideas are to being human.\",\r\n\t\t\"I see a little silhouetto of a man, Scaramouche, Scaramouche, will you do the Fandango? Thunderbolt and lightning, very, very frightening me. (Galileo)\",\r\n\t\t\"There's a starman waiting in the sky. He'd like to come and meet us but he thinks he'd blow our minds.\",\r\n\t\t\"If you liked it then you shoulda put a ring on it. Don't be mad once you see that he want it.\",\r\n\t\t\"Don't go wasting your emotion. Lay all your love on me. Don't go sharing your devotion. Lay all your love on me.\",\r\n\t\t\"I'm that bad type, make your mama sad type, make your girlfriend mad tight, might seduce your dad type, I'm the bad guy... duh!\",\r\n\t\t\"I'm a Barbie girl, in the Barbie world. Life in plastic, it's fantastic. You can brush my hair, undress me everywhere. Imagination, life is your creation!\"\r\n\t];\r\n\tconst [currentPreset, setCurrentPreset] = useState(0);\r\n\r\n\t// Radio functionality\r\n\t// Colour radio\r\n\tconst [radioColour, setRadioColour] = useState(\"rainbow\"); // Default value\r\n\tconst colourOptions = [ // Options\r\n\t\t{ name: \"black\", label: \"Black\" },\r\n\t\t{ name: \"rainbow\", label: \"Rainbow\" },\r\n\t\t{ name: \"morning\", label: \"Morning\" },\r\n\t\t{ name: \"daylight\", label: \"Daylight\" },\r\n\t\t{ name: \"sunset\", label: \"Sunset\" },\r\n\t\t{ name: \"twilight\", label: \"Twilight\" },\r\n\t];\r\n\tconst handleColourChange = (name) => {\r\n\t\tsetRadioColour(name);\r\n\t};\r\n\t// Gap radio\r\n\tconst [radioGap, setRadioGap] = useState(\"small\"); // Default value\r\n\tconst gapOptions = [ // Options\r\n\t\t{ name: \"none\", label: \"None\" },\r\n\t\t{ name: \"small\", label: \"Small\" },\r\n\t\t{ name: \"large\", label: \"Large\" }\r\n\t];\r\n\tconst handleGapChange = (name) => {\r\n\t\tsetRadioGap(name);\r\n\t}\r\n\r\n\t// The items\r\n\tconst [items, setItems] = useState(null);\r\n\r\n\t// The sentence\r\n\tconst sentence = useRef(\"\");\r\n\r\n\t// The sentence as an array\r\n\tlet sentenceArray = [];\r\n\r\n\t// The program\r\n\tconst program = useRef([]);\r\n\r\n\t// The index of the current instance\r\n\tconst instanceIndex = useRef(0);\r\n\t// The index of the current letter\r\n\tconst letterIndex = useRef(0);\r\n\t// The flag for a pause\r\n\tconst pause = useRef(false);\r\n\r\n\t// The interval\r\n\tconst interval = useRef(null);\r\n\r\n\t// The number of displayed letters\r\n\tconst noOfDisplayedLetters = useRef(7);\r\n\r\n\t// The duration of an entire instance (in seconds)\r\n\tconst instanceDuration = 2;\r\n\r\n\t// The variable to store the letter elements\r\n\tlet letterElements = [];\r\n\r\n\t// The initialised flag\r\n\tconst initialised = useRef(false);\r\n\r\n\r\n\r\n\tfunction sentencesEngine() {\r\n\r\n\t}\r\n\r\n\r\n\r\n\t// Function to initialise the mode\r\n\tfunction init() {\r\n\t\t// Checking if the number is valid\r\n\t\tif (inputNumber < minNumber || inputNumber > maxNumber) {\r\n\t\t\tsetValidNumber(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Checking if the sentence is valid\r\n\t\tif (inputSentence.length < minSentence || inputSentence.length > maxSentence) {\r\n\t\t\tsetValidSentence(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Setting the initialised flag\r\n\t\tinitialised.current = true;\r\n\r\n\t\t// Pushing the history state\r\n\t\twindow.history.pushState({}, \"\", \"#\" + location.pathname);\r\n\r\n\t\tgsap.to(\".options-cont\", {\r\n\t\t\topacity: 0,\r\n\t\t\tduration: TRANSITION_DURATION,\r\n\t\t\tonComplete: () => {\r\n\t\t\t\t$$(\".options-cont\").style.display = \"none\";\r\n\r\n\t\t\t\t$$(\".letters-cont\").style.display = \"flex\";\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Ensuring the letter cont is visible\r\n\t\t$$(\".letters-cont\").style.opacity = 1;\r\n\r\n\t\t// Broadcasting that the settings are now inactive\r\n\t\twindow.dispatchEvent(new CustomEvent('settingsInactive'));\r\n\r\n\r\n\t\t// Getting the sentence\r\n\t\tsentence.current = inputSentence;\r\n\t\t\r\n\t\t// Getting the number of displayed letters\r\n\t\tnoOfDisplayedLetters.current = inputNumber;\r\n\r\n\t\t// Setting up the sentence array\r\n\t\tsentenceArray = sentence.current.split('');\r\n\r\n\r\n\r\n\t\t// Creating the letter elements\r\n\t\tlet paddingClass = (radioGap === \"small\") ? \"pad--small\" : (radioGap === \"large\") ? \"pad--large\" : \"\";\r\n\r\n\t\tfor (let i = 0; i < noOfDisplayedLetters.current; i++) {\r\n\t\t\t// Creating the letter elements\r\n\t\t\tletterElements.push(\r\n\t\t\t\t<div className={\"letter-cont \" + paddingClass} key={ i }>\r\n\t\t\t\t\t<LetterGrid \r\n\t\t\t\t\t\treference={ \"letter\" + i }\r\n\t\t\t\t\t\tmode='sentences'\r\n\t\t\t\t\t\tcolour={ radioColour }\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\t// Splitting the sentence into words\r\n\t\tlet words = sentence.current.split(\" \");\r\n\t\t// Converting the words into arrays of letters\r\n\t\twords = words.map(word => word.split(\"\"));\r\n\r\n\t\t// Making each instance and adding it to the program\r\n\t\twhile (words.length > 0) {\r\n\t\t\tlet instance = [];\r\n\r\n\t\t\t// Getting the length of this word\r\n\t\t\tlet wordLength = words[0].length;\r\n\r\n\t\t\t// Storing which words to remove from the wordlist\r\n\t\t\tlet wordsToRemove = [];\r\n\r\n\t\t\t// Check if this word can fit wholely into the instance\r\n\t\t\tif (wordLength <= noOfDisplayedLetters.current) {\r\n\t\t\t\t// Adding the word to the instance\r\n\t\t\t\twords[0].forEach(letter => {\r\n\t\t\t\t\tinstance.push(letter);\r\n\t\t\t\t});\r\n\t\t\t\twordsToRemove.push(0);\r\n\r\n\t\t\t\t// Seeing if any following words will also fit into the instance\r\n\t\t\t\tfor (let i = 1; i < words.length; i++) {\r\n\t\t\t\t\tconst word = words[i];\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst potentialNewLength = instance.length + 1 + word.length;\r\n\r\n\t\t\t\t\tif (potentialNewLength <= noOfDisplayedLetters.current) {\r\n\t\t\t\t\t\tinstance.push(\" \");\r\n\t\t\t\t\t\tword.forEach(letter => {\r\n\t\t\t\t\t\t\tinstance.push(letter);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\twordsToRemove.push(i);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Adding in trailing spaces\r\n\t\t\t\twhile (instance.length < noOfDisplayedLetters.current) {\r\n\t\t\t\t\tinstance.push(\" \");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// If the word is longer than the number of letters in each instance, remove the first x number of letters from the word\r\n\t\t\t\tlet word = words[0];\r\n\t\t\t\tlet instanceLetters = word.slice(0, noOfDisplayedLetters.current);\r\n\t\t\t\tinstance.push(...instanceLetters);\r\n\t\t\t\twords[0] = word.slice(noOfDisplayedLetters.current);\r\n\t\t\t}\r\n\r\n\t\t\t// Removing the words that have been added to the instance\r\n\t\t\twords = words.filter((word, index) => !wordsToRemove.includes(index));\r\n\r\n\t\t\t// Adding the instance to the program\r\n\t\t\tprogram.current.push(instance);\r\n\t\t}\r\n\t\tconsole.log(program.current);\r\n\r\n\t\t// Setting the items\r\n\t\tsetItems(letterElements);\r\n\r\n\t\t// Setting up the interval\r\n\t\tinterval.current = setInterval(() => {\r\n\t\t\t// Checking if the pause flag is set\r\n\t\t\tif (pause.current) {\r\n\t\t\t\tpause.current = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Getting the current instance\r\n\t\t\tlet instance = program.current[instanceIndex.current];\r\n\r\n\t\t\t// Setting the letter\r\n\t\t\t// Broadcast the letter to the LetterGrid component\r\n\t\t\twindow.dispatchEvent(\r\n\t\t\t\tnew CustomEvent(('letterChangeletter' + letterIndex.current), {\r\n\t\t\t\t\tdetail: instance[letterIndex.current]\r\n\t\t\t\t})\r\n\t\t\t);\r\n\r\n\t\t\t// Incrementing the letter index\r\n\t\t\tletterIndex.current++;\r\n\r\n\t\t\t// Resetting the letter index if it goes over the number of letters in the instance\r\n\t\t\tif (letterIndex.current >= noOfDisplayedLetters.current) {\r\n\t\t\t\tletterIndex.current = 0;\r\n\r\n\t\t\t\t// Incrementing the instance index\r\n\t\t\t\tinstanceIndex.current++;\r\n\r\n\t\t\t\t// Pausing the interval for one round\r\n\t\t\t\tpause.current = true;\r\n\t\t\t}\r\n\t\t\t// Resetting the instance index if it goes over the number of instances\r\n\t\t\tif (instanceIndex.current >= program.current.length) {\r\n\t\t\t\tinstanceIndex.current = 0;\r\n\t\t\t}\r\n\t\t}, instanceDuration * 1000 / noOfDisplayedLetters.current);\r\n\t}\t\r\n\r\n\tfunction initSettings() {\r\n\t\t// Setting the initialised flag\r\n\t\tinitialised.current = false;\r\n\r\n\t\t// Broadcasting that the settings are now active\r\n\t\twindow.dispatchEvent(new CustomEvent('settingsActive'));\r\n\r\n\t\t// Hiding the items\r\n\t\tgsap.to(\".letters-cont\", {\r\n\t\t\topacity: 0,\r\n\t\t\tduration: TRANSITION_DURATION,\r\n\t\t\tonComplete: () => {\r\n\t\t\t\t$$(\".letters-cont\").style.display = \"none\";\r\n\t\t\t\tsetItems(null);\r\n\r\n\t\t\t\t// Clearing the interval\r\n\t\t\t\tclearInterval(interval.current);\r\n\r\n\t\t\t\t// Resetting the variables\r\n\t\t\t\tsentence.current = \"\";\r\n\t\t\t\tsentenceArray = [];\r\n\t\t\t\tprogram.current = [];\r\n\t\t\t\tinstanceIndex.current = 0;\r\n\t\t\t\tletterIndex.current = 0;\r\n\t\t\t\tpause.current = false;\r\n\t\t\t\tletterElements = [];\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Showing the options\r\n\t\t$$(\".options-cont\").style.display = \"flex\";\r\n\t\tgsap.to(\".options-cont\", {\r\n\t\t\topacity: 1,\r\n\t\t\tdelay: TRANSITION_DURATION * 1.5,\r\n\t\t\tduration: TRANSITION_DURATION\r\n\t\t});\r\n\t}\r\n\r\n\tfunction initPresets() {\r\n\t\t// Setting the sentence\r\n\t\tsetInputSentence(presetSentences[currentPreset]);\r\n\r\n\t\t// Incrementing the current preset\r\n\t\tsetCurrentPreset((currentPreset + 1) % presetSentences.length);\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\t// Make the textarea input detect the change\r\n\t\t\twindow.dispatchEvent(new Event('textareaUpdated'));\r\n\t\t}, 4);\r\n\t}\r\n\r\n\r\n\r\n\tfunction handlePopstate() {\r\n\t\tif (initialised.current) {\r\n\t\t\t// Reloading the page\r\n\t\t\t// window.location.reload();\r\n\t\t\tinitSettings();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\t// Adding the event lister for the popstate event\r\n\t\twindow.addEventListener(\"popstate\", handlePopstate);\r\n\r\n\t\t// Adding the event listener for the settingsClicked event\r\n\t\twindow.addEventListener(\"settingsClicked--sentences\", initSettings);\r\n\r\n\t\t// Cleanup\r\n\t\treturn () => {\r\n\t\t\t// Removing the event listeners\r\n\t\t\twindow.removeEventListener(\"popstate\", handlePopstate);\r\n\r\n\t\t\t// Removing the event listener for the settingsClicked event\r\n\t\t\twindow.removeEventListener(\"settingsClicked--sentences\", initSettings);\r\n\t\t};\r\n\t}, []);\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div className='Sentences mode-cont'>\r\n\t\t\t<div className='letters-cont'>\r\n\t\t\t\t{ items }\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className='options-cont d-flex flex-v ai-c gap--md'>\r\n\t\t\t\t<h1>Sentences options</h1>\r\n\r\n\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t<h2>Number of letters displayed</h2>\r\n\t\t\t\t\t<Input.Number \r\n\t\t\t\t\t\tplaceholder=\"7\"\r\n\t\t\t\t\t\tvalue={ inputNumber }\r\n\t\t\t\t\t\tonChange={ handleNumberChange }\r\n\t\t\t\t\t\tmin={ minNumber }\r\n\t\t\t\t\t\tmax={ maxNumber }\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// If the number is too long or too short, show an error message\r\n\t\t\t\t\t\t((inputNumber < minNumber || inputNumber > maxNumber) && !validNumber) ? <p className='numberInputError'>(Number must be between {minNumber} and {maxNumber})</p> : ''\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t<h2>Sentence to print</h2>\r\n\t\t\t\t\t<div className='sentence-input-cont d-flex flex-h jc-btwn ai-c gap--sm'>\r\n\t\t\t\t\t\t<Input.TextArea \r\n\t\t\t\t\t\t\tplaceholder=\"Type here...\"\r\n\t\t\t\t\t\t\tvalue={ inputSentence }\r\n\t\t\t\t\t\t\tonChange={ handleSentenceChange }\r\n\t\t\t\t\t\t\tminLength={ minSentence }\r\n\t\t\t\t\t\t\tmaxLength={ maxSentence }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button.Minor onClick={ initPresets }>Cycle presets</Button.Minor>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// If the sentence is too long or too short, show an error message\r\n\t\t\t\t\t\t((inputSentence.length < minSentence || inputSentence.length > maxSentence) && !validSentence) ? <p className='sentenceInputError'>(The sentence must be {minSentence}-{maxSentence} characters long)</p> : ''\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t<h2>Colour</h2>\r\n\t\t\t\t\t<Radio\r\n\t\t\t\t\t\toptions={ colourOptions }\r\n\t\t\t\t\t\tselectedValue={ radioColour }\r\n\t\t\t\t\t\tonChange={ handleColourChange }\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='d-flex flex-v ai-c gap--sm'>\r\n\t\t\t\t\t<h2>Gap between letters</h2>\r\n\t\t\t\t\t<Radio\r\n\t\t\t\t\t\toptions={ gapOptions }\r\n\t\t\t\t\t\tselectedValue={ radioGap }\r\n\t\t\t\t\t\tonChange={ handleGapChange }\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<Button.Major onClick={init}>Start!</Button.Major>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}"],"names":["Major","_ref","children","onClick","_jsx","className","Minor","_ref2","Text","value","placeholder","onChange","minLength","maxLength","inputClass","length","type","e","target","Number","min","max","TextArea","_ref3","autoGrow","element","$$","style","height","scrollHeight","useEffect","window","addEventListener","onInput","Radio","options","selectedValue","hoveredOption","setHoveredOption","useState","handleMouseLeave","map","option","name","handleOptionClick","onMouseEnter","handleMouseEnter","onMouseLeave","label","Sentences","location","useLocation","inputNumber","setInputNumber","validNumber","setValidNumber","inputSentence","setInputSentence","validSentence","setValidSentence","maxSentence","presetSentences","currentPreset","setCurrentPreset","radioColour","setRadioColour","radioGap","setRadioGap","items","setItems","sentence","useRef","sentenceArray","program","instanceIndex","letterIndex","pause","interval","noOfDisplayedLetters","letterElements","initialised","initSettings","current","dispatchEvent","CustomEvent","gsap","to","opacity","duration","TRANSITION_DURATION","onComplete","display","clearInterval","delay","handlePopstate","removeEventListener","_jsxs","Input","newValue","Button","setTimeout","Event","history","pushState","pathname","split","paddingClass","i","push","LetterGrid","reference","mode","colour","words","word","instance","wordLength","wordsToRemove","forEach","letter","instanceLetters","slice","filter","index","includes","console","log","setInterval","detail","instanceDuration"],"sourceRoot":""}